// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/media.proto

#include "protos/model/v1/media.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v1 {
namespace model {
PROTOBUF_CONSTEXPR Image::Image(
    ::_pbi::ConstantInitialized)
  : content_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , _oneof_case_{}{}
struct ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImageDefaultTypeInternal() {}
  union {
    Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImageDefaultTypeInternal _Image_default_instance_;
PROTOBUF_CONSTEXPR PointCloud::PointCloud(
    ::_pbi::ConstantInitialized)
  : world_to_local_(nullptr)
  , _oneof_case_{}{}
struct PointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudDefaultTypeInternal() {}
  union {
    PointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudDefaultTypeInternal _PointCloud_default_instance_;
PROTOBUF_CONSTEXPR RtcPointCloud::RtcPointCloud(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , world_to_local_(nullptr){}
struct RtcPointCloudDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RtcPointCloudDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RtcPointCloudDefaultTypeInternal() {}
  union {
    RtcPointCloud _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RtcPointCloudDefaultTypeInternal _RtcPointCloud_default_instance_;
PROTOBUF_CONSTEXPR H264VideoFrame::H264VideoFrame(
    ::_pbi::ConstantInitialized)
  : frame_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(0)
  , flags_(0){}
struct H264VideoFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR H264VideoFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~H264VideoFrameDefaultTypeInternal() {}
  union {
    H264VideoFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 H264VideoFrameDefaultTypeInternal _H264VideoFrame_default_instance_;
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized)
  : format_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , chunk_data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , index_(0){}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
PROTOBUF_CONSTEXPR Video::Video(
    ::_pbi::ConstantInitialized)
  : mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , duration_(int64_t{0})
  , _oneof_case_{}{}
struct VideoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoDefaultTypeInternal() {}
  union {
    Video _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoDefaultTypeInternal _Video_default_instance_;
PROTOBUF_CONSTEXPR TransformTree::TransformTree(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct TransformTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformTreeDefaultTypeInternal() {}
  union {
    TransformTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformTreeDefaultTypeInternal _TransformTree_default_instance_;
}  // namespace model
}  // namespace v1
static ::_pb::Metadata file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fmedia_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fmedia_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Image, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Image, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Image, content_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::Image, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::PointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::PointCloud, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::PointCloud, world_to_local_),
  PROTOBUF_FIELD_OFFSET(::v1::model::PointCloud, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcPointCloud, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcPointCloud, data_),
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcPointCloud, world_to_local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::H264VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::H264VideoFrame, index_),
  PROTOBUF_FIELD_OFFSET(::v1::model::H264VideoFrame, flags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::H264VideoFrame, frame_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AudioChunk, index_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AudioChunk, format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AudioChunk, chunk_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Video, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Video, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Video, mime_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Video, duration_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::Video, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TransformTree, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::TransformTree, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::TransformTree, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v1::model::Image)},
  { 10, -1, -1, sizeof(::v1::model::PointCloud)},
  { 20, -1, -1, sizeof(::v1::model::RtcPointCloud)},
  { 28, -1, -1, sizeof(::v1::model::H264VideoFrame)},
  { 37, -1, -1, sizeof(::v1::model::AudioChunk)},
  { 46, -1, -1, sizeof(::v1::model::Video)},
  { 57, -1, -1, sizeof(::v1::model::TransformTree)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v1::model::_Image_default_instance_._instance,
  &::v1::model::_PointCloud_default_instance_._instance,
  &::v1::model::_RtcPointCloud_default_instance_._instance,
  &::v1::model::_H264VideoFrame_default_instance_._instance,
  &::v1::model::_AudioChunk_default_instance_._instance,
  &::v1::model::_Video_default_instance_._instance,
  &::v1::model::_TransformTree_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fmedia_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033protos/model/v1/media.proto\022\010v1.model\032"
  "\032protos/model/v1/math.proto\"Z\n\005Image\022!\n\014"
  "content_type\030\001 \001(\tR\013contentType\022\022\n\003url\030\002"
  " \001(\tH\000R\003url\022\022\n\003raw\030\003 \001(\014H\000R\003rawB\006\n\004data\""
  "w\n\nPointCloud\022\022\n\003url\030\001 \001(\tH\000R\003url\022\022\n\003raw"
  "\030\002 \001(\014H\000R\003raw\0229\n\016world_to_local\030\003 \001(\0132\023."
  "v1.model.TransformR\014worldToLocalB\006\n\004data"
  "\"^\n\rRtcPointCloud\022\022\n\004data\030\001 \001(\014R\004data\0229\n"
  "\016world_to_local\030\002 \001(\0132\023.v1.model.Transfo"
  "rmR\014worldToLocal\"[\n\016H264VideoFrame\022\024\n\005in"
  "dex\030\001 \001(\005R\005index\022\024\n\005flags\030\002 \001(\005R\005flags\022\035"
  "\n\nframe_data\030\003 \001(\014R\tframeData\"Y\n\nAudioCh"
  "unk\022\024\n\005index\030\001 \001(\005R\005index\022\026\n\006format\030\002 \001("
  "\tR\006format\022\035\n\nchunk_data\030\003 \001(\014R\tchunkData"
  "\"p\n\005Video\022\033\n\tmime_type\030\001 \001(\tR\010mimeType\022\032"
  "\n\010duration\030\002 \001(\003R\010duration\022\022\n\003url\030\003 \001(\tH"
  "\000R\003url\022\022\n\003raw\030\004 \001(\014H\000R\003rawB\006\n\004data\"\?\n\rTr"
  "ansformTree\022\022\n\003url\030\001 \001(\tH\000R\003url\022\022\n\003raw\030\002"
  " \001(\014H\000R\003rawB\006\n\004dataB+Z)github.com/Forman"
  "tIO/genproto/go/v1/modelb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_deps[1] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto = {
    false, false, 792, descriptor_table_protodef_protos_2fmodel_2fv1_2fmedia_2eproto,
    "protos/model/v1/media.proto",
    &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto::offsets,
    file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fmedia_2eproto,
    file_level_service_descriptors_protos_2fmodel_2fv1_2fmedia_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fmedia_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto);
namespace v1 {
namespace model {

// ===================================================================

class Image::_Internal {
 public:
};

Image::Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Image)
}
Image::Image(const Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    content_type_.Set(from._internal_content_type(), 
      GetArenaForAllocation());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Image)
}

inline void Image::SharedCtor() {
content_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
clear_has_data();
}

Image::~Image() {
  // @@protoc_insertion_point(destructor:v1.model.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  content_type_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Image::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Image)
  switch (data_case()) {
    case kUrl: {
      data_.url_.Destroy();
      break;
    }
    case kRaw: {
      data_.raw_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Image::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  content_type_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string content_type = 1 [json_name = "contentType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Image.content_type"));
        } else
          goto handle_unusual;
        continue;
      // string url = 2 [json_name = "url"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Image.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes raw = 3 [json_name = "raw"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string content_type = 1 [json_name = "contentType"];
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Image.content_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_content_type(), target);
  }

  // string url = 2 [json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Image.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  // bytes raw = 3 [json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Image)
  return target;
}

size_t Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string content_type = 1 [json_name = "contentType"];
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  switch (data_case()) {
    // string url = 2 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 3 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Image::GetClassData() const { return &_class_data_; }

void Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Image *>(to)->MergeFrom(
      static_cast<const Image &>(from));
}


void Image::MergeFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_content_type().empty()) {
    _internal_set_content_type(from._internal_content_type());
  }
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Image::CopyFrom(const Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Image::IsInitialized() const {
  return true;
}

void Image::InternalSwap(Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &content_type_, lhs_arena,
      &other->content_type_, rhs_arena
  );
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[0]);
}

// ===================================================================

class PointCloud::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const PointCloud* msg);
};

const ::v1::model::Transform&
PointCloud::_Internal::world_to_local(const PointCloud* msg) {
  return *msg->world_to_local_;
}
void PointCloud::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
PointCloud::PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.PointCloud)
}
PointCloud::PointCloud(const PointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  clear_has_data();
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.PointCloud)
}

inline void PointCloud::SharedCtor() {
world_to_local_ = nullptr;
clear_has_data();
}

PointCloud::~PointCloud() {
  // @@protoc_insertion_point(destructor:v1.model.PointCloud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete world_to_local_;
  if (has_data()) {
    clear_data();
  }
}

void PointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointCloud::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.PointCloud)
  switch (data_case()) {
    case kUrl: {
      data_.url_.Destroy();
      break;
    }
    case kRaw: {
      data_.raw_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void PointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.PointCloud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.PointCloud.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes raw = 2 [json_name = "raw"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointCloud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.PointCloud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.PointCloud.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes raw = 2 [json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_raw(), target);
  }

  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.PointCloud)
  return target;
}

size_t PointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.PointCloud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  switch (data_case()) {
    // string url = 1 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 2 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointCloud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointCloud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointCloud::GetClassData() const { return &_class_data_; }

void PointCloud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointCloud *>(to)->MergeFrom(
      static_cast<const PointCloud &>(from));
}


void PointCloud::MergeFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.PointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloud::CopyFrom(const PointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.PointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloud::IsInitialized() const {
  return true;
}

void PointCloud::InternalSwap(PointCloud* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(world_to_local_, other->world_to_local_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[1]);
}

// ===================================================================

class RtcPointCloud::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const RtcPointCloud* msg);
};

const ::v1::model::Transform&
RtcPointCloud::_Internal::world_to_local(const RtcPointCloud* msg) {
  return *msg->world_to_local_;
}
void RtcPointCloud::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
RtcPointCloud::RtcPointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.RtcPointCloud)
}
RtcPointCloud::RtcPointCloud(const RtcPointCloud& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.RtcPointCloud)
}

inline void RtcPointCloud::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
world_to_local_ = nullptr;
}

RtcPointCloud::~RtcPointCloud() {
  // @@protoc_insertion_point(destructor:v1.model.RtcPointCloud)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RtcPointCloud::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
  if (this != internal_default_instance()) delete world_to_local_;
}

void RtcPointCloud::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtcPointCloud::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.RtcPointCloud)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcPointCloud::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 2 [json_name = "worldToLocal"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RtcPointCloud::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.RtcPointCloud)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // .v1.model.Transform world_to_local = 2 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.RtcPointCloud)
  return target;
}

size_t RtcPointCloud::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.RtcPointCloud)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // .v1.model.Transform world_to_local = 2 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RtcPointCloud::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RtcPointCloud::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RtcPointCloud::GetClassData() const { return &_class_data_; }

void RtcPointCloud::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RtcPointCloud *>(to)->MergeFrom(
      static_cast<const RtcPointCloud &>(from));
}


void RtcPointCloud::MergeFrom(const RtcPointCloud& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.RtcPointCloud)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RtcPointCloud::CopyFrom(const RtcPointCloud& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.RtcPointCloud)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcPointCloud::IsInitialized() const {
  return true;
}

void RtcPointCloud::InternalSwap(RtcPointCloud* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
  swap(world_to_local_, other->world_to_local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcPointCloud::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[2]);
}

// ===================================================================

class H264VideoFrame::_Internal {
 public:
};

H264VideoFrame::H264VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.H264VideoFrame)
}
H264VideoFrame::H264VideoFrame(const H264VideoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_data().empty()) {
    frame_data_.Set(from._internal_frame_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:v1.model.H264VideoFrame)
}

inline void H264VideoFrame::SharedCtor() {
frame_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&index_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
}

H264VideoFrame::~H264VideoFrame() {
  // @@protoc_insertion_point(destructor:v1.model.H264VideoFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void H264VideoFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_data_.Destroy();
}

void H264VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void H264VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.H264VideoFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_data_.ClearToEmpty();
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* H264VideoFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flags = 2 [json_name = "flags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes frame_data = 3 [json_name = "frameData"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frame_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* H264VideoFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.H264VideoFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // int32 flags = 2 [json_name = "flags"];
  if (this->_internal_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_flags(), target);
  }

  // bytes frame_data = 3 [json_name = "frameData"];
  if (!this->_internal_frame_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_frame_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.H264VideoFrame)
  return target;
}

size_t H264VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.H264VideoFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes frame_data = 3 [json_name = "frameData"];
  if (!this->_internal_frame_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_frame_data());
  }

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  // int32 flags = 2 [json_name = "flags"];
  if (this->_internal_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData H264VideoFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    H264VideoFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*H264VideoFrame::GetClassData() const { return &_class_data_; }

void H264VideoFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<H264VideoFrame *>(to)->MergeFrom(
      static_cast<const H264VideoFrame &>(from));
}


void H264VideoFrame::MergeFrom(const H264VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.H264VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_data().empty()) {
    _internal_set_frame_data(from._internal_frame_data());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  if (from._internal_flags() != 0) {
    _internal_set_flags(from._internal_flags());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void H264VideoFrame::CopyFrom(const H264VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.H264VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool H264VideoFrame::IsInitialized() const {
  return true;
}

void H264VideoFrame::InternalSwap(H264VideoFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_data_, lhs_arena,
      &other->frame_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(H264VideoFrame, flags_)
      + sizeof(H264VideoFrame::flags_)
      - PROTOBUF_FIELD_OFFSET(H264VideoFrame, index_)>(
          reinterpret_cast<char*>(&index_),
          reinterpret_cast<char*>(&other->index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata H264VideoFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[3]);
}

// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_format().empty()) {
    format_.Set(from._internal_format(), 
      GetArenaForAllocation());
  }
  chunk_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chunk_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chunk_data().empty()) {
    chunk_data_.Set(from._internal_chunk_data(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:v1.model.AudioChunk)
}

inline void AudioChunk::SharedCtor() {
format_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  format_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chunk_data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chunk_data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = 0;
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:v1.model.AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  format_.Destroy();
  chunk_data_.Destroy();
}

void AudioChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AudioChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmpty();
  chunk_data_.ClearToEmpty();
  index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 index = 1 [json_name = "index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string format = 2 [json_name = "format"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AudioChunk.format"));
        } else
          goto handle_unusual;
        continue;
      // bytes chunk_data = 3 [json_name = "chunkData"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_chunk_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AudioChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_index(), target);
  }

  // string format = 2 [json_name = "format"];
  if (!this->_internal_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AudioChunk.format");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_format(), target);
  }

  // bytes chunk_data = 3 [json_name = "chunkData"];
  if (!this->_internal_chunk_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_chunk_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AudioChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 2 [json_name = "format"];
  if (!this->_internal_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  // bytes chunk_data = 3 [json_name = "chunkData"];
  if (!this->_internal_chunk_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chunk_data());
  }

  // int32 index = 1 [json_name = "index"];
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }

void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AudioChunk *>(to)->MergeFrom(
      static_cast<const AudioChunk &>(from));
}


void AudioChunk::MergeFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AudioChunk)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_format().empty()) {
    _internal_set_format(from._internal_format());
  }
  if (!from._internal_chunk_data().empty()) {
    _internal_set_chunk_data(from._internal_chunk_data());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &format_, lhs_arena,
      &other->format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &chunk_data_, lhs_arena,
      &other->chunk_data_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[4]);
}

// ===================================================================

class Video::_Internal {
 public:
};

Video::Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Video)
}
Video::Video(const Video& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  duration_ = from.duration_;
  clear_has_data();
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Video)
}

inline void Video::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
duration_ = int64_t{0};
clear_has_data();
}

Video::~Video() {
  // @@protoc_insertion_point(destructor:v1.model.Video)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Video::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void Video::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Video::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Video)
  switch (data_case()) {
    case kUrl: {
      data_.url_.Destroy();
      break;
    }
    case kRaw: {
      data_.raw_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Video::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Video)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_type_.ClearToEmpty();
  duration_ = int64_t{0};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Video::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1 [json_name = "mimeType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Video.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 duration = 2 [json_name = "duration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Video.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes raw = 4 [json_name = "raw"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Video::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Video)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Video.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // int64 duration = 2 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_duration(), target);
  }

  // string url = 3 [json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Video.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  // bytes raw = 4 [json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Video)
  return target;
}

size_t Video::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Video)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // int64 duration = 2 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration());
  }

  switch (data_case()) {
    // string url = 3 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 4 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Video::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Video::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Video::GetClassData() const { return &_class_data_; }

void Video::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Video *>(to)->MergeFrom(
      static_cast<const Video &>(from));
}


void Video::MergeFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Video)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Video::CopyFrom(const Video& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Video)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Video::IsInitialized() const {
  return true;
}

void Video::InternalSwap(Video* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  swap(duration_, other->duration_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Video::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[5]);
}

// ===================================================================

class TransformTree::_Internal {
 public:
};

TransformTree::TransformTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TransformTree)
}
TransformTree::TransformTree(const TransformTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_data();
  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TransformTree)
}

inline void TransformTree::SharedCtor() {
clear_has_data();
}

TransformTree::~TransformTree() {
  // @@protoc_insertion_point(destructor:v1.model.TransformTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TransformTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_data()) {
    clear_data();
  }
}

void TransformTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransformTree::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.TransformTree)
  switch (data_case()) {
    case kUrl: {
      data_.url_.Destroy();
      break;
    }
    case kRaw: {
      data_.raw_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void TransformTree::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TransformTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransformTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string url = 1 [json_name = "url"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TransformTree.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes raw = 2 [json_name = "raw"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransformTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TransformTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string url = 1 [json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TransformTree.url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_url(), target);
  }

  // bytes raw = 2 [json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TransformTree)
  return target;
}

size_t TransformTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TransformTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (data_case()) {
    // string url = 1 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 2 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransformTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransformTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransformTree::GetClassData() const { return &_class_data_; }

void TransformTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransformTree *>(to)->MergeFrom(
      static_cast<const TransformTree &>(from));
}


void TransformTree::MergeFrom(const TransformTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TransformTree)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.data_case()) {
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransformTree::CopyFrom(const TransformTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TransformTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransformTree::IsInitialized() const {
  return true;
}

void TransformTree::InternalSwap(TransformTree* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransformTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fmedia_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Image*
Arena::CreateMaybeMessage< ::v1::model::Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Image >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::PointCloud*
Arena::CreateMaybeMessage< ::v1::model::PointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::PointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::RtcPointCloud*
Arena::CreateMaybeMessage< ::v1::model::RtcPointCloud >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::RtcPointCloud >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::H264VideoFrame*
Arena::CreateMaybeMessage< ::v1::model::H264VideoFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::H264VideoFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AudioChunk*
Arena::CreateMaybeMessage< ::v1::model::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Video*
Arena::CreateMaybeMessage< ::v1::model::Video >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Video >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TransformTree*
Arena::CreateMaybeMessage< ::v1::model::TransformTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TransformTree >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/health.proto

#include "protos/model/v1/health.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v1 {
namespace model {
constexpr Health::Health(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(0)

  , _oneof_case_{}{}
struct HealthDefaultTypeInternal {
  constexpr HealthDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HealthDefaultTypeInternal() {}
  union {
    Health _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HealthDefaultTypeInternal _Health_default_instance_;
constexpr Battery::Battery(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : percentage_(0)
  , voltage_(0)
  , current_(0)
  , charge_(0){}
struct BatteryDefaultTypeInternal {
  constexpr BatteryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BatteryDefaultTypeInternal() {}
  union {
    Battery _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BatteryDefaultTypeInternal _Battery_default_instance_;
constexpr BufferMetadata::BufferMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : session_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , latest_ttl_stream_channel_buffered_bytes_(uint64_t{0u})
  , reliable_stream_channel_buffered_bytes_(uint64_t{0u})
  , latest_reliable_stream_channel_buffered_bytes_(uint64_t{0u})
  , latest_try_once_stream_channel_buffered_bytes_(uint64_t{0u}){}
struct BufferMetadataDefaultTypeInternal {
  constexpr BufferMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BufferMetadataDefaultTypeInternal() {}
  union {
    BufferMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BufferMetadataDefaultTypeInternal _BufferMetadata_default_instance_;
}  // namespace model
}  // namespace v1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fhealth_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fhealth_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fhealth_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Health, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Health, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Health, status_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::Health, clock_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Battery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Battery, percentage_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Battery, voltage_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Battery, current_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Battery, charge_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, session_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, latest_ttl_stream_channel_buffered_bytes_),
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, reliable_stream_channel_buffered_bytes_),
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, latest_reliable_stream_channel_buffered_bytes_),
  PROTOBUF_FIELD_OFFSET(::v1::model::BufferMetadata, latest_try_once_stream_channel_buffered_bytes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::Health)},
  { 8, -1, sizeof(::v1::model::Battery)},
  { 17, -1, sizeof(::v1::model::BufferMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Health_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Battery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_BufferMetadata_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fhealth_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protos/model/v1/health.proto\022\010v1.model"
  "\"\\\n\006Health\022.\n\006status\030\001 \001(\0162\026.v1.model.He"
  "althStatusR\006status\022\031\n\007skew_ms\030\002 \001(\003H\000R\006s"
  "kewMsB\007\n\005clock\"u\n\007Battery\022\036\n\npercentage\030"
  "\001 \001(\001R\npercentage\022\030\n\007voltage\030\002 \001(\001R\007volt"
  "age\022\030\n\007current\030\003 \001(\001R\007current\022\026\n\006charge\030"
  "\004 \001(\001R\006charge\"\233\003\n\016BufferMetadata\022\035\n\nsess"
  "ion_id\030\001 \001(\tR\tsessionId\022U\n(latest_ttl_st"
  "ream_channel_buffered_bytes\030\002 \001(\004R#lates"
  "tTtlStreamChannelBufferedBytes\022R\n&reliab"
  "le_stream_channel_buffered_bytes\030\003 \001(\004R\""
  "reliableStreamChannelBufferedBytes\022_\n-la"
  "test_reliable_stream_channel_buffered_by"
  "tes\030\004 \001(\004R(latestReliableStreamChannelBu"
  "fferedBytes\022^\n-latest_try_once_stream_ch"
  "annel_buffered_bytes\030\005 \001(\004R\'latestTryOnc"
  "eStreamChannelBufferedBytes*`\n\014HealthSta"
  "tus\022\022\n\016HEALTH_UNKNOWN\020\000\022\026\n\022HEALTH_OPERAT"
  "IONAL\020\001\022\022\n\016HEALTH_OFFLINE\020\002\022\020\n\014HEALTH_ER"
  "ROR\020\003B+Z)github.com/FormantIO/genproto/g"
  "o/v1/modelb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto = {
  false, false, 818, descriptor_table_protodef_protos_2fmodel_2fv1_2fhealth_2eproto, "protos/model/v1/health.proto", 
  &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fhealth_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fhealth_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fhealth_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fhealth_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fhealth_2eproto[0];
}
bool HealthStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Health::_Internal {
 public:
};

Health::Health(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Health)
}
Health::Health(const Health& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_ = from.status_;
  clear_has_clock();
  switch (from.clock_case()) {
    case kSkewMs: {
      _internal_set_skew_ms(from._internal_skew_ms());
      break;
    }
    case CLOCK_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Health)
}

void Health::SharedCtor() {
status_ = 0;
clear_has_clock();
}

Health::~Health() {
  // @@protoc_insertion_point(destructor:v1.model.Health)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Health::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_clock()) {
    clear_clock();
  }
}

void Health::ArenaDtor(void* object) {
  Health* _this = reinterpret_cast< Health* >(object);
  (void)_this;
}
void Health::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Health::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Health::clear_clock() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Health)
  switch (clock_case()) {
    case kSkewMs: {
      // No need to clear
      break;
    }
    case CLOCK_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CLOCK_NOT_SET;
}


void Health::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_ = 0;
  clear_clock();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Health::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.HealthStatus status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::v1::model::HealthStatus>(val));
        } else goto handle_unusual;
        continue;
      // int64 skew_ms = 2 [json_name = "skewMs"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _internal_set_skew_ms(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Health::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Health)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.HealthStatus status = 1 [json_name = "status"];
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // int64 skew_ms = 2 [json_name = "skewMs"];
  if (_internal_has_skew_ms()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_skew_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Health)
  return target;
}

size_t Health::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Health)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.HealthStatus status = 1 [json_name = "status"];
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  switch (clock_case()) {
    // int64 skew_ms = 2 [json_name = "skewMs"];
    case kSkewMs: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
          this->_internal_skew_ms());
      break;
    }
    case CLOCK_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Health::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Health)
  GOOGLE_DCHECK_NE(&from, this);
  const Health* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Health>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Health)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Health)
    MergeFrom(*source);
  }
}

void Health::MergeFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Health)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  switch (from.clock_case()) {
    case kSkewMs: {
      _internal_set_skew_ms(from._internal_skew_ms());
      break;
    }
    case CLOCK_NOT_SET: {
      break;
    }
  }
}

void Health::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Health::CopyFrom(const Health& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Health)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Health::IsInitialized() const {
  return true;
}

void Health::InternalSwap(Health* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(status_, other->status_);
  swap(clock_, other->clock_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Health::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fhealth_2eproto[0]);
}

// ===================================================================

class Battery::_Internal {
 public:
};

Battery::Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Battery)
}
Battery::Battery(const Battery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&percentage_, &from.percentage_,
    static_cast<size_t>(reinterpret_cast<char*>(&charge_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(charge_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Battery)
}

void Battery::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&percentage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&charge_) -
    reinterpret_cast<char*>(&percentage_)) + sizeof(charge_));
}

Battery::~Battery() {
  // @@protoc_insertion_point(destructor:v1.model.Battery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Battery::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Battery::ArenaDtor(void* object) {
  Battery* _this = reinterpret_cast< Battery* >(object);
  (void)_this;
}
void Battery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Battery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Battery::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&percentage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&charge_) -
      reinterpret_cast<char*>(&percentage_)) + sizeof(charge_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Battery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double percentage = 1 [json_name = "percentage"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double voltage = 2 [json_name = "voltage"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          voltage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double current = 3 [json_name = "current"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          current_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double charge = 4 [json_name = "charge"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          charge_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Battery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Battery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double percentage = 1 [json_name = "percentage"];
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_percentage(), target);
  }

  // double voltage = 2 [json_name = "voltage"];
  if (!(this->voltage() <= 0 && this->voltage() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_voltage(), target);
  }

  // double current = 3 [json_name = "current"];
  if (!(this->current() <= 0 && this->current() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_current(), target);
  }

  // double charge = 4 [json_name = "charge"];
  if (!(this->charge() <= 0 && this->charge() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_charge(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Battery)
  return target;
}

size_t Battery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Battery)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double percentage = 1 [json_name = "percentage"];
  if (!(this->percentage() <= 0 && this->percentage() >= 0)) {
    total_size += 1 + 8;
  }

  // double voltage = 2 [json_name = "voltage"];
  if (!(this->voltage() <= 0 && this->voltage() >= 0)) {
    total_size += 1 + 8;
  }

  // double current = 3 [json_name = "current"];
  if (!(this->current() <= 0 && this->current() >= 0)) {
    total_size += 1 + 8;
  }

  // double charge = 4 [json_name = "charge"];
  if (!(this->charge() <= 0 && this->charge() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Battery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  const Battery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Battery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Battery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Battery)
    MergeFrom(*source);
  }
}

void Battery::MergeFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Battery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.percentage() <= 0 && from.percentage() >= 0)) {
    _internal_set_percentage(from._internal_percentage());
  }
  if (!(from.voltage() <= 0 && from.voltage() >= 0)) {
    _internal_set_voltage(from._internal_voltage());
  }
  if (!(from.current() <= 0 && from.current() >= 0)) {
    _internal_set_current(from._internal_current());
  }
  if (!(from.charge() <= 0 && from.charge() >= 0)) {
    _internal_set_charge(from._internal_charge());
  }
}

void Battery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Battery::CopyFrom(const Battery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Battery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Battery::IsInitialized() const {
  return true;
}

void Battery::InternalSwap(Battery* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Battery, charge_)
      + sizeof(Battery::charge_)
      - PROTOBUF_FIELD_OFFSET(Battery, percentage_)>(
          reinterpret_cast<char*>(&percentage_),
          reinterpret_cast<char*>(&other->percentage_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Battery::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fhealth_2eproto[1]);
}

// ===================================================================

class BufferMetadata::_Internal {
 public:
};

BufferMetadata::BufferMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.BufferMetadata)
}
BufferMetadata::BufferMetadata(const BufferMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&latest_ttl_stream_channel_buffered_bytes_, &from.latest_ttl_stream_channel_buffered_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_try_once_stream_channel_buffered_bytes_) -
    reinterpret_cast<char*>(&latest_ttl_stream_channel_buffered_bytes_)) + sizeof(latest_try_once_stream_channel_buffered_bytes_));
  // @@protoc_insertion_point(copy_constructor:v1.model.BufferMetadata)
}

void BufferMetadata::SharedCtor() {
session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latest_ttl_stream_channel_buffered_bytes_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&latest_try_once_stream_channel_buffered_bytes_) -
    reinterpret_cast<char*>(&latest_ttl_stream_channel_buffered_bytes_)) + sizeof(latest_try_once_stream_channel_buffered_bytes_));
}

BufferMetadata::~BufferMetadata() {
  // @@protoc_insertion_point(destructor:v1.model.BufferMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BufferMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BufferMetadata::ArenaDtor(void* object) {
  BufferMetadata* _this = reinterpret_cast< BufferMetadata* >(object);
  (void)_this;
}
void BufferMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BufferMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BufferMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.BufferMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  ::memset(&latest_ttl_stream_channel_buffered_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_try_once_stream_channel_buffered_bytes_) -
      reinterpret_cast<char*>(&latest_ttl_stream_channel_buffered_bytes_)) + sizeof(latest_try_once_stream_channel_buffered_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BufferMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_id = 1 [json_name = "sessionId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.BufferMetadata.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 latest_ttl_stream_channel_buffered_bytes = 2 [json_name = "latestTtlStreamChannelBufferedBytes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          latest_ttl_stream_channel_buffered_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 reliable_stream_channel_buffered_bytes = 3 [json_name = "reliableStreamChannelBufferedBytes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          reliable_stream_channel_buffered_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 latest_reliable_stream_channel_buffered_bytes = 4 [json_name = "latestReliableStreamChannelBufferedBytes"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          latest_reliable_stream_channel_buffered_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 latest_try_once_stream_channel_buffered_bytes = 5 [json_name = "latestTryOnceStreamChannelBufferedBytes"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          latest_try_once_stream_channel_buffered_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BufferMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.BufferMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_id = 1 [json_name = "sessionId"];
  if (!this->session_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.BufferMetadata.session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_id(), target);
  }

  // uint64 latest_ttl_stream_channel_buffered_bytes = 2 [json_name = "latestTtlStreamChannelBufferedBytes"];
  if (this->latest_ttl_stream_channel_buffered_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_latest_ttl_stream_channel_buffered_bytes(), target);
  }

  // uint64 reliable_stream_channel_buffered_bytes = 3 [json_name = "reliableStreamChannelBufferedBytes"];
  if (this->reliable_stream_channel_buffered_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_reliable_stream_channel_buffered_bytes(), target);
  }

  // uint64 latest_reliable_stream_channel_buffered_bytes = 4 [json_name = "latestReliableStreamChannelBufferedBytes"];
  if (this->latest_reliable_stream_channel_buffered_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_latest_reliable_stream_channel_buffered_bytes(), target);
  }

  // uint64 latest_try_once_stream_channel_buffered_bytes = 5 [json_name = "latestTryOnceStreamChannelBufferedBytes"];
  if (this->latest_try_once_stream_channel_buffered_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_latest_try_once_stream_channel_buffered_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.BufferMetadata)
  return target;
}

size_t BufferMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.BufferMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 1 [json_name = "sessionId"];
  if (!this->session_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // uint64 latest_ttl_stream_channel_buffered_bytes = 2 [json_name = "latestTtlStreamChannelBufferedBytes"];
  if (this->latest_ttl_stream_channel_buffered_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_ttl_stream_channel_buffered_bytes());
  }

  // uint64 reliable_stream_channel_buffered_bytes = 3 [json_name = "reliableStreamChannelBufferedBytes"];
  if (this->reliable_stream_channel_buffered_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_reliable_stream_channel_buffered_bytes());
  }

  // uint64 latest_reliable_stream_channel_buffered_bytes = 4 [json_name = "latestReliableStreamChannelBufferedBytes"];
  if (this->latest_reliable_stream_channel_buffered_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_reliable_stream_channel_buffered_bytes());
  }

  // uint64 latest_try_once_stream_channel_buffered_bytes = 5 [json_name = "latestTryOnceStreamChannelBufferedBytes"];
  if (this->latest_try_once_stream_channel_buffered_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_latest_try_once_stream_channel_buffered_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BufferMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.BufferMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const BufferMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BufferMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.BufferMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.BufferMetadata)
    MergeFrom(*source);
  }
}

void BufferMetadata::MergeFrom(const BufferMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.BufferMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.session_id().empty()) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.latest_ttl_stream_channel_buffered_bytes() != 0) {
    _internal_set_latest_ttl_stream_channel_buffered_bytes(from._internal_latest_ttl_stream_channel_buffered_bytes());
  }
  if (from.reliable_stream_channel_buffered_bytes() != 0) {
    _internal_set_reliable_stream_channel_buffered_bytes(from._internal_reliable_stream_channel_buffered_bytes());
  }
  if (from.latest_reliable_stream_channel_buffered_bytes() != 0) {
    _internal_set_latest_reliable_stream_channel_buffered_bytes(from._internal_latest_reliable_stream_channel_buffered_bytes());
  }
  if (from.latest_try_once_stream_channel_buffered_bytes() != 0) {
    _internal_set_latest_try_once_stream_channel_buffered_bytes(from._internal_latest_try_once_stream_channel_buffered_bytes());
  }
}

void BufferMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.BufferMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BufferMetadata::CopyFrom(const BufferMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.BufferMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BufferMetadata::IsInitialized() const {
  return true;
}

void BufferMetadata::InternalSwap(BufferMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &session_id_, GetArenaForAllocation(),
      &other->session_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BufferMetadata, latest_try_once_stream_channel_buffered_bytes_)
      + sizeof(BufferMetadata::latest_try_once_stream_channel_buffered_bytes_)
      - PROTOBUF_FIELD_OFFSET(BufferMetadata, latest_ttl_stream_channel_buffered_bytes_)>(
          reinterpret_cast<char*>(&latest_ttl_stream_channel_buffered_bytes_),
          reinterpret_cast<char*>(&other->latest_ttl_stream_channel_buffered_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BufferMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fhealth_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Health* Arena::CreateMaybeMessage< ::v1::model::Health >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Health >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Battery* Arena::CreateMaybeMessage< ::v1::model::Battery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Battery >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::BufferMetadata* Arena::CreateMaybeMessage< ::v1::model::BufferMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::BufferMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

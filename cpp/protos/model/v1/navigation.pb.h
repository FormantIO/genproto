// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/navigation.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/math.pb.h"
#include "protos/model/v1/media.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fnavigation_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto;
namespace v1 {
namespace model {
class ColorRGBA;
struct ColorRGBADefaultTypeInternal;
extern ColorRGBADefaultTypeInternal _ColorRGBA_default_instance_;
class Goal;
struct GoalDefaultTypeInternal;
extern GoalDefaultTypeInternal _Goal_default_instance_;
class GoalID;
struct GoalIDDefaultTypeInternal;
extern GoalIDDefaultTypeInternal _GoalID_default_instance_;
class JointState;
struct JointStateDefaultTypeInternal;
extern JointStateDefaultTypeInternal _JointState_default_instance_;
class Joy;
struct JoyDefaultTypeInternal;
extern JoyDefaultTypeInternal _Joy_default_instance_;
class Localization;
struct LocalizationDefaultTypeInternal;
extern LocalizationDefaultTypeInternal _Localization_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Map;
struct MapDefaultTypeInternal;
extern MapDefaultTypeInternal _Map_default_instance_;
class Marker3D;
struct Marker3DDefaultTypeInternal;
extern Marker3DDefaultTypeInternal _Marker3D_default_instance_;
class Marker3DArray;
struct Marker3DArrayDefaultTypeInternal;
extern Marker3DArrayDefaultTypeInternal _Marker3DArray_default_instance_;
class OccupancyGrid;
struct OccupancyGridDefaultTypeInternal;
extern OccupancyGridDefaultTypeInternal _OccupancyGrid_default_instance_;
class Odometry;
struct OdometryDefaultTypeInternal;
extern OdometryDefaultTypeInternal _Odometry_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
class PoseWithCovariance;
struct PoseWithCovarianceDefaultTypeInternal;
extern PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::ColorRGBA* Arena::CreateMaybeMessage<::v1::model::ColorRGBA>(Arena*);
template<> ::v1::model::Goal* Arena::CreateMaybeMessage<::v1::model::Goal>(Arena*);
template<> ::v1::model::GoalID* Arena::CreateMaybeMessage<::v1::model::GoalID>(Arena*);
template<> ::v1::model::JointState* Arena::CreateMaybeMessage<::v1::model::JointState>(Arena*);
template<> ::v1::model::Joy* Arena::CreateMaybeMessage<::v1::model::Joy>(Arena*);
template<> ::v1::model::Localization* Arena::CreateMaybeMessage<::v1::model::Localization>(Arena*);
template<> ::v1::model::Location* Arena::CreateMaybeMessage<::v1::model::Location>(Arena*);
template<> ::v1::model::Map* Arena::CreateMaybeMessage<::v1::model::Map>(Arena*);
template<> ::v1::model::Marker3D* Arena::CreateMaybeMessage<::v1::model::Marker3D>(Arena*);
template<> ::v1::model::Marker3DArray* Arena::CreateMaybeMessage<::v1::model::Marker3DArray>(Arena*);
template<> ::v1::model::OccupancyGrid* Arena::CreateMaybeMessage<::v1::model::OccupancyGrid>(Arena*);
template<> ::v1::model::Odometry* Arena::CreateMaybeMessage<::v1::model::Odometry>(Arena*);
template<> ::v1::model::Path* Arena::CreateMaybeMessage<::v1::model::Path>(Arena*);
template<> ::v1::model::PoseWithCovariance* Arena::CreateMaybeMessage<::v1::model::PoseWithCovariance>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return new Location();
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
    kOrientationFieldNumber = 4,
  };
  // double latitude = 1 [json_name = "latitude"];
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2 [json_name = "longitude"];
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // optional double altitude = 3 [json_name = "altitude"];
  bool has_altitude() const;
  private:
  bool _internal_has_altitude() const;
  public:
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // optional double orientation = 4 [json_name = "orientation"];
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  double orientation() const;
  void set_orientation(double value);
  private:
  double _internal_orientation() const;
  void _internal_set_orientation(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  double altitude_;
  double orientation_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Localization final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Localization) */ {
 public:
  inline Localization() : Localization(nullptr) {}
  ~Localization() override;
  explicit constexpr Localization(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Localization(const Localization& from);
  Localization(Localization&& from) noexcept
    : Localization() {
    *this = ::std::move(from);
  }

  inline Localization& operator=(const Localization& from) {
    CopyFrom(from);
    return *this;
  }
  inline Localization& operator=(Localization&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Localization& default_instance() {
    return *internal_default_instance();
  }
  static inline const Localization* internal_default_instance() {
    return reinterpret_cast<const Localization*>(
               &_Localization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Localization& a, Localization& b) {
    a.Swap(&b);
  }
  inline void Swap(Localization* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Localization* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Localization* New() const final {
    return new Localization();
  }

  Localization* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Localization>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Localization& from);
  void MergeFrom(const Localization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Localization* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Localization";
  }
  protected:
  explicit Localization(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudsFieldNumber = 3,
    kOdometryFieldNumber = 1,
    kMapFieldNumber = 2,
    kPathFieldNumber = 4,
    kGoalFieldNumber = 5,
  };
  // repeated .v1.model.PointCloud point_clouds = 3 [json_name = "pointClouds"];
  int point_clouds_size() const;
  private:
  int _internal_point_clouds_size() const;
  public:
  void clear_point_clouds();
  ::v1::model::PointCloud* mutable_point_clouds(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::PointCloud >*
      mutable_point_clouds();
  private:
  const ::v1::model::PointCloud& _internal_point_clouds(int index) const;
  ::v1::model::PointCloud* _internal_add_point_clouds();
  public:
  const ::v1::model::PointCloud& point_clouds(int index) const;
  ::v1::model::PointCloud* add_point_clouds();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::PointCloud >&
      point_clouds() const;

  // .v1.model.Odometry odometry = 1 [json_name = "odometry"];
  bool has_odometry() const;
  private:
  bool _internal_has_odometry() const;
  public:
  void clear_odometry();
  const ::v1::model::Odometry& odometry() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Odometry* release_odometry();
  ::v1::model::Odometry* mutable_odometry();
  void set_allocated_odometry(::v1::model::Odometry* odometry);
  private:
  const ::v1::model::Odometry& _internal_odometry() const;
  ::v1::model::Odometry* _internal_mutable_odometry();
  public:
  void unsafe_arena_set_allocated_odometry(
      ::v1::model::Odometry* odometry);
  ::v1::model::Odometry* unsafe_arena_release_odometry();

  // .v1.model.Map map = 2 [json_name = "map"];
  bool has_map() const;
  private:
  bool _internal_has_map() const;
  public:
  void clear_map();
  const ::v1::model::Map& map() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Map* release_map();
  ::v1::model::Map* mutable_map();
  void set_allocated_map(::v1::model::Map* map);
  private:
  const ::v1::model::Map& _internal_map() const;
  ::v1::model::Map* _internal_mutable_map();
  public:
  void unsafe_arena_set_allocated_map(
      ::v1::model::Map* map);
  ::v1::model::Map* unsafe_arena_release_map();

  // .v1.model.Path path = 4 [json_name = "path"];
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::v1::model::Path& path() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Path* release_path();
  ::v1::model::Path* mutable_path();
  void set_allocated_path(::v1::model::Path* path);
  private:
  const ::v1::model::Path& _internal_path() const;
  ::v1::model::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::v1::model::Path* path);
  ::v1::model::Path* unsafe_arena_release_path();

  // .v1.model.Goal goal = 5 [json_name = "goal"];
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  const ::v1::model::Goal& goal() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Goal* release_goal();
  ::v1::model::Goal* mutable_goal();
  void set_allocated_goal(::v1::model::Goal* goal);
  private:
  const ::v1::model::Goal& _internal_goal() const;
  ::v1::model::Goal* _internal_mutable_goal();
  public:
  void unsafe_arena_set_allocated_goal(
      ::v1::model::Goal* goal);
  ::v1::model::Goal* unsafe_arena_release_goal();

  // @@protoc_insertion_point(class_scope:v1.model.Localization)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::PointCloud > point_clouds_;
  ::v1::model::Odometry* odometry_;
  ::v1::model::Map* map_;
  ::v1::model::Path* path_;
  ::v1::model::Goal* goal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Odometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Odometry) */ {
 public:
  inline Odometry() : Odometry(nullptr) {}
  ~Odometry() override;
  explicit constexpr Odometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Odometry(const Odometry& from);
  Odometry(Odometry&& from) noexcept
    : Odometry() {
    *this = ::std::move(from);
  }

  inline Odometry& operator=(const Odometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odometry& operator=(Odometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Odometry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Odometry* internal_default_instance() {
    return reinterpret_cast<const Odometry*>(
               &_Odometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Odometry& a, Odometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Odometry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odometry* New() const final {
    return new Odometry();
  }

  Odometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odometry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odometry& from);
  void MergeFrom(const Odometry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odometry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Odometry";
  }
  protected:
  explicit Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
    kTwistFieldNumber = 2,
    kWorldToLocalFieldNumber = 3,
  };
  // .v1.model.Transform pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::v1::model::Transform* pose);
  ::v1::model::Transform* unsafe_arena_release_pose();

  // .v1.model.Twist twist = 2 [json_name = "twist"];
  bool has_twist() const;
  private:
  bool _internal_has_twist() const;
  public:
  void clear_twist();
  const ::v1::model::Twist& twist() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Twist* release_twist();
  ::v1::model::Twist* mutable_twist();
  void set_allocated_twist(::v1::model::Twist* twist);
  private:
  const ::v1::model::Twist& _internal_twist() const;
  ::v1::model::Twist* _internal_mutable_twist();
  public:
  void unsafe_arena_set_allocated_twist(
      ::v1::model::Twist* twist);
  ::v1::model::Twist* unsafe_arena_release_twist();

  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // @@protoc_insertion_point(class_scope:v1.model.Odometry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Transform* pose_;
  ::v1::model::Twist* twist_;
  ::v1::model::Transform* world_to_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Map final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Map) */ {
 public:
  inline Map() : Map(nullptr) {}
  ~Map() override;
  explicit constexpr Map(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Map(const Map& from);
  Map(Map&& from) noexcept
    : Map() {
    *this = ::std::move(from);
  }

  inline Map& operator=(const Map& from) {
    CopyFrom(from);
    return *this;
  }
  inline Map& operator=(Map&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Map& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kOccupancyGrid = 6,
    kUrl = 7,
    kRaw = 8,
    DATA_NOT_SET = 0,
  };

  static inline const Map* internal_default_instance() {
    return reinterpret_cast<const Map*>(
               &_Map_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Map& a, Map& b) {
    a.Swap(&b);
  }
  inline void Swap(Map* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Map* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Map* New() const final {
    return new Map();
  }

  Map* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Map>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Map& from);
  void MergeFrom(const Map& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Map* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Map";
  }
  protected:
  explicit Map(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 9,
    kOriginFieldNumber = 4,
    kWorldToLocalFieldNumber = 5,
    kResolutionFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kOccupancyGridFieldNumber = 6,
    kUrlFieldNumber = 7,
    kRawFieldNumber = 8,
  };
  // string uuid = 9 [json_name = "uuid"];
  void clear_uuid();
  const std::string& uuid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uuid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uuid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .v1.model.Transform origin = 4 [json_name = "origin"];
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::v1::model::Transform& origin() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_origin();
  ::v1::model::Transform* mutable_origin();
  void set_allocated_origin(::v1::model::Transform* origin);
  private:
  const ::v1::model::Transform& _internal_origin() const;
  ::v1::model::Transform* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::v1::model::Transform* origin);
  ::v1::model::Transform* unsafe_arena_release_origin();

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // double resolution = 1 [json_name = "resolution"];
  void clear_resolution();
  double resolution() const;
  void set_resolution(double value);
  private:
  double _internal_resolution() const;
  void _internal_set_resolution(double value);
  public:

  // uint32 width = 2 [json_name = "width"];
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 height = 3 [json_name = "height"];
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .v1.model.OccupancyGrid occupancy_grid = 6 [json_name = "occupancyGrid"];
  bool has_occupancy_grid() const;
  private:
  bool _internal_has_occupancy_grid() const;
  public:
  void clear_occupancy_grid();
  const ::v1::model::OccupancyGrid& occupancy_grid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::OccupancyGrid* release_occupancy_grid();
  ::v1::model::OccupancyGrid* mutable_occupancy_grid();
  void set_allocated_occupancy_grid(::v1::model::OccupancyGrid* occupancy_grid);
  private:
  const ::v1::model::OccupancyGrid& _internal_occupancy_grid() const;
  ::v1::model::OccupancyGrid* _internal_mutable_occupancy_grid();
  public:
  void unsafe_arena_set_allocated_occupancy_grid(
      ::v1::model::OccupancyGrid* occupancy_grid);
  ::v1::model::OccupancyGrid* unsafe_arena_release_occupancy_grid();

  // string url = 7 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 8 [json_name = "raw"];
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.Map)
 private:
  class _Internal;
  void set_has_occupancy_grid();
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::v1::model::Transform* origin_;
  ::v1::model::Transform* world_to_local_;
  double resolution_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::v1::model::OccupancyGrid* occupancy_grid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class OccupancyGrid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.OccupancyGrid) */ {
 public:
  inline OccupancyGrid() : OccupancyGrid(nullptr) {}
  ~OccupancyGrid() override;
  explicit constexpr OccupancyGrid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OccupancyGrid(const OccupancyGrid& from);
  OccupancyGrid(OccupancyGrid&& from) noexcept
    : OccupancyGrid() {
    *this = ::std::move(from);
  }

  inline OccupancyGrid& operator=(const OccupancyGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline OccupancyGrid& operator=(OccupancyGrid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OccupancyGrid& default_instance() {
    return *internal_default_instance();
  }
  static inline const OccupancyGrid* internal_default_instance() {
    return reinterpret_cast<const OccupancyGrid*>(
               &_OccupancyGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(OccupancyGrid& a, OccupancyGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(OccupancyGrid* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OccupancyGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OccupancyGrid* New() const final {
    return new OccupancyGrid();
  }

  OccupancyGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OccupancyGrid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OccupancyGrid& from);
  void MergeFrom(const OccupancyGrid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OccupancyGrid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.OccupancyGrid";
  }
  protected:
  explicit OccupancyGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // repeated int32 data = 1 [json_name = "data"];
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_data(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_data() const;
  void _internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_data();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 data(int index) const;
  void set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_data(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      data() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:v1.model.OccupancyGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > data_;
  mutable std::atomic<int> _data_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return new Path();
  }

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 2,
    kWorldToLocalFieldNumber = 1,
  };
  // repeated .v1.model.Transform poses = 2 [json_name = "poses"];
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::v1::model::Transform* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Transform >*
      mutable_poses();
  private:
  const ::v1::model::Transform& _internal_poses(int index) const;
  ::v1::model::Transform* _internal_add_poses();
  public:
  const ::v1::model::Transform& poses(int index) const;
  ::v1::model::Transform* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Transform >&
      poses() const;

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // @@protoc_insertion_point(class_scope:v1.model.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Transform > poses_;
  ::v1::model::Transform* world_to_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class JointState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.JointState) */ {
 public:
  inline JointState() : JointState(nullptr) {}
  ~JointState() override;
  explicit constexpr JointState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointState(const JointState& from);
  JointState(JointState&& from) noexcept
    : JointState() {
    *this = ::std::move(from);
  }

  inline JointState& operator=(const JointState& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointState& operator=(JointState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointState& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointState* internal_default_instance() {
    return reinterpret_cast<const JointState*>(
               &_JointState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JointState& a, JointState& b) {
    a.Swap(&b);
  }
  inline void Swap(JointState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JointState* New() const final {
    return new JointState();
  }

  JointState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JointState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JointState& from);
  void MergeFrom(const JointState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.JointState";
  }
  protected:
  explicit JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kEffortFieldNumber = 4,
    kWorldToLocalFieldNumber = 5,
  };
  // repeated string name = 1 [json_name = "name"];
  int name_size() const;
  private:
  int _internal_name_size() const;
  public:
  void clear_name();
  const std::string& name(int index) const;
  std::string* mutable_name(int index);
  void set_name(int index, const std::string& value);
  void set_name(int index, std::string&& value);
  void set_name(int index, const char* value);
  void set_name(int index, const char* value, size_t size);
  std::string* add_name();
  void add_name(const std::string& value);
  void add_name(std::string&& value);
  void add_name(const char* value);
  void add_name(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& name() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_name();
  private:
  const std::string& _internal_name(int index) const;
  std::string* _internal_add_name();
  public:

  // repeated double position = 2 [json_name = "position"];
  int position_size() const;
  private:
  int _internal_position_size() const;
  public:
  void clear_position();
  private:
  double _internal_position(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_position() const;
  void _internal_add_position(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_position();
  public:
  double position(int index) const;
  void set_position(int index, double value);
  void add_position(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      position() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_position();

  // repeated double velocity = 3 [json_name = "velocity"];
  int velocity_size() const;
  private:
  int _internal_velocity_size() const;
  public:
  void clear_velocity();
  private:
  double _internal_velocity(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_velocity() const;
  void _internal_add_velocity(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_velocity();
  public:
  double velocity(int index) const;
  void set_velocity(int index, double value);
  void add_velocity(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      velocity() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_velocity();

  // repeated double effort = 4 [json_name = "effort"];
  int effort_size() const;
  private:
  int _internal_effort_size() const;
  public:
  void clear_effort();
  private:
  double _internal_effort(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_effort() const;
  void _internal_add_effort(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_effort();
  public:
  double effort(int index) const;
  void set_effort(int index, double value);
  void add_effort(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      effort() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_effort();

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // @@protoc_insertion_point(class_scope:v1.model.JointState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> name_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > position_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > velocity_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > effort_;
  ::v1::model::Transform* world_to_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Goal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Goal) */ {
 public:
  inline Goal() : Goal(nullptr) {}
  ~Goal() override;
  explicit constexpr Goal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Goal(const Goal& from);
  Goal(Goal&& from) noexcept
    : Goal() {
    *this = ::std::move(from);
  }

  inline Goal& operator=(const Goal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Goal& operator=(Goal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Goal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Goal* internal_default_instance() {
    return reinterpret_cast<const Goal*>(
               &_Goal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Goal& a, Goal& b) {
    a.Swap(&b);
  }
  inline void Swap(Goal* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Goal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Goal* New() const final {
    return new Goal();
  }

  Goal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Goal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Goal& from);
  void MergeFrom(const Goal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Goal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Goal";
  }
  protected:
  explicit Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldToLocalFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // .v1.model.Transform pose = 2 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::v1::model::Transform* pose);
  ::v1::model::Transform* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:v1.model.Goal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Transform* world_to_local_;
  ::v1::model::Transform* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class GoalID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.GoalID) */ {
 public:
  inline GoalID() : GoalID(nullptr) {}
  ~GoalID() override;
  explicit constexpr GoalID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GoalID(const GoalID& from);
  GoalID(GoalID&& from) noexcept
    : GoalID() {
    *this = ::std::move(from);
  }

  inline GoalID& operator=(const GoalID& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoalID& operator=(GoalID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GoalID& default_instance() {
    return *internal_default_instance();
  }
  static inline const GoalID* internal_default_instance() {
    return reinterpret_cast<const GoalID*>(
               &_GoalID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GoalID& a, GoalID& b) {
    a.Swap(&b);
  }
  inline void Swap(GoalID* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoalID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoalID* New() const final {
    return new GoalID();
  }

  GoalID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoalID>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoalID& from);
  void MergeFrom(const GoalID& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalID* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.GoalID";
  }
  protected:
  explicit GoalID(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.GoalID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class PoseWithCovariance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.PoseWithCovariance) */ {
 public:
  inline PoseWithCovariance() : PoseWithCovariance(nullptr) {}
  ~PoseWithCovariance() override;
  explicit constexpr PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseWithCovariance(const PoseWithCovariance& from);
  PoseWithCovariance(PoseWithCovariance&& from) noexcept
    : PoseWithCovariance() {
    *this = ::std::move(from);
  }

  inline PoseWithCovariance& operator=(const PoseWithCovariance& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseWithCovariance& operator=(PoseWithCovariance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseWithCovariance& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseWithCovariance* internal_default_instance() {
    return reinterpret_cast<const PoseWithCovariance*>(
               &_PoseWithCovariance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(PoseWithCovariance& a, PoseWithCovariance& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseWithCovariance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseWithCovariance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PoseWithCovariance* New() const final {
    return new PoseWithCovariance();
  }

  PoseWithCovariance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PoseWithCovariance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PoseWithCovariance& from);
  void MergeFrom(const PoseWithCovariance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseWithCovariance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.PoseWithCovariance";
  }
  protected:
  explicit PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCovarianceFieldNumber = 2,
    kPoseFieldNumber = 1,
  };
  // repeated double covariance = 2 [json_name = "covariance"];
  int covariance_size() const;
  private:
  int _internal_covariance_size() const;
  public:
  void clear_covariance();
  private:
  double _internal_covariance(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_covariance() const;
  void _internal_add_covariance(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_covariance();
  public:
  double covariance(int index) const;
  void set_covariance(int index, double value);
  void add_covariance(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      covariance() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_covariance();

  // .v1.model.Transform pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::v1::model::Transform* pose);
  ::v1::model::Transform* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:v1.model.PoseWithCovariance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > covariance_;
  ::v1::model::Transform* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class ColorRGBA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ColorRGBA) */ {
 public:
  inline ColorRGBA() : ColorRGBA(nullptr) {}
  ~ColorRGBA() override;
  explicit constexpr ColorRGBA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorRGBA(const ColorRGBA& from);
  ColorRGBA(ColorRGBA&& from) noexcept
    : ColorRGBA() {
    *this = ::std::move(from);
  }

  inline ColorRGBA& operator=(const ColorRGBA& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorRGBA& operator=(ColorRGBA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ColorRGBA& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorRGBA* internal_default_instance() {
    return reinterpret_cast<const ColorRGBA*>(
               &_ColorRGBA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ColorRGBA& a, ColorRGBA& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorRGBA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorRGBA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorRGBA* New() const final {
    return new ColorRGBA();
  }

  ColorRGBA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorRGBA>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorRGBA& from);
  void MergeFrom(const ColorRGBA& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorRGBA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ColorRGBA";
  }
  protected:
  explicit ColorRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRFieldNumber = 1,
    kGFieldNumber = 2,
    kBFieldNumber = 3,
    kAFieldNumber = 4,
  };
  // float r = 1 [json_name = "r"];
  void clear_r();
  float r() const;
  void set_r(float value);
  private:
  float _internal_r() const;
  void _internal_set_r(float value);
  public:

  // float g = 2 [json_name = "g"];
  void clear_g();
  float g() const;
  void set_g(float value);
  private:
  float _internal_g() const;
  void _internal_set_g(float value);
  public:

  // float b = 3 [json_name = "b"];
  void clear_b();
  float b() const;
  void set_b(float value);
  private:
  float _internal_b() const;
  void _internal_set_b(float value);
  public:

  // float a = 4 [json_name = "a"];
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ColorRGBA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float r_;
  float g_;
  float b_;
  float a_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Marker3D final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Marker3D) */ {
 public:
  inline Marker3D() : Marker3D(nullptr) {}
  ~Marker3D() override;
  explicit constexpr Marker3D(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker3D(const Marker3D& from);
  Marker3D(Marker3D&& from) noexcept
    : Marker3D() {
    *this = ::std::move(from);
  }

  inline Marker3D& operator=(const Marker3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker3D& operator=(Marker3D&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker3D& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker3D* internal_default_instance() {
    return reinterpret_cast<const Marker3D*>(
               &_Marker3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Marker3D& a, Marker3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker3D* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Marker3D* New() const final {
    return new Marker3D();
  }

  Marker3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Marker3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Marker3D& from);
  void MergeFrom(const Marker3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Marker3D";
  }
  protected:
  explicit Marker3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 11,
    kColorsFieldNumber = 12,
    kNsFieldNumber = 2,
    kTypeFieldNumber = 4,
    kActionFieldNumber = 5,
    kTextFieldNumber = 13,
    kMeshResourceFieldNumber = 14,
    kFrameIdFieldNumber = 16,
    kWorldToLocalFieldNumber = 1,
    kPoseFieldNumber = 6,
    kScaleFieldNumber = 7,
    kColorFieldNumber = 8,
    kLifetimeFieldNumber = 9,
    kIdFieldNumber = 3,
    kFrameLockedFieldNumber = 10,
    kMeshUseEmbeddedMaterialsFieldNumber = 15,
  };
  // repeated .v1.model.Vector3 points = 11 [json_name = "points"];
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::v1::model::Vector3* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Vector3 >*
      mutable_points();
  private:
  const ::v1::model::Vector3& _internal_points(int index) const;
  ::v1::model::Vector3* _internal_add_points();
  public:
  const ::v1::model::Vector3& points(int index) const;
  ::v1::model::Vector3* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Vector3 >&
      points() const;

  // repeated .v1.model.ColorRGBA colors = 12 [json_name = "colors"];
  int colors_size() const;
  private:
  int _internal_colors_size() const;
  public:
  void clear_colors();
  ::v1::model::ColorRGBA* mutable_colors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ColorRGBA >*
      mutable_colors();
  private:
  const ::v1::model::ColorRGBA& _internal_colors(int index) const;
  ::v1::model::ColorRGBA* _internal_add_colors();
  public:
  const ::v1::model::ColorRGBA& colors(int index) const;
  ::v1::model::ColorRGBA* add_colors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ColorRGBA >&
      colors() const;

  // string ns = 2 [json_name = "ns"];
  void clear_ns();
  const std::string& ns() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ns(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ns();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ns();
  void set_allocated_ns(std::string* ns);
  private:
  const std::string& _internal_ns() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ns(const std::string& value);
  std::string* _internal_mutable_ns();
  public:

  // string type = 4 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string action = 5 [json_name = "action"];
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string text = 13 [json_name = "text"];
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string mesh_resource = 14 [json_name = "meshResource"];
  void clear_mesh_resource();
  const std::string& mesh_resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mesh_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mesh_resource();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mesh_resource();
  void set_allocated_mesh_resource(std::string* mesh_resource);
  private:
  const std::string& _internal_mesh_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mesh_resource(const std::string& value);
  std::string* _internal_mutable_mesh_resource();
  public:

  // string frame_id = 16 [json_name = "frameId"];
  void clear_frame_id();
  const std::string& frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_frame_id();
  void set_allocated_frame_id(std::string* frame_id);
  private:
  const std::string& _internal_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_id(const std::string& value);
  std::string* _internal_mutable_frame_id();
  public:

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // .v1.model.Transform pose = 6 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::v1::model::Transform& pose() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Transform* release_pose();
  ::v1::model::Transform* mutable_pose();
  void set_allocated_pose(::v1::model::Transform* pose);
  private:
  const ::v1::model::Transform& _internal_pose() const;
  ::v1::model::Transform* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::v1::model::Transform* pose);
  ::v1::model::Transform* unsafe_arena_release_pose();

  // .v1.model.Vector3 scale = 7 [json_name = "scale"];
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::v1::model::Vector3& scale() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Vector3* release_scale();
  ::v1::model::Vector3* mutable_scale();
  void set_allocated_scale(::v1::model::Vector3* scale);
  private:
  const ::v1::model::Vector3& _internal_scale() const;
  ::v1::model::Vector3* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::v1::model::Vector3* scale);
  ::v1::model::Vector3* unsafe_arena_release_scale();

  // .v1.model.ColorRGBA color = 8 [json_name = "color"];
  bool has_color() const;
  private:
  bool _internal_has_color() const;
  public:
  void clear_color();
  const ::v1::model::ColorRGBA& color() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::ColorRGBA* release_color();
  ::v1::model::ColorRGBA* mutable_color();
  void set_allocated_color(::v1::model::ColorRGBA* color);
  private:
  const ::v1::model::ColorRGBA& _internal_color() const;
  ::v1::model::ColorRGBA* _internal_mutable_color();
  public:
  void unsafe_arena_set_allocated_color(
      ::v1::model::ColorRGBA* color);
  ::v1::model::ColorRGBA* unsafe_arena_release_color();

  // double lifetime = 9 [json_name = "lifetime"];
  void clear_lifetime();
  double lifetime() const;
  void set_lifetime(double value);
  private:
  double _internal_lifetime() const;
  void _internal_set_lifetime(double value);
  public:

  // int32 id = 3 [json_name = "id"];
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool frame_locked = 10 [json_name = "frameLocked"];
  void clear_frame_locked();
  bool frame_locked() const;
  void set_frame_locked(bool value);
  private:
  bool _internal_frame_locked() const;
  void _internal_set_frame_locked(bool value);
  public:

  // bool mesh_use_embedded_materials = 15 [json_name = "meshUseEmbeddedMaterials"];
  void clear_mesh_use_embedded_materials();
  bool mesh_use_embedded_materials() const;
  void set_mesh_use_embedded_materials(bool value);
  private:
  bool _internal_mesh_use_embedded_materials() const;
  void _internal_set_mesh_use_embedded_materials(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Marker3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Vector3 > points_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ColorRGBA > colors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ns_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mesh_resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_id_;
  ::v1::model::Transform* world_to_local_;
  ::v1::model::Transform* pose_;
  ::v1::model::Vector3* scale_;
  ::v1::model::ColorRGBA* color_;
  double lifetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  bool frame_locked_;
  bool mesh_use_embedded_materials_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Marker3DArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Marker3DArray) */ {
 public:
  inline Marker3DArray() : Marker3DArray(nullptr) {}
  ~Marker3DArray() override;
  explicit constexpr Marker3DArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Marker3DArray(const Marker3DArray& from);
  Marker3DArray(Marker3DArray&& from) noexcept
    : Marker3DArray() {
    *this = ::std::move(from);
  }

  inline Marker3DArray& operator=(const Marker3DArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline Marker3DArray& operator=(Marker3DArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Marker3DArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const Marker3DArray* internal_default_instance() {
    return reinterpret_cast<const Marker3DArray*>(
               &_Marker3DArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Marker3DArray& a, Marker3DArray& b) {
    a.Swap(&b);
  }
  inline void Swap(Marker3DArray* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Marker3DArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Marker3DArray* New() const final {
    return new Marker3DArray();
  }

  Marker3DArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Marker3DArray>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Marker3DArray& from);
  void MergeFrom(const Marker3DArray& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Marker3DArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Marker3DArray";
  }
  protected:
  explicit Marker3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMarkersFieldNumber = 1,
  };
  // repeated .v1.model.Marker3D markers = 1 [json_name = "markers"];
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  ::v1::model::Marker3D* mutable_markers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Marker3D >*
      mutable_markers();
  private:
  const ::v1::model::Marker3D& _internal_markers(int index) const;
  ::v1::model::Marker3D* _internal_add_markers();
  public:
  const ::v1::model::Marker3D& markers(int index) const;
  ::v1::model::Marker3D* add_markers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Marker3D >&
      markers() const;

  // @@protoc_insertion_point(class_scope:v1.model.Marker3DArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Marker3D > markers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// -------------------------------------------------------------------

class Joy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Joy) */ {
 public:
  inline Joy() : Joy(nullptr) {}
  ~Joy() override;
  explicit constexpr Joy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Joy(const Joy& from);
  Joy(Joy&& from) noexcept
    : Joy() {
    *this = ::std::move(from);
  }

  inline Joy& operator=(const Joy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Joy& operator=(Joy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Joy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Joy* internal_default_instance() {
    return reinterpret_cast<const Joy*>(
               &_Joy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Joy& a, Joy& b) {
    a.Swap(&b);
  }
  inline void Swap(Joy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Joy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Joy* New() const final {
    return new Joy();
  }

  Joy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Joy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Joy& from);
  void MergeFrom(const Joy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Joy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Joy";
  }
  protected:
  explicit Joy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAxesFieldNumber = 1,
    kButtonsFieldNumber = 2,
  };
  // repeated float axes = 1 [json_name = "axes"];
  int axes_size() const;
  private:
  int _internal_axes_size() const;
  public:
  void clear_axes();
  private:
  float _internal_axes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_axes() const;
  void _internal_add_axes(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_axes();
  public:
  float axes(int index) const;
  void set_axes(int index, float value);
  void add_axes(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      axes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_axes();

  // repeated int32 buttons = 2 [json_name = "buttons"];
  int buttons_size() const;
  private:
  int _internal_buttons_size() const;
  public:
  void clear_buttons();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_buttons(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_buttons() const;
  void _internal_add_buttons(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_buttons();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 buttons(int index) const;
  void set_buttons(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_buttons(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      buttons() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_buttons();

  // @@protoc_insertion_point(class_scope:v1.model.Joy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > axes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > buttons_;
  mutable std::atomic<int> _buttons_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// double latitude = 1 [json_name = "latitude"];
inline void Location::clear_latitude() {
  latitude_ = 0;
}
inline double Location::_internal_latitude() const {
  return latitude_;
}
inline double Location::latitude() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.latitude)
  return _internal_latitude();
}
inline void Location::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void Location::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.latitude)
}

// double longitude = 2 [json_name = "longitude"];
inline void Location::clear_longitude() {
  longitude_ = 0;
}
inline double Location::_internal_longitude() const {
  return longitude_;
}
inline double Location::longitude() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.longitude)
  return _internal_longitude();
}
inline void Location::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void Location::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.longitude)
}

// optional double altitude = 3 [json_name = "altitude"];
inline bool Location::_internal_has_altitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Location::has_altitude() const {
  return _internal_has_altitude();
}
inline void Location::clear_altitude() {
  altitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double Location::_internal_altitude() const {
  return altitude_;
}
inline double Location::altitude() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.altitude)
  return _internal_altitude();
}
inline void Location::_internal_set_altitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  altitude_ = value;
}
inline void Location::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.altitude)
}

// optional double orientation = 4 [json_name = "orientation"];
inline bool Location::_internal_has_orientation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool Location::has_orientation() const {
  return _internal_has_orientation();
}
inline void Location::clear_orientation() {
  orientation_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double Location::_internal_orientation() const {
  return orientation_;
}
inline double Location::orientation() const {
  // @@protoc_insertion_point(field_get:v1.model.Location.orientation)
  return _internal_orientation();
}
inline void Location::_internal_set_orientation(double value) {
  _has_bits_[0] |= 0x00000002u;
  orientation_ = value;
}
inline void Location::set_orientation(double value) {
  _internal_set_orientation(value);
  // @@protoc_insertion_point(field_set:v1.model.Location.orientation)
}

// -------------------------------------------------------------------

// Localization

// .v1.model.Odometry odometry = 1 [json_name = "odometry"];
inline bool Localization::_internal_has_odometry() const {
  return this != internal_default_instance() && odometry_ != nullptr;
}
inline bool Localization::has_odometry() const {
  return _internal_has_odometry();
}
inline void Localization::clear_odometry() {
  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
}
inline const ::v1::model::Odometry& Localization::_internal_odometry() const {
  const ::v1::model::Odometry* p = odometry_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Odometry&>(
      ::v1::model::_Odometry_default_instance_);
}
inline const ::v1::model::Odometry& Localization::odometry() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.odometry)
  return _internal_odometry();
}
inline void Localization::unsafe_arena_set_allocated_odometry(
    ::v1::model::Odometry* odometry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry_);
  }
  odometry_ = odometry;
  if (odometry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Localization.odometry)
}
inline ::v1::model::Odometry* Localization::release_odometry() {
  
  ::v1::model::Odometry* temp = odometry_;
  odometry_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Odometry* Localization::unsafe_arena_release_odometry() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.odometry)
  
  ::v1::model::Odometry* temp = odometry_;
  odometry_ = nullptr;
  return temp;
}
inline ::v1::model::Odometry* Localization::_internal_mutable_odometry() {
  
  if (odometry_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Odometry>(GetArenaForAllocation());
    odometry_ = p;
  }
  return odometry_;
}
inline ::v1::model::Odometry* Localization::mutable_odometry() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.odometry)
  return _internal_mutable_odometry();
}
inline void Localization::set_allocated_odometry(::v1::model::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete odometry_;
  }
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Odometry>::GetOwningArena(odometry);
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    
  } else {
    
  }
  odometry_ = odometry;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.odometry)
}

// .v1.model.Map map = 2 [json_name = "map"];
inline bool Localization::_internal_has_map() const {
  return this != internal_default_instance() && map_ != nullptr;
}
inline bool Localization::has_map() const {
  return _internal_has_map();
}
inline void Localization::clear_map() {
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
}
inline const ::v1::model::Map& Localization::_internal_map() const {
  const ::v1::model::Map* p = map_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Map&>(
      ::v1::model::_Map_default_instance_);
}
inline const ::v1::model::Map& Localization::map() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.map)
  return _internal_map();
}
inline void Localization::unsafe_arena_set_allocated_map(
    ::v1::model::Map* map) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(map_);
  }
  map_ = map;
  if (map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Localization.map)
}
inline ::v1::model::Map* Localization::release_map() {
  
  ::v1::model::Map* temp = map_;
  map_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Map* Localization::unsafe_arena_release_map() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.map)
  
  ::v1::model::Map* temp = map_;
  map_ = nullptr;
  return temp;
}
inline ::v1::model::Map* Localization::_internal_mutable_map() {
  
  if (map_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Map>(GetArenaForAllocation());
    map_ = p;
  }
  return map_;
}
inline ::v1::model::Map* Localization::mutable_map() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.map)
  return _internal_mutable_map();
}
inline void Localization::set_allocated_map(::v1::model::Map* map) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete map_;
  }
  if (map) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Map>::GetOwningArena(map);
    if (message_arena != submessage_arena) {
      map = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map, submessage_arena);
    }
    
  } else {
    
  }
  map_ = map;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.map)
}

// repeated .v1.model.PointCloud point_clouds = 3 [json_name = "pointClouds"];
inline int Localization::_internal_point_clouds_size() const {
  return point_clouds_.size();
}
inline int Localization::point_clouds_size() const {
  return _internal_point_clouds_size();
}
inline ::v1::model::PointCloud* Localization::mutable_point_clouds(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.point_clouds)
  return point_clouds_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::PointCloud >*
Localization::mutable_point_clouds() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Localization.point_clouds)
  return &point_clouds_;
}
inline const ::v1::model::PointCloud& Localization::_internal_point_clouds(int index) const {
  return point_clouds_.Get(index);
}
inline const ::v1::model::PointCloud& Localization::point_clouds(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.point_clouds)
  return _internal_point_clouds(index);
}
inline ::v1::model::PointCloud* Localization::_internal_add_point_clouds() {
  return point_clouds_.Add();
}
inline ::v1::model::PointCloud* Localization::add_point_clouds() {
  // @@protoc_insertion_point(field_add:v1.model.Localization.point_clouds)
  return _internal_add_point_clouds();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::PointCloud >&
Localization::point_clouds() const {
  // @@protoc_insertion_point(field_list:v1.model.Localization.point_clouds)
  return point_clouds_;
}

// .v1.model.Path path = 4 [json_name = "path"];
inline bool Localization::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool Localization::has_path() const {
  return _internal_has_path();
}
inline void Localization::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::v1::model::Path& Localization::_internal_path() const {
  const ::v1::model::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Path&>(
      ::v1::model::_Path_default_instance_);
}
inline const ::v1::model::Path& Localization::path() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.path)
  return _internal_path();
}
inline void Localization::unsafe_arena_set_allocated_path(
    ::v1::model::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Localization.path)
}
inline ::v1::model::Path* Localization::release_path() {
  
  ::v1::model::Path* temp = path_;
  path_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Path* Localization::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.path)
  
  ::v1::model::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::v1::model::Path* Localization::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::v1::model::Path* Localization::mutable_path() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.path)
  return _internal_mutable_path();
}
inline void Localization::set_allocated_path(::v1::model::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.path)
}

// .v1.model.Goal goal = 5 [json_name = "goal"];
inline bool Localization::_internal_has_goal() const {
  return this != internal_default_instance() && goal_ != nullptr;
}
inline bool Localization::has_goal() const {
  return _internal_has_goal();
}
inline void Localization::clear_goal() {
  if (GetArenaForAllocation() == nullptr && goal_ != nullptr) {
    delete goal_;
  }
  goal_ = nullptr;
}
inline const ::v1::model::Goal& Localization::_internal_goal() const {
  const ::v1::model::Goal* p = goal_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Goal&>(
      ::v1::model::_Goal_default_instance_);
}
inline const ::v1::model::Goal& Localization::goal() const {
  // @@protoc_insertion_point(field_get:v1.model.Localization.goal)
  return _internal_goal();
}
inline void Localization::unsafe_arena_set_allocated_goal(
    ::v1::model::Goal* goal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goal_);
  }
  goal_ = goal;
  if (goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Localization.goal)
}
inline ::v1::model::Goal* Localization::release_goal() {
  
  ::v1::model::Goal* temp = goal_;
  goal_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Goal* Localization::unsafe_arena_release_goal() {
  // @@protoc_insertion_point(field_release:v1.model.Localization.goal)
  
  ::v1::model::Goal* temp = goal_;
  goal_ = nullptr;
  return temp;
}
inline ::v1::model::Goal* Localization::_internal_mutable_goal() {
  
  if (goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Goal>(GetArenaForAllocation());
    goal_ = p;
  }
  return goal_;
}
inline ::v1::model::Goal* Localization::mutable_goal() {
  // @@protoc_insertion_point(field_mutable:v1.model.Localization.goal)
  return _internal_mutable_goal();
}
inline void Localization::set_allocated_goal(::v1::model::Goal* goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete goal_;
  }
  if (goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Goal>::GetOwningArena(goal);
    if (message_arena != submessage_arena) {
      goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    
  } else {
    
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Localization.goal)
}

// -------------------------------------------------------------------

// Odometry

// .v1.model.Transform pose = 1 [json_name = "pose"];
inline bool Odometry::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Odometry::has_pose() const {
  return _internal_has_pose();
}
inline const ::v1::model::Transform& Odometry::_internal_pose() const {
  const ::v1::model::Transform* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Odometry::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.pose)
  return _internal_pose();
}
inline void Odometry::unsafe_arena_set_allocated_pose(
    ::v1::model::Transform* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Odometry.pose)
}
inline ::v1::model::Transform* Odometry::release_pose() {
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Odometry::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.pose)
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Odometry::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::v1::model::Transform* Odometry::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.pose)
  return _internal_mutable_pose();
}
inline void Odometry::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.pose)
}

// .v1.model.Twist twist = 2 [json_name = "twist"];
inline bool Odometry::_internal_has_twist() const {
  return this != internal_default_instance() && twist_ != nullptr;
}
inline bool Odometry::has_twist() const {
  return _internal_has_twist();
}
inline const ::v1::model::Twist& Odometry::_internal_twist() const {
  const ::v1::model::Twist* p = twist_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Twist&>(
      ::v1::model::_Twist_default_instance_);
}
inline const ::v1::model::Twist& Odometry::twist() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.twist)
  return _internal_twist();
}
inline void Odometry::unsafe_arena_set_allocated_twist(
    ::v1::model::Twist* twist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  twist_ = twist;
  if (twist) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Odometry.twist)
}
inline ::v1::model::Twist* Odometry::release_twist() {
  
  ::v1::model::Twist* temp = twist_;
  twist_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Twist* Odometry::unsafe_arena_release_twist() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.twist)
  
  ::v1::model::Twist* temp = twist_;
  twist_ = nullptr;
  return temp;
}
inline ::v1::model::Twist* Odometry::_internal_mutable_twist() {
  
  if (twist_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Twist>(GetArenaForAllocation());
    twist_ = p;
  }
  return twist_;
}
inline ::v1::model::Twist* Odometry::mutable_twist() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.twist)
  return _internal_mutable_twist();
}
inline void Odometry::set_allocated_twist(::v1::model::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist_);
  }
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    
  } else {
    
  }
  twist_ = twist;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.twist)
}

// .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
inline bool Odometry::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Odometry::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Odometry::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Odometry::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Odometry.world_to_local)
  return _internal_world_to_local();
}
inline void Odometry::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Odometry.world_to_local)
}
inline ::v1::model::Transform* Odometry::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Odometry::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Odometry.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Odometry::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Odometry::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Odometry.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Odometry::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Odometry.world_to_local)
}

// -------------------------------------------------------------------

// Map

// string uuid = 9 [json_name = "uuid"];
inline void Map::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& Map::uuid() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.uuid)
  return _internal_uuid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Map::set_uuid(ArgT0&& arg0, ArgT... args) {
 
 uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Map.uuid)
}
inline std::string* Map::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Map::_internal_uuid() const {
  return uuid_.Get();
}
inline void Map::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Map::release_uuid() {
  // @@protoc_insertion_point(field_release:v1.model.Map.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Map::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.uuid)
}

// double resolution = 1 [json_name = "resolution"];
inline void Map::clear_resolution() {
  resolution_ = 0;
}
inline double Map::_internal_resolution() const {
  return resolution_;
}
inline double Map::resolution() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.resolution)
  return _internal_resolution();
}
inline void Map::_internal_set_resolution(double value) {
  
  resolution_ = value;
}
inline void Map::set_resolution(double value) {
  _internal_set_resolution(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.resolution)
}

// uint32 width = 2 [json_name = "width"];
inline void Map::clear_width() {
  width_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::width() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.width)
  return _internal_width();
}
inline void Map::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  width_ = value;
}
inline void Map::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.width)
}

// uint32 height = 3 [json_name = "height"];
inline void Map::clear_height() {
  height_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Map::height() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.height)
  return _internal_height();
}
inline void Map::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  height_ = value;
}
inline void Map::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:v1.model.Map.height)
}

// .v1.model.Transform origin = 4 [json_name = "origin"];
inline bool Map::_internal_has_origin() const {
  return this != internal_default_instance() && origin_ != nullptr;
}
inline bool Map::has_origin() const {
  return _internal_has_origin();
}
inline const ::v1::model::Transform& Map::_internal_origin() const {
  const ::v1::model::Transform* p = origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Map::origin() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.origin)
  return _internal_origin();
}
inline void Map::unsafe_arena_set_allocated_origin(
    ::v1::model::Transform* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  origin_ = origin;
  if (origin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Map.origin)
}
inline ::v1::model::Transform* Map::release_origin() {
  
  ::v1::model::Transform* temp = origin_;
  origin_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Map::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:v1.model.Map.origin)
  
  ::v1::model::Transform* temp = origin_;
  origin_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Map::_internal_mutable_origin() {
  
  if (origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    origin_ = p;
  }
  return origin_;
}
inline ::v1::model::Transform* Map::mutable_origin() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.origin)
  return _internal_mutable_origin();
}
inline void Map::set_allocated_origin(::v1::model::Transform* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    
  } else {
    
  }
  origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.origin)
}

// .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
inline bool Map::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Map::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Map::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Map::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.world_to_local)
  return _internal_world_to_local();
}
inline void Map::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Map.world_to_local)
}
inline ::v1::model::Transform* Map::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Map::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Map.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Map::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Map::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Map::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.world_to_local)
}

// .v1.model.OccupancyGrid occupancy_grid = 6 [json_name = "occupancyGrid"];
inline bool Map::_internal_has_occupancy_grid() const {
  return data_case() == kOccupancyGrid;
}
inline bool Map::has_occupancy_grid() const {
  return _internal_has_occupancy_grid();
}
inline void Map::set_has_occupancy_grid() {
  _oneof_case_[0] = kOccupancyGrid;
}
inline void Map::clear_occupancy_grid() {
  if (_internal_has_occupancy_grid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.occupancy_grid_;
    }
    clear_has_data();
  }
}
inline ::v1::model::OccupancyGrid* Map::release_occupancy_grid() {
  // @@protoc_insertion_point(field_release:v1.model.Map.occupancy_grid)
  if (_internal_has_occupancy_grid()) {
    clear_has_data();
      ::v1::model::OccupancyGrid* temp = data_.occupancy_grid_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.occupancy_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::OccupancyGrid& Map::_internal_occupancy_grid() const {
  return _internal_has_occupancy_grid()
      ? *data_.occupancy_grid_
      : reinterpret_cast< ::v1::model::OccupancyGrid&>(::v1::model::_OccupancyGrid_default_instance_);
}
inline const ::v1::model::OccupancyGrid& Map::occupancy_grid() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.occupancy_grid)
  return _internal_occupancy_grid();
}
inline ::v1::model::OccupancyGrid* Map::unsafe_arena_release_occupancy_grid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.Map.occupancy_grid)
  if (_internal_has_occupancy_grid()) {
    clear_has_data();
    ::v1::model::OccupancyGrid* temp = data_.occupancy_grid_;
    data_.occupancy_grid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Map::unsafe_arena_set_allocated_occupancy_grid(::v1::model::OccupancyGrid* occupancy_grid) {
  clear_data();
  if (occupancy_grid) {
    set_has_occupancy_grid();
    data_.occupancy_grid_ = occupancy_grid;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Map.occupancy_grid)
}
inline ::v1::model::OccupancyGrid* Map::_internal_mutable_occupancy_grid() {
  if (!_internal_has_occupancy_grid()) {
    clear_data();
    set_has_occupancy_grid();
    data_.occupancy_grid_ = CreateMaybeMessage< ::v1::model::OccupancyGrid >(GetArenaForAllocation());
  }
  return data_.occupancy_grid_;
}
inline ::v1::model::OccupancyGrid* Map::mutable_occupancy_grid() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.occupancy_grid)
  return _internal_mutable_occupancy_grid();
}

// string url = 7 [json_name = "url"];
inline bool Map::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool Map::has_url() const {
  return _internal_has_url();
}
inline void Map::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Map::clear_url() {
  if (_internal_has_url()) {
    data_.url_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Map::url() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void Map::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Map.url)
}
inline std::string* Map::mutable_url() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.url)
  return _internal_mutable_url();
}
inline const std::string& Map::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Map::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.url_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Map::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.Map.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Map::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.UnsafeSetDefault(url);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(url);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.url)
}

// bytes raw = 8 [json_name = "raw"];
inline bool Map::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool Map::has_raw() const {
  return _internal_has_raw();
}
inline void Map::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Map::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_data();
  }
}
inline const std::string& Map::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.Map.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void Map::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Map.raw)
}
inline std::string* Map::mutable_raw() {
  // @@protoc_insertion_point(field_mutable:v1.model.Map.raw)
  return _internal_mutable_raw();
}
inline const std::string& Map::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Map::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  data_.raw_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Map::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return data_.raw_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Map::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.Map.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void Map::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.UnsafeSetDefault(raw);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(raw);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.raw)
}

inline bool Map::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Map::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Map::DataCase Map::data_case() const {
  return Map::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OccupancyGrid

// repeated int32 data = 1 [json_name = "data"];
inline int OccupancyGrid::_internal_data_size() const {
  return data_.size();
}
inline int OccupancyGrid::data_size() const {
  return _internal_data_size();
}
inline void OccupancyGrid::clear_data() {
  data_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::_internal_data(int index) const {
  return data_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 OccupancyGrid::data(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.OccupancyGrid.data)
  return _internal_data(index);
}
inline void OccupancyGrid::set_data(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.OccupancyGrid.data)
}
inline void OccupancyGrid::_internal_add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  data_.Add(value);
}
inline void OccupancyGrid::add_data(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_data(value);
  // @@protoc_insertion_point(field_add:v1.model.OccupancyGrid.data)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::_internal_data() const {
  return data_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
OccupancyGrid::data() const {
  // @@protoc_insertion_point(field_list:v1.model.OccupancyGrid.data)
  return _internal_data();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::_internal_mutable_data() {
  return &data_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
OccupancyGrid::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.OccupancyGrid.data)
  return _internal_mutable_data();
}

// -------------------------------------------------------------------

// Path

// .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
inline bool Path::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Path::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Path::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Path::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Path.world_to_local)
  return _internal_world_to_local();
}
inline void Path::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Path.world_to_local)
}
inline ::v1::model::Transform* Path::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Path::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Path.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Path::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Path::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Path.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Path::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Path.world_to_local)
}

// repeated .v1.model.Transform poses = 2 [json_name = "poses"];
inline int Path::_internal_poses_size() const {
  return poses_.size();
}
inline int Path::poses_size() const {
  return _internal_poses_size();
}
inline ::v1::model::Transform* Path::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Path.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Transform >*
Path::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Path.poses)
  return &poses_;
}
inline const ::v1::model::Transform& Path::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::v1::model::Transform& Path::poses(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Path.poses)
  return _internal_poses(index);
}
inline ::v1::model::Transform* Path::_internal_add_poses() {
  return poses_.Add();
}
inline ::v1::model::Transform* Path::add_poses() {
  // @@protoc_insertion_point(field_add:v1.model.Path.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Transform >&
Path::poses() const {
  // @@protoc_insertion_point(field_list:v1.model.Path.poses)
  return poses_;
}

// -------------------------------------------------------------------

// JointState

// .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
inline bool JointState::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool JointState::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& JointState::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& JointState::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.JointState.world_to_local)
  return _internal_world_to_local();
}
inline void JointState::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.JointState.world_to_local)
}
inline ::v1::model::Transform* JointState::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* JointState::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.JointState.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* JointState::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* JointState::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.JointState.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void JointState::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.JointState.world_to_local)
}

// repeated string name = 1 [json_name = "name"];
inline int JointState::_internal_name_size() const {
  return name_.size();
}
inline int JointState::name_size() const {
  return _internal_name_size();
}
inline void JointState::clear_name() {
  name_.Clear();
}
inline std::string* JointState::add_name() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.JointState.name)
  return _internal_add_name();
}
inline const std::string& JointState::_internal_name(int index) const {
  return name_.Get(index);
}
inline const std::string& JointState::name(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.JointState.name)
  return _internal_name(index);
}
inline std::string* JointState::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.JointState.name)
  return name_.Mutable(index);
}
inline void JointState::set_name(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.JointState.name)
  name_.Mutable(index)->assign(value);
}
inline void JointState::set_name(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.JointState.name)
  name_.Mutable(index)->assign(std::move(value));
}
inline void JointState::set_name(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.JointState.name)
}
inline void JointState::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.JointState.name)
}
inline std::string* JointState::_internal_add_name() {
  return name_.Add();
}
inline void JointState::add_name(const std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.JointState.name)
}
inline void JointState::add_name(std::string&& value) {
  name_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.JointState.name)
}
inline void JointState::add_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.JointState.name)
}
inline void JointState::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.JointState.name)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
JointState::name() const {
  // @@protoc_insertion_point(field_list:v1.model.JointState.name)
  return name_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
JointState::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.JointState.name)
  return &name_;
}

// repeated double position = 2 [json_name = "position"];
inline int JointState::_internal_position_size() const {
  return position_.size();
}
inline int JointState::position_size() const {
  return _internal_position_size();
}
inline void JointState::clear_position() {
  position_.Clear();
}
inline double JointState::_internal_position(int index) const {
  return position_.Get(index);
}
inline double JointState::position(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.JointState.position)
  return _internal_position(index);
}
inline void JointState::set_position(int index, double value) {
  position_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.JointState.position)
}
inline void JointState::_internal_add_position(double value) {
  position_.Add(value);
}
inline void JointState::add_position(double value) {
  _internal_add_position(value);
  // @@protoc_insertion_point(field_add:v1.model.JointState.position)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_position() const {
  return position_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::position() const {
  // @@protoc_insertion_point(field_list:v1.model.JointState.position)
  return _internal_position();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_position() {
  return &position_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_position() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.JointState.position)
  return _internal_mutable_position();
}

// repeated double velocity = 3 [json_name = "velocity"];
inline int JointState::_internal_velocity_size() const {
  return velocity_.size();
}
inline int JointState::velocity_size() const {
  return _internal_velocity_size();
}
inline void JointState::clear_velocity() {
  velocity_.Clear();
}
inline double JointState::_internal_velocity(int index) const {
  return velocity_.Get(index);
}
inline double JointState::velocity(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.JointState.velocity)
  return _internal_velocity(index);
}
inline void JointState::set_velocity(int index, double value) {
  velocity_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.JointState.velocity)
}
inline void JointState::_internal_add_velocity(double value) {
  velocity_.Add(value);
}
inline void JointState::add_velocity(double value) {
  _internal_add_velocity(value);
  // @@protoc_insertion_point(field_add:v1.model.JointState.velocity)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_velocity() const {
  return velocity_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::velocity() const {
  // @@protoc_insertion_point(field_list:v1.model.JointState.velocity)
  return _internal_velocity();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_velocity() {
  return &velocity_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.JointState.velocity)
  return _internal_mutable_velocity();
}

// repeated double effort = 4 [json_name = "effort"];
inline int JointState::_internal_effort_size() const {
  return effort_.size();
}
inline int JointState::effort_size() const {
  return _internal_effort_size();
}
inline void JointState::clear_effort() {
  effort_.Clear();
}
inline double JointState::_internal_effort(int index) const {
  return effort_.Get(index);
}
inline double JointState::effort(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.JointState.effort)
  return _internal_effort(index);
}
inline void JointState::set_effort(int index, double value) {
  effort_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.JointState.effort)
}
inline void JointState::_internal_add_effort(double value) {
  effort_.Add(value);
}
inline void JointState::add_effort(double value) {
  _internal_add_effort(value);
  // @@protoc_insertion_point(field_add:v1.model.JointState.effort)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::_internal_effort() const {
  return effort_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointState::effort() const {
  // @@protoc_insertion_point(field_list:v1.model.JointState.effort)
  return _internal_effort();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::_internal_mutable_effort() {
  return &effort_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointState::mutable_effort() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.JointState.effort)
  return _internal_mutable_effort();
}

// -------------------------------------------------------------------

// Goal

// .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
inline bool Goal::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Goal::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Goal::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Goal::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Goal.world_to_local)
  return _internal_world_to_local();
}
inline void Goal::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Goal.world_to_local)
}
inline ::v1::model::Transform* Goal::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Goal::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Goal.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Goal::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Goal::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Goal.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Goal::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Goal.world_to_local)
}

// .v1.model.Transform pose = 2 [json_name = "pose"];
inline bool Goal::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Goal::has_pose() const {
  return _internal_has_pose();
}
inline const ::v1::model::Transform& Goal::_internal_pose() const {
  const ::v1::model::Transform* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Goal::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.Goal.pose)
  return _internal_pose();
}
inline void Goal::unsafe_arena_set_allocated_pose(
    ::v1::model::Transform* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Goal.pose)
}
inline ::v1::model::Transform* Goal::release_pose() {
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Goal::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.Goal.pose)
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Goal::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::v1::model::Transform* Goal::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.Goal.pose)
  return _internal_mutable_pose();
}
inline void Goal::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Goal.pose)
}

// -------------------------------------------------------------------

// GoalID

// string id = 1 [json_name = "id"];
inline void GoalID::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GoalID::id() const {
  // @@protoc_insertion_point(field_get:v1.model.GoalID.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GoalID::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.GoalID.id)
}
inline std::string* GoalID::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.GoalID.id)
  return _internal_mutable_id();
}
inline const std::string& GoalID::_internal_id() const {
  return id_.Get();
}
inline void GoalID::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GoalID::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GoalID::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.GoalID.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GoalID::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.GoalID.id)
}

// -------------------------------------------------------------------

// PoseWithCovariance

// .v1.model.Transform pose = 1 [json_name = "pose"];
inline bool PoseWithCovariance::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseWithCovariance::has_pose() const {
  return _internal_has_pose();
}
inline const ::v1::model::Transform& PoseWithCovariance::_internal_pose() const {
  const ::v1::model::Transform* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& PoseWithCovariance::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.PoseWithCovariance.pose)
  return _internal_pose();
}
inline void PoseWithCovariance::unsafe_arena_set_allocated_pose(
    ::v1::model::Transform* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.PoseWithCovariance.pose)
}
inline ::v1::model::Transform* PoseWithCovariance::release_pose() {
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* PoseWithCovariance::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.PoseWithCovariance.pose)
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* PoseWithCovariance::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::v1::model::Transform* PoseWithCovariance::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.PoseWithCovariance.pose)
  return _internal_mutable_pose();
}
inline void PoseWithCovariance::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:v1.model.PoseWithCovariance.pose)
}

// repeated double covariance = 2 [json_name = "covariance"];
inline int PoseWithCovariance::_internal_covariance_size() const {
  return covariance_.size();
}
inline int PoseWithCovariance::covariance_size() const {
  return _internal_covariance_size();
}
inline void PoseWithCovariance::clear_covariance() {
  covariance_.Clear();
}
inline double PoseWithCovariance::_internal_covariance(int index) const {
  return covariance_.Get(index);
}
inline double PoseWithCovariance::covariance(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.PoseWithCovariance.covariance)
  return _internal_covariance(index);
}
inline void PoseWithCovariance::set_covariance(int index, double value) {
  covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.PoseWithCovariance.covariance)
}
inline void PoseWithCovariance::_internal_add_covariance(double value) {
  covariance_.Add(value);
}
inline void PoseWithCovariance::add_covariance(double value) {
  _internal_add_covariance(value);
  // @@protoc_insertion_point(field_add:v1.model.PoseWithCovariance.covariance)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::_internal_covariance() const {
  return covariance_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PoseWithCovariance::covariance() const {
  // @@protoc_insertion_point(field_list:v1.model.PoseWithCovariance.covariance)
  return _internal_covariance();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::_internal_mutable_covariance() {
  return &covariance_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PoseWithCovariance::mutable_covariance() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.PoseWithCovariance.covariance)
  return _internal_mutable_covariance();
}

// -------------------------------------------------------------------

// ColorRGBA

// float r = 1 [json_name = "r"];
inline void ColorRGBA::clear_r() {
  r_ = 0;
}
inline float ColorRGBA::_internal_r() const {
  return r_;
}
inline float ColorRGBA::r() const {
  // @@protoc_insertion_point(field_get:v1.model.ColorRGBA.r)
  return _internal_r();
}
inline void ColorRGBA::_internal_set_r(float value) {
  
  r_ = value;
}
inline void ColorRGBA::set_r(float value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:v1.model.ColorRGBA.r)
}

// float g = 2 [json_name = "g"];
inline void ColorRGBA::clear_g() {
  g_ = 0;
}
inline float ColorRGBA::_internal_g() const {
  return g_;
}
inline float ColorRGBA::g() const {
  // @@protoc_insertion_point(field_get:v1.model.ColorRGBA.g)
  return _internal_g();
}
inline void ColorRGBA::_internal_set_g(float value) {
  
  g_ = value;
}
inline void ColorRGBA::set_g(float value) {
  _internal_set_g(value);
  // @@protoc_insertion_point(field_set:v1.model.ColorRGBA.g)
}

// float b = 3 [json_name = "b"];
inline void ColorRGBA::clear_b() {
  b_ = 0;
}
inline float ColorRGBA::_internal_b() const {
  return b_;
}
inline float ColorRGBA::b() const {
  // @@protoc_insertion_point(field_get:v1.model.ColorRGBA.b)
  return _internal_b();
}
inline void ColorRGBA::_internal_set_b(float value) {
  
  b_ = value;
}
inline void ColorRGBA::set_b(float value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:v1.model.ColorRGBA.b)
}

// float a = 4 [json_name = "a"];
inline void ColorRGBA::clear_a() {
  a_ = 0;
}
inline float ColorRGBA::_internal_a() const {
  return a_;
}
inline float ColorRGBA::a() const {
  // @@protoc_insertion_point(field_get:v1.model.ColorRGBA.a)
  return _internal_a();
}
inline void ColorRGBA::_internal_set_a(float value) {
  
  a_ = value;
}
inline void ColorRGBA::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:v1.model.ColorRGBA.a)
}

// -------------------------------------------------------------------

// Marker3D

// .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
inline bool Marker3D::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool Marker3D::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& Marker3D::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Marker3D::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.world_to_local)
  return _internal_world_to_local();
}
inline void Marker3D::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Marker3D.world_to_local)
}
inline ::v1::model::Transform* Marker3D::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Marker3D::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Marker3D::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* Marker3D::mutable_world_to_local() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.world_to_local)
  return _internal_mutable_world_to_local();
}
inline void Marker3D::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.world_to_local)
}

// string ns = 2 [json_name = "ns"];
inline void Marker3D::clear_ns() {
  ns_.ClearToEmpty();
}
inline const std::string& Marker3D::ns() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.ns)
  return _internal_ns();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_ns(ArgT0&& arg0, ArgT... args) {
 
 ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.ns)
}
inline std::string* Marker3D::mutable_ns() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.ns)
  return _internal_mutable_ns();
}
inline const std::string& Marker3D::_internal_ns() const {
  return ns_.Get();
}
inline void Marker3D::_internal_set_ns(const std::string& value) {
  
  ns_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_ns() {
  
  return ns_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_ns() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.ns)
  return ns_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_ns(std::string* ns) {
  if (ns != nullptr) {
    
  } else {
    
  }
  ns_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ns,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.ns)
}

// int32 id = 3 [json_name = "id"];
inline void Marker3D::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker3D::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Marker3D::id() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.id)
  return _internal_id();
}
inline void Marker3D::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Marker3D::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.id)
}

// string type = 4 [json_name = "type"];
inline void Marker3D::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Marker3D::type() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.type)
}
inline std::string* Marker3D::mutable_type() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.type)
  return _internal_mutable_type();
}
inline const std::string& Marker3D::_internal_type() const {
  return type_.Get();
}
inline void Marker3D::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_type() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.type)
}

// string action = 5 [json_name = "action"];
inline void Marker3D::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& Marker3D::action() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.action)
}
inline std::string* Marker3D::mutable_action() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.action)
  return _internal_mutable_action();
}
inline const std::string& Marker3D::_internal_action() const {
  return action_.Get();
}
inline void Marker3D::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_action() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.action)
}

// .v1.model.Transform pose = 6 [json_name = "pose"];
inline bool Marker3D::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool Marker3D::has_pose() const {
  return _internal_has_pose();
}
inline const ::v1::model::Transform& Marker3D::_internal_pose() const {
  const ::v1::model::Transform* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& Marker3D::pose() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.pose)
  return _internal_pose();
}
inline void Marker3D::unsafe_arena_set_allocated_pose(
    ::v1::model::Transform* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Marker3D.pose)
}
inline ::v1::model::Transform* Marker3D::release_pose() {
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Transform* Marker3D::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.pose)
  
  ::v1::model::Transform* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* Marker3D::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::v1::model::Transform* Marker3D::mutable_pose() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.pose)
  return _internal_mutable_pose();
}
inline void Marker3D::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.pose)
}

// .v1.model.Vector3 scale = 7 [json_name = "scale"];
inline bool Marker3D::_internal_has_scale() const {
  return this != internal_default_instance() && scale_ != nullptr;
}
inline bool Marker3D::has_scale() const {
  return _internal_has_scale();
}
inline const ::v1::model::Vector3& Marker3D::_internal_scale() const {
  const ::v1::model::Vector3* p = scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Vector3&>(
      ::v1::model::_Vector3_default_instance_);
}
inline const ::v1::model::Vector3& Marker3D::scale() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.scale)
  return _internal_scale();
}
inline void Marker3D::unsafe_arena_set_allocated_scale(
    ::v1::model::Vector3* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  scale_ = scale;
  if (scale) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Marker3D.scale)
}
inline ::v1::model::Vector3* Marker3D::release_scale() {
  
  ::v1::model::Vector3* temp = scale_;
  scale_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Vector3* Marker3D::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.scale)
  
  ::v1::model::Vector3* temp = scale_;
  scale_ = nullptr;
  return temp;
}
inline ::v1::model::Vector3* Marker3D::_internal_mutable_scale() {
  
  if (scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Vector3>(GetArenaForAllocation());
    scale_ = p;
  }
  return scale_;
}
inline ::v1::model::Vector3* Marker3D::mutable_scale() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.scale)
  return _internal_mutable_scale();
}
inline void Marker3D::set_allocated_scale(::v1::model::Vector3* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    
  } else {
    
  }
  scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.scale)
}

// .v1.model.ColorRGBA color = 8 [json_name = "color"];
inline bool Marker3D::_internal_has_color() const {
  return this != internal_default_instance() && color_ != nullptr;
}
inline bool Marker3D::has_color() const {
  return _internal_has_color();
}
inline void Marker3D::clear_color() {
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
}
inline const ::v1::model::ColorRGBA& Marker3D::_internal_color() const {
  const ::v1::model::ColorRGBA* p = color_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::ColorRGBA&>(
      ::v1::model::_ColorRGBA_default_instance_);
}
inline const ::v1::model::ColorRGBA& Marker3D::color() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.color)
  return _internal_color();
}
inline void Marker3D::unsafe_arena_set_allocated_color(
    ::v1::model::ColorRGBA* color) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(color_);
  }
  color_ = color;
  if (color) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.Marker3D.color)
}
inline ::v1::model::ColorRGBA* Marker3D::release_color() {
  
  ::v1::model::ColorRGBA* temp = color_;
  color_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ColorRGBA* Marker3D::unsafe_arena_release_color() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.color)
  
  ::v1::model::ColorRGBA* temp = color_;
  color_ = nullptr;
  return temp;
}
inline ::v1::model::ColorRGBA* Marker3D::_internal_mutable_color() {
  
  if (color_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ColorRGBA>(GetArenaForAllocation());
    color_ = p;
  }
  return color_;
}
inline ::v1::model::ColorRGBA* Marker3D::mutable_color() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.color)
  return _internal_mutable_color();
}
inline void Marker3D::set_allocated_color(::v1::model::ColorRGBA* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete color_;
  }
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::ColorRGBA>::GetOwningArena(color);
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    
  } else {
    
  }
  color_ = color;
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.color)
}

// double lifetime = 9 [json_name = "lifetime"];
inline void Marker3D::clear_lifetime() {
  lifetime_ = 0;
}
inline double Marker3D::_internal_lifetime() const {
  return lifetime_;
}
inline double Marker3D::lifetime() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.lifetime)
  return _internal_lifetime();
}
inline void Marker3D::_internal_set_lifetime(double value) {
  
  lifetime_ = value;
}
inline void Marker3D::set_lifetime(double value) {
  _internal_set_lifetime(value);
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.lifetime)
}

// bool frame_locked = 10 [json_name = "frameLocked"];
inline void Marker3D::clear_frame_locked() {
  frame_locked_ = false;
}
inline bool Marker3D::_internal_frame_locked() const {
  return frame_locked_;
}
inline bool Marker3D::frame_locked() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.frame_locked)
  return _internal_frame_locked();
}
inline void Marker3D::_internal_set_frame_locked(bool value) {
  
  frame_locked_ = value;
}
inline void Marker3D::set_frame_locked(bool value) {
  _internal_set_frame_locked(value);
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.frame_locked)
}

// repeated .v1.model.Vector3 points = 11 [json_name = "points"];
inline int Marker3D::_internal_points_size() const {
  return points_.size();
}
inline int Marker3D::points_size() const {
  return _internal_points_size();
}
inline ::v1::model::Vector3* Marker3D::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Vector3 >*
Marker3D::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Marker3D.points)
  return &points_;
}
inline const ::v1::model::Vector3& Marker3D::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::v1::model::Vector3& Marker3D::points(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.points)
  return _internal_points(index);
}
inline ::v1::model::Vector3* Marker3D::_internal_add_points() {
  return points_.Add();
}
inline ::v1::model::Vector3* Marker3D::add_points() {
  // @@protoc_insertion_point(field_add:v1.model.Marker3D.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Vector3 >&
Marker3D::points() const {
  // @@protoc_insertion_point(field_list:v1.model.Marker3D.points)
  return points_;
}

// repeated .v1.model.ColorRGBA colors = 12 [json_name = "colors"];
inline int Marker3D::_internal_colors_size() const {
  return colors_.size();
}
inline int Marker3D::colors_size() const {
  return _internal_colors_size();
}
inline void Marker3D::clear_colors() {
  colors_.Clear();
}
inline ::v1::model::ColorRGBA* Marker3D::mutable_colors(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.colors)
  return colors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ColorRGBA >*
Marker3D::mutable_colors() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Marker3D.colors)
  return &colors_;
}
inline const ::v1::model::ColorRGBA& Marker3D::_internal_colors(int index) const {
  return colors_.Get(index);
}
inline const ::v1::model::ColorRGBA& Marker3D::colors(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.colors)
  return _internal_colors(index);
}
inline ::v1::model::ColorRGBA* Marker3D::_internal_add_colors() {
  return colors_.Add();
}
inline ::v1::model::ColorRGBA* Marker3D::add_colors() {
  // @@protoc_insertion_point(field_add:v1.model.Marker3D.colors)
  return _internal_add_colors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ColorRGBA >&
Marker3D::colors() const {
  // @@protoc_insertion_point(field_list:v1.model.Marker3D.colors)
  return colors_;
}

// string text = 13 [json_name = "text"];
inline void Marker3D::clear_text() {
  text_.ClearToEmpty();
}
inline const std::string& Marker3D::text() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_text(ArgT0&& arg0, ArgT... args) {
 
 text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.text)
}
inline std::string* Marker3D::mutable_text() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.text)
  return _internal_mutable_text();
}
inline const std::string& Marker3D::_internal_text() const {
  return text_.Get();
}
inline void Marker3D::_internal_set_text(const std::string& value) {
  
  text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_text() {
  
  return text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_text() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.text)
}

// string mesh_resource = 14 [json_name = "meshResource"];
inline void Marker3D::clear_mesh_resource() {
  mesh_resource_.ClearToEmpty();
}
inline const std::string& Marker3D::mesh_resource() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.mesh_resource)
  return _internal_mesh_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_mesh_resource(ArgT0&& arg0, ArgT... args) {
 
 mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.mesh_resource)
}
inline std::string* Marker3D::mutable_mesh_resource() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.mesh_resource)
  return _internal_mutable_mesh_resource();
}
inline const std::string& Marker3D::_internal_mesh_resource() const {
  return mesh_resource_.Get();
}
inline void Marker3D::_internal_set_mesh_resource(const std::string& value) {
  
  mesh_resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_mesh_resource() {
  
  return mesh_resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_mesh_resource() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.mesh_resource)
  return mesh_resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_mesh_resource(std::string* mesh_resource) {
  if (mesh_resource != nullptr) {
    
  } else {
    
  }
  mesh_resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mesh_resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.mesh_resource)
}

// bool mesh_use_embedded_materials = 15 [json_name = "meshUseEmbeddedMaterials"];
inline void Marker3D::clear_mesh_use_embedded_materials() {
  mesh_use_embedded_materials_ = false;
}
inline bool Marker3D::_internal_mesh_use_embedded_materials() const {
  return mesh_use_embedded_materials_;
}
inline bool Marker3D::mesh_use_embedded_materials() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.mesh_use_embedded_materials)
  return _internal_mesh_use_embedded_materials();
}
inline void Marker3D::_internal_set_mesh_use_embedded_materials(bool value) {
  
  mesh_use_embedded_materials_ = value;
}
inline void Marker3D::set_mesh_use_embedded_materials(bool value) {
  _internal_set_mesh_use_embedded_materials(value);
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.mesh_use_embedded_materials)
}

// string frame_id = 16 [json_name = "frameId"];
inline void Marker3D::clear_frame_id() {
  frame_id_.ClearToEmpty();
}
inline const std::string& Marker3D::frame_id() const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3D.frame_id)
  return _internal_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Marker3D::set_frame_id(ArgT0&& arg0, ArgT... args) {
 
 frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Marker3D.frame_id)
}
inline std::string* Marker3D::mutable_frame_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3D.frame_id)
  return _internal_mutable_frame_id();
}
inline const std::string& Marker3D::_internal_frame_id() const {
  return frame_id_.Get();
}
inline void Marker3D::_internal_set_frame_id(const std::string& value) {
  
  frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Marker3D::_internal_mutable_frame_id() {
  
  return frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Marker3D::release_frame_id() {
  // @@protoc_insertion_point(field_release:v1.model.Marker3D.frame_id)
  return frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Marker3D::set_allocated_frame_id(std::string* frame_id) {
  if (frame_id != nullptr) {
    
  } else {
    
  }
  frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), frame_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.Marker3D.frame_id)
}

// -------------------------------------------------------------------

// Marker3DArray

// repeated .v1.model.Marker3D markers = 1 [json_name = "markers"];
inline int Marker3DArray::_internal_markers_size() const {
  return markers_.size();
}
inline int Marker3DArray::markers_size() const {
  return _internal_markers_size();
}
inline void Marker3DArray::clear_markers() {
  markers_.Clear();
}
inline ::v1::model::Marker3D* Marker3DArray::mutable_markers(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Marker3DArray.markers)
  return markers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Marker3D >*
Marker3DArray::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Marker3DArray.markers)
  return &markers_;
}
inline const ::v1::model::Marker3D& Marker3DArray::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline const ::v1::model::Marker3D& Marker3DArray::markers(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Marker3DArray.markers)
  return _internal_markers(index);
}
inline ::v1::model::Marker3D* Marker3DArray::_internal_add_markers() {
  return markers_.Add();
}
inline ::v1::model::Marker3D* Marker3DArray::add_markers() {
  // @@protoc_insertion_point(field_add:v1.model.Marker3DArray.markers)
  return _internal_add_markers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Marker3D >&
Marker3DArray::markers() const {
  // @@protoc_insertion_point(field_list:v1.model.Marker3DArray.markers)
  return markers_;
}

// -------------------------------------------------------------------

// Joy

// repeated float axes = 1 [json_name = "axes"];
inline int Joy::_internal_axes_size() const {
  return axes_.size();
}
inline int Joy::axes_size() const {
  return _internal_axes_size();
}
inline void Joy::clear_axes() {
  axes_.Clear();
}
inline float Joy::_internal_axes(int index) const {
  return axes_.Get(index);
}
inline float Joy::axes(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Joy.axes)
  return _internal_axes(index);
}
inline void Joy::set_axes(int index, float value) {
  axes_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.Joy.axes)
}
inline void Joy::_internal_add_axes(float value) {
  axes_.Add(value);
}
inline void Joy::add_axes(float value) {
  _internal_add_axes(value);
  // @@protoc_insertion_point(field_add:v1.model.Joy.axes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Joy::_internal_axes() const {
  return axes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Joy::axes() const {
  // @@protoc_insertion_point(field_list:v1.model.Joy.axes)
  return _internal_axes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Joy::_internal_mutable_axes() {
  return &axes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Joy::mutable_axes() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Joy.axes)
  return _internal_mutable_axes();
}

// repeated int32 buttons = 2 [json_name = "buttons"];
inline int Joy::_internal_buttons_size() const {
  return buttons_.size();
}
inline int Joy::buttons_size() const {
  return _internal_buttons_size();
}
inline void Joy::clear_buttons() {
  buttons_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Joy::_internal_buttons(int index) const {
  return buttons_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Joy::buttons(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Joy.buttons)
  return _internal_buttons(index);
}
inline void Joy::set_buttons(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  buttons_.Set(index, value);
  // @@protoc_insertion_point(field_set:v1.model.Joy.buttons)
}
inline void Joy::_internal_add_buttons(::PROTOBUF_NAMESPACE_ID::int32 value) {
  buttons_.Add(value);
}
inline void Joy::add_buttons(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_buttons(value);
  // @@protoc_insertion_point(field_add:v1.model.Joy.buttons)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Joy::_internal_buttons() const {
  return buttons_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Joy::buttons() const {
  // @@protoc_insertion_point(field_list:v1.model.Joy.buttons)
  return _internal_buttons();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Joy::_internal_mutable_buttons() {
  return &buttons_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Joy::mutable_buttons() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Joy.buttons)
  return _internal_mutable_buttons();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fnavigation_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/views.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fviews_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fviews_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "protos/model/v1/datapoint.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fviews_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fviews_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto;
namespace v1 {
namespace model {
class Filter;
struct FilterDefaultTypeInternal;
extern FilterDefaultTypeInternal _Filter_default_instance_;
class Filter_NotTagsEntry_DoNotUse;
struct Filter_NotTagsEntry_DoNotUseDefaultTypeInternal;
extern Filter_NotTagsEntry_DoNotUseDefaultTypeInternal _Filter_NotTagsEntry_DoNotUse_default_instance_;
class Filter_TagsEntry_DoNotUse;
struct Filter_TagsEntry_DoNotUseDefaultTypeInternal;
extern Filter_TagsEntry_DoNotUseDefaultTypeInternal _Filter_TagsEntry_DoNotUse_default_instance_;
class ViewConfiguration;
struct ViewConfigurationDefaultTypeInternal;
extern ViewConfigurationDefaultTypeInternal _ViewConfiguration_default_instance_;
class ViewMetadata;
struct ViewMetadataDefaultTypeInternal;
extern ViewMetadataDefaultTypeInternal _ViewMetadata_default_instance_;
class ViewMetadata_TagsEntry_DoNotUse;
struct ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal;
extern ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal _ViewMetadata_TagsEntry_DoNotUse_default_instance_;
class ViewsMetadata;
struct ViewsMetadataDefaultTypeInternal;
extern ViewsMetadataDefaultTypeInternal _ViewsMetadata_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::Filter* Arena::CreateMaybeMessage<::v1::model::Filter>(Arena*);
template<> ::v1::model::Filter_NotTagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::Filter_NotTagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::Filter_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::Filter_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::ViewConfiguration* Arena::CreateMaybeMessage<::v1::model::ViewConfiguration>(Arena*);
template<> ::v1::model::ViewMetadata* Arena::CreateMaybeMessage<::v1::model::ViewMetadata>(Arena*);
template<> ::v1::model::ViewMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::ViewMetadata_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::ViewsMetadata* Arena::CreateMaybeMessage<::v1::model::ViewsMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

enum ViewMetadata_LayoutType : int {
  ViewMetadata_LayoutType_DASHBOARD = 0,
  ViewMetadata_LayoutType_OBSERVE = 1,
  ViewMetadata_LayoutType_FULLSCREEN = 2,
  ViewMetadata_LayoutType_ANALYTICS = 3,
  ViewMetadata_LayoutType_TELEOP = 4,
  ViewMetadata_LayoutType_ViewMetadata_LayoutType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ViewMetadata_LayoutType_ViewMetadata_LayoutType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ViewMetadata_LayoutType_IsValid(int value);
constexpr ViewMetadata_LayoutType ViewMetadata_LayoutType_LayoutType_MIN = ViewMetadata_LayoutType_DASHBOARD;
constexpr ViewMetadata_LayoutType ViewMetadata_LayoutType_LayoutType_MAX = ViewMetadata_LayoutType_TELEOP;
constexpr int ViewMetadata_LayoutType_LayoutType_ARRAYSIZE = ViewMetadata_LayoutType_LayoutType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewMetadata_LayoutType_descriptor();
template<typename T>
inline const std::string& ViewMetadata_LayoutType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ViewMetadata_LayoutType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ViewMetadata_LayoutType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ViewMetadata_LayoutType_descriptor(), enum_t_value);
}
inline bool ViewMetadata_LayoutType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ViewMetadata_LayoutType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ViewMetadata_LayoutType>(
    ViewMetadata_LayoutType_descriptor(), name, value);
}
// ===================================================================

class ViewsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ViewsMetadata) */ {
 public:
  inline ViewsMetadata() : ViewsMetadata(nullptr) {}
  ~ViewsMetadata() override;
  explicit constexpr ViewsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewsMetadata(const ViewsMetadata& from);
  ViewsMetadata(ViewsMetadata&& from) noexcept
    : ViewsMetadata() {
    *this = ::std::move(from);
  }

  inline ViewsMetadata& operator=(const ViewsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewsMetadata& operator=(ViewsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewsMetadata* internal_default_instance() {
    return reinterpret_cast<const ViewsMetadata*>(
               &_ViewsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ViewsMetadata& a, ViewsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewsMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewsMetadata* New() const final {
    return new ViewsMetadata();
  }

  ViewsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewsMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewsMetadata& from);
  void MergeFrom(const ViewsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewsMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ViewsMetadata";
  }
  protected:
  explicit ViewsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kViewsFieldNumber = 1,
  };
  // repeated .v1.model.ViewMetadata views = 1 [json_name = "views"];
  int views_size() const;
  private:
  int _internal_views_size() const;
  public:
  void clear_views();
  ::v1::model::ViewMetadata* mutable_views(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewMetadata >*
      mutable_views();
  private:
  const ::v1::model::ViewMetadata& _internal_views(int index) const;
  ::v1::model::ViewMetadata* _internal_add_views();
  public:
  const ::v1::model::ViewMetadata& views(int index) const;
  ::v1::model::ViewMetadata* add_views();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewMetadata >&
      views() const;

  // @@protoc_insertion_point(class_scope:v1.model.ViewsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewMetadata > views_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fviews_2eproto;
};
// -------------------------------------------------------------------

class ViewMetadata_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewMetadata_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ViewMetadata_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ViewMetadata_TagsEntry_DoNotUse();
  explicit constexpr ViewMetadata_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ViewMetadata_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ViewMetadata_TagsEntry_DoNotUse& other);
  static const ViewMetadata_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ViewMetadata_TagsEntry_DoNotUse*>(&_ViewMetadata_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.ViewMetadata.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.ViewMetadata.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ViewMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ViewMetadata) */ {
 public:
  inline ViewMetadata() : ViewMetadata(nullptr) {}
  ~ViewMetadata() override;
  explicit constexpr ViewMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewMetadata(const ViewMetadata& from);
  ViewMetadata(ViewMetadata&& from) noexcept
    : ViewMetadata() {
    *this = ::std::move(from);
  }

  inline ViewMetadata& operator=(const ViewMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewMetadata& operator=(ViewMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewMetadata* internal_default_instance() {
    return reinterpret_cast<const ViewMetadata*>(
               &_ViewMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ViewMetadata& a, ViewMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewMetadata* New() const final {
    return new ViewMetadata();
  }

  ViewMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewMetadata& from);
  void MergeFrom(const ViewMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ViewMetadata";
  }
  protected:
  explicit ViewMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef ViewMetadata_LayoutType LayoutType;
  static constexpr LayoutType DASHBOARD =
    ViewMetadata_LayoutType_DASHBOARD;
  static constexpr LayoutType OBSERVE =
    ViewMetadata_LayoutType_OBSERVE;
  static constexpr LayoutType FULLSCREEN =
    ViewMetadata_LayoutType_FULLSCREEN;
  static constexpr LayoutType ANALYTICS =
    ViewMetadata_LayoutType_ANALYTICS;
  static constexpr LayoutType TELEOP =
    ViewMetadata_LayoutType_TELEOP;
  static inline bool LayoutType_IsValid(int value) {
    return ViewMetadata_LayoutType_IsValid(value);
  }
  static constexpr LayoutType LayoutType_MIN =
    ViewMetadata_LayoutType_LayoutType_MIN;
  static constexpr LayoutType LayoutType_MAX =
    ViewMetadata_LayoutType_LayoutType_MAX;
  static constexpr int LayoutType_ARRAYSIZE =
    ViewMetadata_LayoutType_LayoutType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LayoutType_descriptor() {
    return ViewMetadata_LayoutType_descriptor();
  }
  template<typename T>
  static inline const std::string& LayoutType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LayoutType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LayoutType_Name.");
    return ViewMetadata_LayoutType_Name(enum_t_value);
  }
  static inline bool LayoutType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      LayoutType* value) {
    return ViewMetadata_LayoutType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 2,
    kConfigurationFieldNumber = 15,
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 3,
    kNameFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kUrlFieldNumber = 6,
    kLayoutTypeFieldNumber = 14,
    kSmartFleetIdFieldNumber = 16,
    kFilterFieldNumber = 12,
    kLayoutFieldNumber = 13,
    kIndexFieldNumber = 17,
    kShowOnSingleDeviceFieldNumber = 7,
    kShowOnMultiDeviceFieldNumber = 8,
    kShowOnTeleopFieldNumber = 9,
    kShowTimelineFieldNumber = 11,
  };
  // map<string, string> tags = 2 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // repeated .v1.model.ViewConfiguration configuration = 15 [json_name = "configuration"];
  int configuration_size() const;
  private:
  int _internal_configuration_size() const;
  public:
  void clear_configuration();
  ::v1::model::ViewConfiguration* mutable_configuration(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewConfiguration >*
      mutable_configuration();
  private:
  const ::v1::model::ViewConfiguration& _internal_configuration(int index) const;
  ::v1::model::ViewConfiguration* _internal_add_configuration();
  public:
  const ::v1::model::ViewConfiguration& configuration(int index) const;
  ::v1::model::ViewConfiguration* add_configuration();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewConfiguration >&
      configuration() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string organizationId = 3 [json_name = "organizationId"];
  void clear_organizationid();
  const std::string& organizationid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organizationid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organizationid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_organizationid();
  void set_allocated_organizationid(std::string* organizationid);
  private:
  const std::string& _internal_organizationid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organizationid(const std::string& value);
  std::string* _internal_mutable_organizationid();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string url = 6 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // string layoutType = 14 [json_name = "layoutType"];
  void clear_layouttype();
  const std::string& layouttype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layouttype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layouttype();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_layouttype();
  void set_allocated_layouttype(std::string* layouttype);
  private:
  const std::string& _internal_layouttype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layouttype(const std::string& value);
  std::string* _internal_mutable_layouttype();
  public:

  // string smartFleetId = 16 [json_name = "smartFleetId"];
  void clear_smartfleetid();
  const std::string& smartfleetid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_smartfleetid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_smartfleetid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_smartfleetid();
  void set_allocated_smartfleetid(std::string* smartfleetid);
  private:
  const std::string& _internal_smartfleetid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_smartfleetid(const std::string& value);
  std::string* _internal_mutable_smartfleetid();
  public:

  // .v1.model.Filter filter = 12 [json_name = "filter"];
  bool has_filter() const;
  private:
  bool _internal_has_filter() const;
  public:
  void clear_filter();
  const ::v1::model::Filter& filter() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Filter* release_filter();
  ::v1::model::Filter* mutable_filter();
  void set_allocated_filter(::v1::model::Filter* filter);
  private:
  const ::v1::model::Filter& _internal_filter() const;
  ::v1::model::Filter* _internal_mutable_filter();
  public:
  void unsafe_arena_set_allocated_filter(
      ::v1::model::Filter* filter);
  ::v1::model::Filter* unsafe_arena_release_filter();

  // .google.protobuf.Struct layout = 13 [json_name = "layout"];
  bool has_layout() const;
  private:
  bool _internal_has_layout() const;
  public:
  void clear_layout();
  const PROTOBUF_NAMESPACE_ID::Struct& layout() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Struct* release_layout();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_layout();
  void set_allocated_layout(PROTOBUF_NAMESPACE_ID::Struct* layout);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_layout() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_layout();
  public:
  void unsafe_arena_set_allocated_layout(
      PROTOBUF_NAMESPACE_ID::Struct* layout);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_layout();

  // int64 index = 17 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool showOnSingleDevice = 7 [json_name = "showOnSingleDevice"];
  void clear_showonsingledevice();
  bool showonsingledevice() const;
  void set_showonsingledevice(bool value);
  private:
  bool _internal_showonsingledevice() const;
  void _internal_set_showonsingledevice(bool value);
  public:

  // bool showOnMultiDevice = 8 [json_name = "showOnMultiDevice"];
  void clear_showonmultidevice();
  bool showonmultidevice() const;
  void set_showonmultidevice(bool value);
  private:
  bool _internal_showonmultidevice() const;
  void _internal_set_showonmultidevice(bool value);
  public:

  // bool showOnTeleop = 9 [json_name = "showOnTeleop"];
  void clear_showonteleop();
  bool showonteleop() const;
  void set_showonteleop(bool value);
  private:
  bool _internal_showonteleop() const;
  void _internal_set_showonteleop(bool value);
  public:

  // bool showTimeline = 11 [json_name = "showTimeline"];
  void clear_showtimeline();
  bool showtimeline() const;
  void set_showtimeline(bool value);
  private:
  bool _internal_showtimeline() const;
  void _internal_set_showtimeline(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.ViewMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ViewMetadata_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewConfiguration > configuration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organizationid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layouttype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smartfleetid_;
  ::v1::model::Filter* filter_;
  PROTOBUF_NAMESPACE_ID::Struct* layout_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  bool showonsingledevice_;
  bool showonmultidevice_;
  bool showonteleop_;
  bool showtimeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fviews_2eproto;
};
// -------------------------------------------------------------------

class Filter_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Filter_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Filter_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Filter_TagsEntry_DoNotUse();
  explicit constexpr Filter_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Filter_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Filter_TagsEntry_DoNotUse& other);
  static const Filter_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Filter_TagsEntry_DoNotUse*>(&_Filter_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.Filter.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.Filter.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Filter_NotTagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Filter_NotTagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Filter_NotTagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Filter_NotTagsEntry_DoNotUse();
  explicit constexpr Filter_NotTagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Filter_NotTagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Filter_NotTagsEntry_DoNotUse& other);
  static const Filter_NotTagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Filter_NotTagsEntry_DoNotUse*>(&_Filter_NotTagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.Filter.NotTagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.Filter.NotTagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Filter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Filter) */ {
 public:
  inline Filter() : Filter(nullptr) {}
  ~Filter() override;
  explicit constexpr Filter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Filter(const Filter& from);
  Filter(Filter&& from) noexcept
    : Filter() {
    *this = ::std::move(from);
  }

  inline Filter& operator=(const Filter& from) {
    CopyFrom(from);
    return *this;
  }
  inline Filter& operator=(Filter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Filter& default_instance() {
    return *internal_default_instance();
  }
  static inline const Filter* internal_default_instance() {
    return reinterpret_cast<const Filter*>(
               &_Filter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Filter& a, Filter& b) {
    a.Swap(&b);
  }
  inline void Swap(Filter* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Filter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Filter* New() const final {
    return new Filter();
  }

  Filter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Filter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Filter& from);
  void MergeFrom(const Filter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Filter";
  }
  protected:
  explicit Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 1,
    kNamesFieldNumber = 2,
    kTypesFieldNumber = 3,
    kDeviceIdsFieldNumber = 4,
    kNotTagsFieldNumber = 5,
    kNotNamesFieldNumber = 6,
    kAgentIdsFieldNumber = 7,
  };
  // map<string, string> tags = 1 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // repeated string names = 2 [json_name = "names"];
  int names_size() const;
  private:
  int _internal_names_size() const;
  public:
  void clear_names();
  const std::string& names(int index) const;
  std::string* mutable_names(int index);
  void set_names(int index, const std::string& value);
  void set_names(int index, std::string&& value);
  void set_names(int index, const char* value);
  void set_names(int index, const char* value, size_t size);
  std::string* add_names();
  void add_names(const std::string& value);
  void add_names(std::string&& value);
  void add_names(const char* value);
  void add_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_names();
  private:
  const std::string& _internal_names(int index) const;
  std::string* _internal_add_names();
  public:

  // repeated string types = 3 [json_name = "types"];
  int types_size() const;
  private:
  int _internal_types_size() const;
  public:
  void clear_types();
  const std::string& types(int index) const;
  std::string* mutable_types(int index);
  void set_types(int index, const std::string& value);
  void set_types(int index, std::string&& value);
  void set_types(int index, const char* value);
  void set_types(int index, const char* value, size_t size);
  std::string* add_types();
  void add_types(const std::string& value);
  void add_types(std::string&& value);
  void add_types(const char* value);
  void add_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_types();
  private:
  const std::string& _internal_types(int index) const;
  std::string* _internal_add_types();
  public:

  // repeated string deviceIds = 4 [json_name = "deviceIds"];
  int deviceids_size() const;
  private:
  int _internal_deviceids_size() const;
  public:
  void clear_deviceids();
  const std::string& deviceids(int index) const;
  std::string* mutable_deviceids(int index);
  void set_deviceids(int index, const std::string& value);
  void set_deviceids(int index, std::string&& value);
  void set_deviceids(int index, const char* value);
  void set_deviceids(int index, const char* value, size_t size);
  std::string* add_deviceids();
  void add_deviceids(const std::string& value);
  void add_deviceids(std::string&& value);
  void add_deviceids(const char* value);
  void add_deviceids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deviceids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deviceids();
  private:
  const std::string& _internal_deviceids(int index) const;
  std::string* _internal_add_deviceids();
  public:

  // map<string, string> notTags = 5 [json_name = "notTags"];
  int nottags_size() const;
  private:
  int _internal_nottags_size() const;
  public:
  void clear_nottags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_nottags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_nottags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      nottags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_nottags();

  // repeated string notNames = 6 [json_name = "notNames"];
  int notnames_size() const;
  private:
  int _internal_notnames_size() const;
  public:
  void clear_notnames();
  const std::string& notnames(int index) const;
  std::string* mutable_notnames(int index);
  void set_notnames(int index, const std::string& value);
  void set_notnames(int index, std::string&& value);
  void set_notnames(int index, const char* value);
  void set_notnames(int index, const char* value, size_t size);
  std::string* add_notnames();
  void add_notnames(const std::string& value);
  void add_notnames(std::string&& value);
  void add_notnames(const char* value);
  void add_notnames(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& notnames() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_notnames();
  private:
  const std::string& _internal_notnames(int index) const;
  std::string* _internal_add_notnames();
  public:

  // repeated string agentIds = 7 [json_name = "agentIds"];
  int agentids_size() const;
  private:
  int _internal_agentids_size() const;
  public:
  void clear_agentids();
  const std::string& agentids(int index) const;
  std::string* mutable_agentids(int index);
  void set_agentids(int index, const std::string& value);
  void set_agentids(int index, std::string&& value);
  void set_agentids(int index, const char* value);
  void set_agentids(int index, const char* value, size_t size);
  std::string* add_agentids();
  void add_agentids(const std::string& value);
  void add_agentids(std::string&& value);
  void add_agentids(const char* value);
  void add_agentids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& agentids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_agentids();
  private:
  const std::string& _internal_agentids(int index) const;
  std::string* _internal_add_agentids();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Filter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Filter_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deviceids_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Filter_NotTagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> nottags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> notnames_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> agentids_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fviews_2eproto;
};
// -------------------------------------------------------------------

class ViewConfiguration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.ViewConfiguration) */ {
 public:
  inline ViewConfiguration() : ViewConfiguration(nullptr) {}
  ~ViewConfiguration() override;
  explicit constexpr ViewConfiguration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ViewConfiguration(const ViewConfiguration& from);
  ViewConfiguration(ViewConfiguration&& from) noexcept
    : ViewConfiguration() {
    *this = ::std::move(from);
  }

  inline ViewConfiguration& operator=(const ViewConfiguration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ViewConfiguration& operator=(ViewConfiguration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ViewConfiguration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ViewConfiguration* internal_default_instance() {
    return reinterpret_cast<const ViewConfiguration*>(
               &_ViewConfiguration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ViewConfiguration& a, ViewConfiguration& b) {
    a.Swap(&b);
  }
  inline void Swap(ViewConfiguration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ViewConfiguration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ViewConfiguration* New() const final {
    return new ViewConfiguration();
  }

  ViewConfiguration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ViewConfiguration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ViewConfiguration& from);
  void MergeFrom(const ViewConfiguration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ViewConfiguration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.ViewConfiguration";
  }
  protected:
  explicit ViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kConfigurationFieldNumber = 3,
  };
  // string streamName = 1 [json_name = "streamName"];
  void clear_streamname();
  const std::string& streamname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_streamname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_streamname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_streamname();
  void set_allocated_streamname(std::string* streamname);
  private:
  const std::string& _internal_streamname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_streamname(const std::string& value);
  std::string* _internal_mutable_streamname();
  public:

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .google.protobuf.Struct configuration = 3 [json_name = "configuration"];
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const PROTOBUF_NAMESPACE_ID::Struct& configuration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Struct* release_configuration();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_configuration();
  void set_allocated_configuration(PROTOBUF_NAMESPACE_ID::Struct* configuration);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_configuration() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      PROTOBUF_NAMESPACE_ID::Struct* configuration);
  PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.model.ViewConfiguration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  PROTOBUF_NAMESPACE_ID::Struct* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fviews_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ViewsMetadata

// repeated .v1.model.ViewMetadata views = 1 [json_name = "views"];
inline int ViewsMetadata::_internal_views_size() const {
  return views_.size();
}
inline int ViewsMetadata::views_size() const {
  return _internal_views_size();
}
inline void ViewsMetadata::clear_views() {
  views_.Clear();
}
inline ::v1::model::ViewMetadata* ViewsMetadata::mutable_views(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewsMetadata.views)
  return views_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewMetadata >*
ViewsMetadata::mutable_views() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.ViewsMetadata.views)
  return &views_;
}
inline const ::v1::model::ViewMetadata& ViewsMetadata::_internal_views(int index) const {
  return views_.Get(index);
}
inline const ::v1::model::ViewMetadata& ViewsMetadata::views(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.ViewsMetadata.views)
  return _internal_views(index);
}
inline ::v1::model::ViewMetadata* ViewsMetadata::_internal_add_views() {
  return views_.Add();
}
inline ::v1::model::ViewMetadata* ViewsMetadata::add_views() {
  // @@protoc_insertion_point(field_add:v1.model.ViewsMetadata.views)
  return _internal_add_views();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewMetadata >&
ViewsMetadata::views() const {
  // @@protoc_insertion_point(field_list:v1.model.ViewsMetadata.views)
  return views_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ViewMetadata

// string id = 1 [json_name = "id"];
inline void ViewMetadata::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ViewMetadata::id() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.id)
}
inline std::string* ViewMetadata::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.id)
  return _internal_mutable_id();
}
inline const std::string& ViewMetadata::_internal_id() const {
  return id_.Get();
}
inline void ViewMetadata::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.id)
}

// map<string, string> tags = 2 [json_name = "tags"];
inline int ViewMetadata::_internal_tags_size() const {
  return tags_.size();
}
inline int ViewMetadata::tags_size() const {
  return _internal_tags_size();
}
inline void ViewMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ViewMetadata::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ViewMetadata::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.ViewMetadata.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ViewMetadata::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ViewMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.ViewMetadata.tags)
  return _internal_mutable_tags();
}

// string organizationId = 3 [json_name = "organizationId"];
inline void ViewMetadata::clear_organizationid() {
  organizationid_.ClearToEmpty();
}
inline const std::string& ViewMetadata::organizationid() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.organizationId)
  return _internal_organizationid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_organizationid(ArgT0&& arg0, ArgT... args) {
 
 organizationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.organizationId)
}
inline std::string* ViewMetadata::mutable_organizationid() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.organizationId)
  return _internal_mutable_organizationid();
}
inline const std::string& ViewMetadata::_internal_organizationid() const {
  return organizationid_.Get();
}
inline void ViewMetadata::_internal_set_organizationid(const std::string& value) {
  
  organizationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_organizationid() {
  
  return organizationid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_organizationid() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.organizationId)
  return organizationid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_organizationid(std::string* organizationid) {
  if (organizationid != nullptr) {
    
  } else {
    
  }
  organizationid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organizationid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.organizationId)
}

// string name = 4 [json_name = "name"];
inline void ViewMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ViewMetadata::name() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.name)
}
inline std::string* ViewMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& ViewMetadata::_internal_name() const {
  return name_.Get();
}
inline void ViewMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.name)
}

// string description = 5 [json_name = "description"];
inline void ViewMetadata::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ViewMetadata::description() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.description)
}
inline std::string* ViewMetadata::mutable_description() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.description)
  return _internal_mutable_description();
}
inline const std::string& ViewMetadata::_internal_description() const {
  return description_.Get();
}
inline void ViewMetadata::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_description() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.description)
}

// string url = 6 [json_name = "url"];
inline void ViewMetadata::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& ViewMetadata::url() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.url)
}
inline std::string* ViewMetadata::mutable_url() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.url)
  return _internal_mutable_url();
}
inline const std::string& ViewMetadata::_internal_url() const {
  return url_.Get();
}
inline void ViewMetadata::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.url)
}

// bool showOnSingleDevice = 7 [json_name = "showOnSingleDevice"];
inline void ViewMetadata::clear_showonsingledevice() {
  showonsingledevice_ = false;
}
inline bool ViewMetadata::_internal_showonsingledevice() const {
  return showonsingledevice_;
}
inline bool ViewMetadata::showonsingledevice() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.showOnSingleDevice)
  return _internal_showonsingledevice();
}
inline void ViewMetadata::_internal_set_showonsingledevice(bool value) {
  
  showonsingledevice_ = value;
}
inline void ViewMetadata::set_showonsingledevice(bool value) {
  _internal_set_showonsingledevice(value);
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.showOnSingleDevice)
}

// bool showOnMultiDevice = 8 [json_name = "showOnMultiDevice"];
inline void ViewMetadata::clear_showonmultidevice() {
  showonmultidevice_ = false;
}
inline bool ViewMetadata::_internal_showonmultidevice() const {
  return showonmultidevice_;
}
inline bool ViewMetadata::showonmultidevice() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.showOnMultiDevice)
  return _internal_showonmultidevice();
}
inline void ViewMetadata::_internal_set_showonmultidevice(bool value) {
  
  showonmultidevice_ = value;
}
inline void ViewMetadata::set_showonmultidevice(bool value) {
  _internal_set_showonmultidevice(value);
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.showOnMultiDevice)
}

// bool showOnTeleop = 9 [json_name = "showOnTeleop"];
inline void ViewMetadata::clear_showonteleop() {
  showonteleop_ = false;
}
inline bool ViewMetadata::_internal_showonteleop() const {
  return showonteleop_;
}
inline bool ViewMetadata::showonteleop() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.showOnTeleop)
  return _internal_showonteleop();
}
inline void ViewMetadata::_internal_set_showonteleop(bool value) {
  
  showonteleop_ = value;
}
inline void ViewMetadata::set_showonteleop(bool value) {
  _internal_set_showonteleop(value);
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.showOnTeleop)
}

// bool showTimeline = 11 [json_name = "showTimeline"];
inline void ViewMetadata::clear_showtimeline() {
  showtimeline_ = false;
}
inline bool ViewMetadata::_internal_showtimeline() const {
  return showtimeline_;
}
inline bool ViewMetadata::showtimeline() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.showTimeline)
  return _internal_showtimeline();
}
inline void ViewMetadata::_internal_set_showtimeline(bool value) {
  
  showtimeline_ = value;
}
inline void ViewMetadata::set_showtimeline(bool value) {
  _internal_set_showtimeline(value);
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.showTimeline)
}

// .v1.model.Filter filter = 12 [json_name = "filter"];
inline bool ViewMetadata::_internal_has_filter() const {
  return this != internal_default_instance() && filter_ != nullptr;
}
inline bool ViewMetadata::has_filter() const {
  return _internal_has_filter();
}
inline void ViewMetadata::clear_filter() {
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
}
inline const ::v1::model::Filter& ViewMetadata::_internal_filter() const {
  const ::v1::model::Filter* p = filter_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Filter&>(
      ::v1::model::_Filter_default_instance_);
}
inline const ::v1::model::Filter& ViewMetadata::filter() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.filter)
  return _internal_filter();
}
inline void ViewMetadata::unsafe_arena_set_allocated_filter(
    ::v1::model::Filter* filter) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(filter_);
  }
  filter_ = filter;
  if (filter) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ViewMetadata.filter)
}
inline ::v1::model::Filter* ViewMetadata::release_filter() {
  
  ::v1::model::Filter* temp = filter_;
  filter_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Filter* ViewMetadata::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.filter)
  
  ::v1::model::Filter* temp = filter_;
  filter_ = nullptr;
  return temp;
}
inline ::v1::model::Filter* ViewMetadata::_internal_mutable_filter() {
  
  if (filter_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Filter>(GetArenaForAllocation());
    filter_ = p;
  }
  return filter_;
}
inline ::v1::model::Filter* ViewMetadata::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.filter)
  return _internal_mutable_filter();
}
inline void ViewMetadata::set_allocated_filter(::v1::model::Filter* filter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete filter_;
  }
  if (filter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Filter>::GetOwningArena(filter);
    if (message_arena != submessage_arena) {
      filter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, filter, submessage_arena);
    }
    
  } else {
    
  }
  filter_ = filter;
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.filter)
}

// .google.protobuf.Struct layout = 13 [json_name = "layout"];
inline bool ViewMetadata::_internal_has_layout() const {
  return this != internal_default_instance() && layout_ != nullptr;
}
inline bool ViewMetadata::has_layout() const {
  return _internal_has_layout();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ViewMetadata::_internal_layout() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = layout_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ViewMetadata::layout() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.layout)
  return _internal_layout();
}
inline void ViewMetadata::unsafe_arena_set_allocated_layout(
    PROTOBUF_NAMESPACE_ID::Struct* layout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_);
  }
  layout_ = layout;
  if (layout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ViewMetadata.layout)
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewMetadata::release_layout() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = layout_;
  layout_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewMetadata::unsafe_arena_release_layout() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.layout)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = layout_;
  layout_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewMetadata::_internal_mutable_layout() {
  
  if (layout_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    layout_ = p;
  }
  return layout_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewMetadata::mutable_layout() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.layout)
  return _internal_mutable_layout();
}
inline void ViewMetadata::set_allocated_layout(PROTOBUF_NAMESPACE_ID::Struct* layout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout_);
  }
  if (layout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(layout));
    if (message_arena != submessage_arena) {
      layout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, layout, submessage_arena);
    }
    
  } else {
    
  }
  layout_ = layout;
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.layout)
}

// string layoutType = 14 [json_name = "layoutType"];
inline void ViewMetadata::clear_layouttype() {
  layouttype_.ClearToEmpty();
}
inline const std::string& ViewMetadata::layouttype() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.layoutType)
  return _internal_layouttype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_layouttype(ArgT0&& arg0, ArgT... args) {
 
 layouttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.layoutType)
}
inline std::string* ViewMetadata::mutable_layouttype() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.layoutType)
  return _internal_mutable_layouttype();
}
inline const std::string& ViewMetadata::_internal_layouttype() const {
  return layouttype_.Get();
}
inline void ViewMetadata::_internal_set_layouttype(const std::string& value) {
  
  layouttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_layouttype() {
  
  return layouttype_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_layouttype() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.layoutType)
  return layouttype_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_layouttype(std::string* layouttype) {
  if (layouttype != nullptr) {
    
  } else {
    
  }
  layouttype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), layouttype,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.layoutType)
}

// repeated .v1.model.ViewConfiguration configuration = 15 [json_name = "configuration"];
inline int ViewMetadata::_internal_configuration_size() const {
  return configuration_.size();
}
inline int ViewMetadata::configuration_size() const {
  return _internal_configuration_size();
}
inline void ViewMetadata::clear_configuration() {
  configuration_.Clear();
}
inline ::v1::model::ViewConfiguration* ViewMetadata::mutable_configuration(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.configuration)
  return configuration_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewConfiguration >*
ViewMetadata::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.ViewMetadata.configuration)
  return &configuration_;
}
inline const ::v1::model::ViewConfiguration& ViewMetadata::_internal_configuration(int index) const {
  return configuration_.Get(index);
}
inline const ::v1::model::ViewConfiguration& ViewMetadata::configuration(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.configuration)
  return _internal_configuration(index);
}
inline ::v1::model::ViewConfiguration* ViewMetadata::_internal_add_configuration() {
  return configuration_.Add();
}
inline ::v1::model::ViewConfiguration* ViewMetadata::add_configuration() {
  // @@protoc_insertion_point(field_add:v1.model.ViewMetadata.configuration)
  return _internal_add_configuration();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::ViewConfiguration >&
ViewMetadata::configuration() const {
  // @@protoc_insertion_point(field_list:v1.model.ViewMetadata.configuration)
  return configuration_;
}

// string smartFleetId = 16 [json_name = "smartFleetId"];
inline void ViewMetadata::clear_smartfleetid() {
  smartfleetid_.ClearToEmpty();
}
inline const std::string& ViewMetadata::smartfleetid() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.smartFleetId)
  return _internal_smartfleetid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewMetadata::set_smartfleetid(ArgT0&& arg0, ArgT... args) {
 
 smartfleetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.smartFleetId)
}
inline std::string* ViewMetadata::mutable_smartfleetid() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewMetadata.smartFleetId)
  return _internal_mutable_smartfleetid();
}
inline const std::string& ViewMetadata::_internal_smartfleetid() const {
  return smartfleetid_.Get();
}
inline void ViewMetadata::_internal_set_smartfleetid(const std::string& value) {
  
  smartfleetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewMetadata::_internal_mutable_smartfleetid() {
  
  return smartfleetid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewMetadata::release_smartfleetid() {
  // @@protoc_insertion_point(field_release:v1.model.ViewMetadata.smartFleetId)
  return smartfleetid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewMetadata::set_allocated_smartfleetid(std::string* smartfleetid) {
  if (smartfleetid != nullptr) {
    
  } else {
    
  }
  smartfleetid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smartfleetid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewMetadata.smartFleetId)
}

// int64 index = 17 [json_name = "index"];
inline void ViewMetadata::clear_index() {
  index_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ViewMetadata::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ViewMetadata::index() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewMetadata.index)
  return _internal_index();
}
inline void ViewMetadata::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void ViewMetadata::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v1.model.ViewMetadata.index)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Filter

// map<string, string> tags = 1 [json_name = "tags"];
inline int Filter::_internal_tags_size() const {
  return tags_.size();
}
inline int Filter::tags_size() const {
  return _internal_tags_size();
}
inline void Filter::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Filter::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Filter::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.Filter.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Filter::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Filter::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.Filter.tags)
  return _internal_mutable_tags();
}

// repeated string names = 2 [json_name = "names"];
inline int Filter::_internal_names_size() const {
  return names_.size();
}
inline int Filter::names_size() const {
  return _internal_names_size();
}
inline void Filter::clear_names() {
  names_.Clear();
}
inline std::string* Filter::add_names() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.Filter.names)
  return _internal_add_names();
}
inline const std::string& Filter::_internal_names(int index) const {
  return names_.Get(index);
}
inline const std::string& Filter::names(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Filter.names)
  return _internal_names(index);
}
inline std::string* Filter::mutable_names(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Filter.names)
  return names_.Mutable(index);
}
inline void Filter::set_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.names)
  names_.Mutable(index)->assign(value);
}
inline void Filter::set_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.names)
  names_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.Filter.names)
}
inline void Filter::set_names(int index, const char* value, size_t size) {
  names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.Filter.names)
}
inline std::string* Filter::_internal_add_names() {
  return names_.Add();
}
inline void Filter::add_names(const std::string& value) {
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.Filter.names)
}
inline void Filter::add_names(std::string&& value) {
  names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.Filter.names)
}
inline void Filter::add_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.Filter.names)
}
inline void Filter::add_names(const char* value, size_t size) {
  names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.Filter.names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::names() const {
  // @@protoc_insertion_point(field_list:v1.model.Filter.names)
  return names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_names() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Filter.names)
  return &names_;
}

// repeated string types = 3 [json_name = "types"];
inline int Filter::_internal_types_size() const {
  return types_.size();
}
inline int Filter::types_size() const {
  return _internal_types_size();
}
inline void Filter::clear_types() {
  types_.Clear();
}
inline std::string* Filter::add_types() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.Filter.types)
  return _internal_add_types();
}
inline const std::string& Filter::_internal_types(int index) const {
  return types_.Get(index);
}
inline const std::string& Filter::types(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Filter.types)
  return _internal_types(index);
}
inline std::string* Filter::mutable_types(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Filter.types)
  return types_.Mutable(index);
}
inline void Filter::set_types(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.types)
  types_.Mutable(index)->assign(value);
}
inline void Filter::set_types(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.types)
  types_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.Filter.types)
}
inline void Filter::set_types(int index, const char* value, size_t size) {
  types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.Filter.types)
}
inline std::string* Filter::_internal_add_types() {
  return types_.Add();
}
inline void Filter::add_types(const std::string& value) {
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.Filter.types)
}
inline void Filter::add_types(std::string&& value) {
  types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.Filter.types)
}
inline void Filter::add_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.Filter.types)
}
inline void Filter::add_types(const char* value, size_t size) {
  types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.Filter.types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::types() const {
  // @@protoc_insertion_point(field_list:v1.model.Filter.types)
  return types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_types() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Filter.types)
  return &types_;
}

// repeated string deviceIds = 4 [json_name = "deviceIds"];
inline int Filter::_internal_deviceids_size() const {
  return deviceids_.size();
}
inline int Filter::deviceids_size() const {
  return _internal_deviceids_size();
}
inline void Filter::clear_deviceids() {
  deviceids_.Clear();
}
inline std::string* Filter::add_deviceids() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.Filter.deviceIds)
  return _internal_add_deviceids();
}
inline const std::string& Filter::_internal_deviceids(int index) const {
  return deviceids_.Get(index);
}
inline const std::string& Filter::deviceids(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Filter.deviceIds)
  return _internal_deviceids(index);
}
inline std::string* Filter::mutable_deviceids(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Filter.deviceIds)
  return deviceids_.Mutable(index);
}
inline void Filter::set_deviceids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.deviceIds)
  deviceids_.Mutable(index)->assign(value);
}
inline void Filter::set_deviceids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.deviceIds)
  deviceids_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_deviceids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deviceids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.Filter.deviceIds)
}
inline void Filter::set_deviceids(int index, const char* value, size_t size) {
  deviceids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.Filter.deviceIds)
}
inline std::string* Filter::_internal_add_deviceids() {
  return deviceids_.Add();
}
inline void Filter::add_deviceids(const std::string& value) {
  deviceids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.Filter.deviceIds)
}
inline void Filter::add_deviceids(std::string&& value) {
  deviceids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.Filter.deviceIds)
}
inline void Filter::add_deviceids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deviceids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.Filter.deviceIds)
}
inline void Filter::add_deviceids(const char* value, size_t size) {
  deviceids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.Filter.deviceIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::deviceids() const {
  // @@protoc_insertion_point(field_list:v1.model.Filter.deviceIds)
  return deviceids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_deviceids() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Filter.deviceIds)
  return &deviceids_;
}

// map<string, string> notTags = 5 [json_name = "notTags"];
inline int Filter::_internal_nottags_size() const {
  return nottags_.size();
}
inline int Filter::nottags_size() const {
  return _internal_nottags_size();
}
inline void Filter::clear_nottags() {
  nottags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Filter::_internal_nottags() const {
  return nottags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Filter::nottags() const {
  // @@protoc_insertion_point(field_map:v1.model.Filter.notTags)
  return _internal_nottags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Filter::_internal_mutable_nottags() {
  return nottags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Filter::mutable_nottags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.Filter.notTags)
  return _internal_mutable_nottags();
}

// repeated string notNames = 6 [json_name = "notNames"];
inline int Filter::_internal_notnames_size() const {
  return notnames_.size();
}
inline int Filter::notnames_size() const {
  return _internal_notnames_size();
}
inline void Filter::clear_notnames() {
  notnames_.Clear();
}
inline std::string* Filter::add_notnames() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.Filter.notNames)
  return _internal_add_notnames();
}
inline const std::string& Filter::_internal_notnames(int index) const {
  return notnames_.Get(index);
}
inline const std::string& Filter::notnames(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Filter.notNames)
  return _internal_notnames(index);
}
inline std::string* Filter::mutable_notnames(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Filter.notNames)
  return notnames_.Mutable(index);
}
inline void Filter::set_notnames(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.notNames)
  notnames_.Mutable(index)->assign(value);
}
inline void Filter::set_notnames(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.notNames)
  notnames_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_notnames(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notnames_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.Filter.notNames)
}
inline void Filter::set_notnames(int index, const char* value, size_t size) {
  notnames_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.Filter.notNames)
}
inline std::string* Filter::_internal_add_notnames() {
  return notnames_.Add();
}
inline void Filter::add_notnames(const std::string& value) {
  notnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.Filter.notNames)
}
inline void Filter::add_notnames(std::string&& value) {
  notnames_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.Filter.notNames)
}
inline void Filter::add_notnames(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  notnames_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.Filter.notNames)
}
inline void Filter::add_notnames(const char* value, size_t size) {
  notnames_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.Filter.notNames)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::notnames() const {
  // @@protoc_insertion_point(field_list:v1.model.Filter.notNames)
  return notnames_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_notnames() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Filter.notNames)
  return &notnames_;
}

// repeated string agentIds = 7 [json_name = "agentIds"];
inline int Filter::_internal_agentids_size() const {
  return agentids_.size();
}
inline int Filter::agentids_size() const {
  return _internal_agentids_size();
}
inline void Filter::clear_agentids() {
  agentids_.Clear();
}
inline std::string* Filter::add_agentids() {
  // @@protoc_insertion_point(field_add_mutable:v1.model.Filter.agentIds)
  return _internal_add_agentids();
}
inline const std::string& Filter::_internal_agentids(int index) const {
  return agentids_.Get(index);
}
inline const std::string& Filter::agentids(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.Filter.agentIds)
  return _internal_agentids(index);
}
inline std::string* Filter::mutable_agentids(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.Filter.agentIds)
  return agentids_.Mutable(index);
}
inline void Filter::set_agentids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.agentIds)
  agentids_.Mutable(index)->assign(value);
}
inline void Filter::set_agentids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.model.Filter.agentIds)
  agentids_.Mutable(index)->assign(std::move(value));
}
inline void Filter::set_agentids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agentids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.model.Filter.agentIds)
}
inline void Filter::set_agentids(int index, const char* value, size_t size) {
  agentids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.model.Filter.agentIds)
}
inline std::string* Filter::_internal_add_agentids() {
  return agentids_.Add();
}
inline void Filter::add_agentids(const std::string& value) {
  agentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.model.Filter.agentIds)
}
inline void Filter::add_agentids(std::string&& value) {
  agentids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.model.Filter.agentIds)
}
inline void Filter::add_agentids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  agentids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.model.Filter.agentIds)
}
inline void Filter::add_agentids(const char* value, size_t size) {
  agentids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.model.Filter.agentIds)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Filter::agentids() const {
  // @@protoc_insertion_point(field_list:v1.model.Filter.agentIds)
  return agentids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Filter::mutable_agentids() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.Filter.agentIds)
  return &agentids_;
}

// -------------------------------------------------------------------

// ViewConfiguration

// string streamName = 1 [json_name = "streamName"];
inline void ViewConfiguration::clear_streamname() {
  streamname_.ClearToEmpty();
}
inline const std::string& ViewConfiguration::streamname() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewConfiguration.streamName)
  return _internal_streamname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewConfiguration::set_streamname(ArgT0&& arg0, ArgT... args) {
 
 streamname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewConfiguration.streamName)
}
inline std::string* ViewConfiguration::mutable_streamname() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewConfiguration.streamName)
  return _internal_mutable_streamname();
}
inline const std::string& ViewConfiguration::_internal_streamname() const {
  return streamname_.Get();
}
inline void ViewConfiguration::_internal_set_streamname(const std::string& value) {
  
  streamname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewConfiguration::_internal_mutable_streamname() {
  
  return streamname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewConfiguration::release_streamname() {
  // @@protoc_insertion_point(field_release:v1.model.ViewConfiguration.streamName)
  return streamname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewConfiguration::set_allocated_streamname(std::string* streamname) {
  if (streamname != nullptr) {
    
  } else {
    
  }
  streamname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewConfiguration.streamName)
}

// string type = 2 [json_name = "type"];
inline void ViewConfiguration::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ViewConfiguration::type() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewConfiguration.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ViewConfiguration::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.ViewConfiguration.type)
}
inline std::string* ViewConfiguration::mutable_type() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewConfiguration.type)
  return _internal_mutable_type();
}
inline const std::string& ViewConfiguration::_internal_type() const {
  return type_.Get();
}
inline void ViewConfiguration::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ViewConfiguration::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ViewConfiguration::release_type() {
  // @@protoc_insertion_point(field_release:v1.model.ViewConfiguration.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ViewConfiguration::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewConfiguration.type)
}

// .google.protobuf.Struct configuration = 3 [json_name = "configuration"];
inline bool ViewConfiguration::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool ViewConfiguration::has_configuration() const {
  return _internal_has_configuration();
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ViewConfiguration::_internal_configuration() const {
  const PROTOBUF_NAMESPACE_ID::Struct* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Struct&>(
      PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& ViewConfiguration::configuration() const {
  // @@protoc_insertion_point(field_get:v1.model.ViewConfiguration.configuration)
  return _internal_configuration();
}
inline void ViewConfiguration::unsafe_arena_set_allocated_configuration(
    PROTOBUF_NAMESPACE_ID::Struct* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.ViewConfiguration.configuration)
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewConfiguration::release_configuration() {
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = configuration_;
  configuration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewConfiguration::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.model.ViewConfiguration.configuration)
  
  PROTOBUF_NAMESPACE_ID::Struct* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewConfiguration::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* ViewConfiguration::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.model.ViewConfiguration.configuration)
  return _internal_mutable_configuration();
}
inline void ViewConfiguration::set_allocated_configuration(PROTOBUF_NAMESPACE_ID::Struct* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.model.ViewConfiguration.configuration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::v1::model::ViewMetadata_LayoutType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::ViewMetadata_LayoutType>() {
  return ::v1::model::ViewMetadata_LayoutType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fviews_2eproto

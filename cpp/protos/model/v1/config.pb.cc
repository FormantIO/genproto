// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/config.proto

#include "protos/model/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v1 {
namespace model {
PROTOBUF_CONSTEXPR AgentConfigurationStore::AgentConfigurationStore(
    ::_pbi::ConstantInitialized)
  : agent_version_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , configuration_(nullptr)
  , feature_set_(nullptr){}
struct AgentConfigurationStoreDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentConfigurationStoreDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentConfigurationStoreDefaultTypeInternal() {}
  union {
    AgentConfigurationStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentConfigurationStoreDefaultTypeInternal _AgentConfigurationStore_default_instance_;
PROTOBUF_CONSTEXPR AgentFeatureSet::AgentFeatureSet(
    ::_pbi::ConstantInitialized)
  : telemetry_(false)
  , internal_telemetry_(false)
  , teleop_(false)
  , custom_events_(false)
  , triggered_events_(false)
  , ssh_(false)
  , port_forwarding_(false)
  , commands_(false)
  , interventions_(false)
  , on_demand_(false)
  , app_config_(false)
  , blob_storage_(false){}
struct AgentFeatureSetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentFeatureSetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentFeatureSetDefaultTypeInternal() {}
  union {
    AgentFeatureSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentFeatureSetDefaultTypeInternal _AgentFeatureSet_default_instance_;
PROTOBUF_CONSTEXPR AgentConfiguration::AgentConfiguration(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , document_(nullptr){}
struct AgentConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentConfigurationDefaultTypeInternal() {}
  union {
    AgentConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentConfigurationDefaultTypeInternal _AgentConfiguration_default_instance_;
PROTOBUF_CONSTEXPR AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgentConfigurationDocument_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal _AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AgentConfigurationDocument::AgentConfigurationDocument(
    ::_pbi::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , adapters_()
  , telemetry_(nullptr)
  , resources_(nullptr)
  , application_(nullptr)
  , teleop_(nullptr)
  , port_forwarding_(nullptr)
  , blob_data_(nullptr)
  , diagnostics_(nullptr)
  , terminal_access_(nullptr)
  , version_(int64_t{0}){}
struct AgentConfigurationDocumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AgentConfigurationDocumentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AgentConfigurationDocumentDefaultTypeInternal() {}
  union {
    AgentConfigurationDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AgentConfigurationDocumentDefaultTypeInternal _AgentConfigurationDocument_default_instance_;
PROTOBUF_CONSTEXPR AdapterConfiguration::AdapterConfiguration(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , exec_command_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct AdapterConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AdapterConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AdapterConfigurationDefaultTypeInternal() {}
  union {
    AdapterConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AdapterConfigurationDefaultTypeInternal _AdapterConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TeleopConfiguration::TeleopConfiguration(
    ::_pbi::ConstantInitialized)
  : ros_streams_()
  , custom_streams_()
  , hardware_streams_(){}
struct TeleopConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopConfigurationDefaultTypeInternal() {}
  union {
    TeleopConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopConfigurationDefaultTypeInternal _TeleopConfiguration_default_instance_;
PROTOBUF_CONSTEXPR PortForwardingConfiguration::PortForwardingConfiguration(
    ::_pbi::ConstantInitialized)
  : enabled_(nullptr){}
struct PortForwardingConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PortForwardingConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PortForwardingConfigurationDefaultTypeInternal() {}
  union {
    PortForwardingConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PortForwardingConfigurationDefaultTypeInternal _PortForwardingConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(
    ::_pbi::ConstantInitialized)
  : topic_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , audio_codec_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quality_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , base_reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , local_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , topic_type_(0)

  , mode_(0)

  , encode_video_(false){}
struct TeleopRosStreamConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopRosStreamConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopRosStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopRosStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopRosStreamConfigurationDefaultTypeInternal _TeleopRosStreamConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rtc_stream_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hw_descriptor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quality_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hardware_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_cam_username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_cam_password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mode_(0)

  , rtsp_encoding_needed_(false)
  , is_onvif_(false){}
struct TeleopHardwareStreamConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopHardwareStreamConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopHardwareStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopHardwareStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopHardwareStreamConfigurationDefaultTypeInternal _TeleopHardwareStreamConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rtc_stream_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quality_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mode_(0)

  , encode_video_(false){}
struct TeleopCustomStreamConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopCustomStreamConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopCustomStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopCustomStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopCustomStreamConfigurationDefaultTypeInternal _TeleopCustomStreamConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TelemetryConfiguration::TelemetryConfiguration(
    ::_pbi::ConstantInitialized)
  : streams_()
  , ros_(nullptr){}
struct TelemetryConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TelemetryConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TelemetryConfigurationDefaultTypeInternal() {}
  union {
    TelemetryConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TelemetryConfigurationDefaultTypeInternal _TelemetryConfiguration_default_instance_;
PROTOBUF_CONSTEXPR ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ApplicationConfiguration_ConfigurationMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal _ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ApplicationConfiguration::ApplicationConfiguration(
    ::_pbi::ConstantInitialized)
  : configuration_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ApplicationConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ApplicationConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ApplicationConfigurationDefaultTypeInternal() {}
  union {
    ApplicationConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ApplicationConfigurationDefaultTypeInternal _ApplicationConfiguration_default_instance_;
PROTOBUF_CONSTEXPR ResourcesConfiguration::ResourcesConfiguration(
    ::_pbi::ConstantInitialized)
  : disk_(nullptr)
  , stream_throttle_hz_(nullptr){}
struct ResourcesConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourcesConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourcesConfigurationDefaultTypeInternal() {}
  union {
    ResourcesConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourcesConfigurationDefaultTypeInternal _ResourcesConfiguration_default_instance_;
PROTOBUF_CONSTEXPR DiskConfiguration::DiskConfiguration(
    ::_pbi::ConstantInitialized)
  : buffer_size_(int64_t{0})
  , on_demand_buffer_size_(int64_t{0}){}
struct DiskConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiskConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiskConfigurationDefaultTypeInternal() {}
  union {
    DiskConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiskConfigurationDefaultTypeInternal _DiskConfiguration_default_instance_;
PROTOBUF_CONSTEXPR ROSConfiguration::ROSConfiguration(
    ::_pbi::ConstantInitialized)
  : world_reference_frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ROSConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROSConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROSConfigurationDefaultTypeInternal() {}
  union {
    ROSConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROSConfigurationDefaultTypeInternal _ROSConfiguration_default_instance_;
PROTOBUF_CONSTEXPR StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamConfiguration_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal _StreamConfiguration_TagsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR StreamConfiguration::StreamConfiguration(
    ::_pbi::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , quality_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , throttle_hz_(nullptr)
  , disabled_(nullptr)
  , on_demand_(nullptr)
  , transform_(nullptr)
  , _oneof_case_{}{}
struct StreamConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamConfigurationDefaultTypeInternal() {}
  union {
    StreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamConfigurationDefaultTypeInternal _StreamConfiguration_default_instance_;
PROTOBUF_CONSTEXPR StreamTransformConfiguration::StreamTransformConfiguration(
    ::_pbi::ConstantInitialized)
  : video_encoding_enabled_(nullptr){}
struct StreamTransformConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StreamTransformConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StreamTransformConfigurationDefaultTypeInternal() {}
  union {
    StreamTransformConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StreamTransformConfigurationDefaultTypeInternal _StreamTransformConfiguration_default_instance_;
PROTOBUF_CONSTEXPR BlobData::BlobData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct BlobDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BlobDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BlobDataDefaultTypeInternal() {}
  union {
    BlobData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BlobDataDefaultTypeInternal _BlobData_default_instance_;
PROTOBUF_CONSTEXPR Diagnostics::Diagnostics(
    ::_pbi::ConstantInitialized)
  : report_logs_(nullptr)
  , report_metrics_(nullptr){}
struct DiagnosticsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DiagnosticsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DiagnosticsDefaultTypeInternal() {}
  union {
    Diagnostics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
PROTOBUF_CONSTEXPR Custom::Custom(
    ::_pbi::ConstantInitialized){}
struct CustomDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CustomDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CustomDefaultTypeInternal() {}
  union {
    Custom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CustomDefaultTypeInternal _Custom_default_instance_;
PROTOBUF_CONSTEXPR Hardware::Hardware(
    ::_pbi::ConstantInitialized)
  : hw_descriptor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , audio_hw_descriptor_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hardware_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_cam_username_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , ip_cam_password_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , rtsp_encoding_needed_(false)
  , is_onvif_(false){}
struct HardwareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HardwareDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HardwareDefaultTypeInternal() {}
  union {
    Hardware _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HardwareDefaultTypeInternal _Hardware_default_instance_;
PROTOBUF_CONSTEXPR DirectoryWatch::DirectoryWatch(
    ::_pbi::ConstantInitialized)
  : directory_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , extension_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_type_(0)

  , remote_agent_(false){}
struct DirectoryWatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DirectoryWatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DirectoryWatchDefaultTypeInternal() {}
  union {
    DirectoryWatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DirectoryWatchDefaultTypeInternal _DirectoryWatch_default_instance_;
PROTOBUF_CONSTEXPR FileTail::FileTail(
    ::_pbi::ConstantInitialized)
  : filename_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_key_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_format_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , regex_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , file_format_(0)
{}
struct FileTailDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileTailDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileTailDefaultTypeInternal() {}
  union {
    FileTail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileTailDefaultTypeInternal _FileTail_default_instance_;
}  // namespace model
}  // namespace v1
static ::_pb::Metadata file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[26];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, agent_version_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, configuration_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, feature_set_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, internal_telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, teleop_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, custom_events_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, triggered_events_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, ssh_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, port_forwarding_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, commands_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, interventions_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, on_demand_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, app_config_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, blob_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, document_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, version_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, resources_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, application_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, teleop_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, port_forwarding_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, blob_data_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, diagnostics_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, terminal_access_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, adapters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, file_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, exec_command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, ros_streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, custom_streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, hardware_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::PortForwardingConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::PortForwardingConfiguration, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, encode_video_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, audio_codec_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, base_reference_frame_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, local_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, rtc_stream_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, rtsp_encoding_needed_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, is_onvif_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, ip_cam_username_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, ip_cam_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, rtc_stream_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, encode_video_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, ros_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, configuration_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, disk_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, stream_throttle_hz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, on_demand_buffer_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, world_reference_frame_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, tags_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, throttle_hz_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, disabled_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, on_demand_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, transform_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamTransformConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamTransformConfiguration, video_encoding_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::BlobData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::BlobData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, report_logs_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, report_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Custom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, audio_hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, rtsp_encoding_needed_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, is_onvif_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, ip_cam_username_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, ip_cam_password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, directory_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, extension_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, file_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, remote_agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, filename_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, file_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, regex_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v1::model::AgentConfigurationStore)},
  { 9, -1, -1, sizeof(::v1::model::AgentFeatureSet)},
  { 27, -1, -1, sizeof(::v1::model::AgentConfiguration)},
  { 36, 44, -1, sizeof(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse)},
  { 46, -1, -1, sizeof(::v1::model::AgentConfigurationDocument)},
  { 63, -1, -1, sizeof(::v1::model::AdapterConfiguration)},
  { 73, -1, -1, sizeof(::v1::model::TeleopConfiguration)},
  { 82, -1, -1, sizeof(::v1::model::PortForwardingConfiguration)},
  { 89, -1, -1, sizeof(::v1::model::TeleopRosStreamConfiguration)},
  { 103, -1, -1, sizeof(::v1::model::TeleopHardwareStreamConfiguration)},
  { 119, -1, -1, sizeof(::v1::model::TeleopCustomStreamConfiguration)},
  { 130, -1, -1, sizeof(::v1::model::TelemetryConfiguration)},
  { 138, 146, -1, sizeof(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse)},
  { 148, -1, -1, sizeof(::v1::model::ApplicationConfiguration)},
  { 155, -1, -1, sizeof(::v1::model::ResourcesConfiguration)},
  { 163, -1, -1, sizeof(::v1::model::DiskConfiguration)},
  { 171, -1, -1, sizeof(::v1::model::ROSConfiguration)},
  { 178, 186, -1, sizeof(::v1::model::StreamConfiguration_TagsEntry_DoNotUse)},
  { 188, -1, -1, sizeof(::v1::model::StreamConfiguration)},
  { 209, -1, -1, sizeof(::v1::model::StreamTransformConfiguration)},
  { 216, -1, -1, sizeof(::v1::model::BlobData)},
  { 223, -1, -1, sizeof(::v1::model::Diagnostics)},
  { 231, -1, -1, sizeof(::v1::model::Custom)},
  { 237, -1, -1, sizeof(::v1::model::Hardware)},
  { 250, -1, -1, sizeof(::v1::model::DirectoryWatch)},
  { 260, -1, -1, sizeof(::v1::model::FileTail)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v1::model::_AgentConfigurationStore_default_instance_._instance,
  &::v1::model::_AgentFeatureSet_default_instance_._instance,
  &::v1::model::_AgentConfiguration_default_instance_._instance,
  &::v1::model::_AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_._instance,
  &::v1::model::_AgentConfigurationDocument_default_instance_._instance,
  &::v1::model::_AdapterConfiguration_default_instance_._instance,
  &::v1::model::_TeleopConfiguration_default_instance_._instance,
  &::v1::model::_PortForwardingConfiguration_default_instance_._instance,
  &::v1::model::_TeleopRosStreamConfiguration_default_instance_._instance,
  &::v1::model::_TeleopHardwareStreamConfiguration_default_instance_._instance,
  &::v1::model::_TeleopCustomStreamConfiguration_default_instance_._instance,
  &::v1::model::_TelemetryConfiguration_default_instance_._instance,
  &::v1::model::_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_._instance,
  &::v1::model::_ApplicationConfiguration_default_instance_._instance,
  &::v1::model::_ResourcesConfiguration_default_instance_._instance,
  &::v1::model::_DiskConfiguration_default_instance_._instance,
  &::v1::model::_ROSConfiguration_default_instance_._instance,
  &::v1::model::_StreamConfiguration_TagsEntry_DoNotUse_default_instance_._instance,
  &::v1::model::_StreamConfiguration_default_instance_._instance,
  &::v1::model::_StreamTransformConfiguration_default_instance_._instance,
  &::v1::model::_BlobData_default_instance_._instance,
  &::v1::model::_Diagnostics_default_instance_._instance,
  &::v1::model::_Custom_default_instance_._instance,
  &::v1::model::_Hardware_default_instance_._instance,
  &::v1::model::_DirectoryWatch_default_instance_._instance,
  &::v1::model::_FileTail_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protos/model/v1/config.proto\022\010v1.model"
  "\032\031protos/model/v1/ros.proto\032\036google/prot"
  "obuf/wrappers.proto\"\276\001\n\027AgentConfigurati"
  "onStore\022#\n\ragent_version\030\001 \001(\tR\014agentVer"
  "sion\022B\n\rconfiguration\030\002 \001(\0132\034.v1.model.A"
  "gentConfigurationR\rconfiguration\022:\n\013feat"
  "ure_set\030\003 \001(\0132\031.v1.model.AgentFeatureSet"
  "R\nfeatureSet\"\242\003\n\017AgentFeatureSet\022\034\n\ttele"
  "metry\030\001 \001(\010R\ttelemetry\022-\n\022internal_telem"
  "etry\030\002 \001(\010R\021internalTelemetry\022\026\n\006teleop\030"
  "\003 \001(\010R\006teleop\022#\n\rcustom_events\030\004 \001(\010R\014cu"
  "stomEvents\022)\n\020triggered_events\030\005 \001(\010R\017tr"
  "iggeredEvents\022\020\n\003ssh\030\006 \001(\010R\003ssh\022\'\n\017port_"
  "forwarding\030\007 \001(\010R\016portForwarding\022\032\n\010comm"
  "ands\030\010 \001(\010R\010commands\022$\n\rinterventions\030\t "
  "\001(\010R\rinterventions\022\033\n\ton_demand\030\n \001(\010R\010o"
  "nDemand\022\035\n\napp_config\030\013 \001(\010R\tappConfig\022!"
  "\n\014blob_storage\030\014 \001(\010R\013blobStorage\"z\n\022Age"
  "ntConfiguration\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030"
  "\002 \001(\tR\004name\022@\n\010document\030\003 \001(\0132$.v1.model"
  ".AgentConfigurationDocumentR\010document\"\353\005"
  "\n\032AgentConfigurationDocument\022\030\n\007version\030"
  "\001 \001(\003R\007version\022B\n\004tags\030\002 \003(\0132..v1.model."
  "AgentConfigurationDocument.TagsEntryR\004ta"
  "gs\022>\n\ttelemetry\030\003 \001(\0132 .v1.model.Telemet"
  "ryConfigurationR\ttelemetry\022>\n\tresources\030"
  "\004 \001(\0132 .v1.model.ResourcesConfigurationR"
  "\tresources\022D\n\013application\030\005 \001(\0132\".v1.mod"
  "el.ApplicationConfigurationR\013application"
  "\0225\n\006teleop\030\006 \001(\0132\035.v1.model.TeleopConfig"
  "urationR\006teleop\022N\n\017port_forwarding\030\007 \001(\013"
  "2%.v1.model.PortForwardingConfigurationR"
  "\016portForwarding\022/\n\tblob_data\030\010 \001(\0132\022.v1."
  "model.BlobDataR\010blobData\0227\n\013diagnostics\030"
  "\t \001(\0132\025.v1.model.DiagnosticsR\013diagnostic"
  "s\022C\n\017terminal_access\030\n \001(\0132\032.google.prot"
  "obuf.BoolValueR\016terminalAccess\022:\n\010adapte"
  "rs\030\013 \003(\0132\036.v1.model.AdapterConfiguration"
  "R\010adapters\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003ke"
  "y\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"v\n\024AdapterCo"
  "nfiguration\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001("
  "\tR\004name\022\027\n\007file_id\030\003 \001(\tR\006fileId\022!\n\014exec"
  "_command\030\004 \001(\tR\013execCommand\"\210\002\n\023TeleopCo"
  "nfiguration\022G\n\013ros_streams\030\001 \003(\0132&.v1.mo"
  "del.TeleopRosStreamConfigurationR\nrosStr"
  "eams\022P\n\016custom_streams\030\002 \003(\0132).v1.model."
  "TeleopCustomStreamConfigurationR\rcustomS"
  "treams\022V\n\020hardware_streams\030\003 \003(\0132+.v1.mo"
  "del.TeleopHardwareStreamConfigurationR\017h"
  "ardwareStreams\"S\n\033PortForwardingConfigur"
  "ation\0224\n\007enabled\030\001 \001(\0132\032.google.protobuf"
  ".BoolValueR\007enabled\"\317\002\n\034TeleopRosStreamC"
  "onfiguration\022\035\n\ntopic_name\030\001 \001(\tR\ttopicN"
  "ame\0225\n\ntopic_type\030\002 \001(\0162\026.v1.model.ROSTo"
  "picTypeR\ttopicType\022(\n\004mode\030\003 \001(\0162\024.v1.mo"
  "del.TeleopModeR\004mode\022!\n\014encode_video\030\004 \001"
  "(\010R\013encodeVideo\022\037\n\013audio_codec\030\005 \001(\tR\nau"
  "dioCodec\022\030\n\007quality\030\006 \001(\tR\007quality\0220\n\024ba"
  "se_reference_frame\030\007 \001(\tR\022baseReferenceF"
  "rame\022\037\n\013local_frame\030\010 \001(\tR\nlocalFrame\"\212\003"
  "\n!TeleopHardwareStreamConfiguration\022\022\n\004n"
  "ame\030\001 \001(\tR\004name\022&\n\017rtc_stream_type\030\002 \001(\t"
  "R\rrtcStreamType\022(\n\004mode\030\003 \001(\0162\024.v1.model"
  ".TeleopModeR\004mode\022#\n\rhw_descriptor\030\004 \001(\t"
  "R\014hwDescriptor\022\030\n\007quality\030\005 \001(\tR\007quality"
  "\022#\n\rhardware_type\030\006 \001(\tR\014hardwareType\0220\n"
  "\024rtsp_encoding_needed\030\007 \001(\010R\022rtspEncodin"
  "gNeeded\022\031\n\010is_onvif\030\010 \001(\010R\007isOnvif\022&\n\017ip"
  "_cam_username\030\t \001(\tR\ripCamUsername\022&\n\017ip"
  "_cam_password\030\n \001(\tR\ripCamPassword\"\304\001\n\037T"
  "eleopCustomStreamConfiguration\022\022\n\004name\030\001"
  " \001(\tR\004name\022&\n\017rtc_stream_type\030\002 \001(\tR\rrtc"
  "StreamType\022(\n\004mode\030\003 \001(\0162\024.v1.model.Tele"
  "opModeR\004mode\022!\n\014encode_video\030\004 \001(\010R\013enco"
  "deVideo\022\030\n\007quality\030\005 \001(\tR\007quality\"\177\n\026Tel"
  "emetryConfiguration\0227\n\007streams\030\001 \003(\0132\035.v"
  "1.model.StreamConfigurationR\007streams\022,\n\003"
  "ros\030\002 \001(\0132\032.v1.model.ROSConfigurationR\003r"
  "os\"\306\001\n\030ApplicationConfiguration\022e\n\021confi"
  "guration_map\030\001 \003(\01328.v1.model.Applicatio"
  "nConfiguration.ConfigurationMapEntryR\020co"
  "nfigurationMap\032C\n\025ConfigurationMapEntry\022"
  "\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:"
  "\0028\001\"\225\001\n\026ResourcesConfiguration\022/\n\004disk\030\001"
  " \001(\0132\033.v1.model.DiskConfigurationR\004disk\022"
  "J\n\022stream_throttle_hz\030\002 \001(\0132\034.google.pro"
  "tobuf.DoubleValueR\020streamThrottleHz\"g\n\021D"
  "iskConfiguration\022\037\n\013buffer_size\030\001 \001(\003R\nb"
  "ufferSize\0221\n\025on_demand_buffer_size\030\002 \001(\003"
  "R\022onDemandBufferSize\"K\n\020ROSConfiguration"
  "\0227\n\030world_reference_frame_id\030\001 \001(\tR\025worl"
  "dReferenceFrameId\"\335\006\n\023StreamConfiguratio"
  "n\022\022\n\004name\030\001 \001(\tR\004name\022;\n\004tags\030\002 \003(\0132\'.v1"
  ".model.StreamConfiguration.TagsEntryR\004ta"
  "gs\0221\n\tros_topic\030\003 \001(\0132\022.v1.model.ROSTopi"
  "cH\000R\010rosTopic\022F\n\020ros_localization\030\004 \001(\0132"
  "\031.v1.model.ROSLocalizationH\000R\017rosLocaliz"
  "ation\022C\n\017directory_watch\030\005 \001(\0132\030.v1.mode"
  "l.DirectoryWatchH\000R\016directoryWatch\0221\n\tfi"
  "le_tail\030\006 \001(\0132\022.v1.model.FileTailH\000R\010fil"
  "eTail\022J\n\022ros_transform_tree\030\007 \001(\0132\032.v1.m"
  "odel.ROSTransformTreeH\000R\020rosTransformTre"
  "e\022*\n\006custom\030\t \001(\0132\020.v1.model.CustomH\000R\006c"
  "ustom\0220\n\010hardware\030\n \001(\0132\022.v1.model.Hardw"
  "areH\000R\010hardware\022=\n\013throttle_hz\030\010 \001(\0132\034.g"
  "oogle.protobuf.DoubleValueR\nthrottleHz\0226"
  "\n\010disabled\030\023 \001(\0132\032.google.protobuf.BoolV"
  "alueR\010disabled\0227\n\ton_demand\030\024 \001(\0132\032.goog"
  "le.protobuf.BoolValueR\010onDemand\022D\n\ttrans"
  "form\030\025 \001(\0132&.v1.model.StreamTransformCon"
  "figurationR\ttransform\022\030\n\007quality\030\026 \001(\tR\007"
  "quality\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
  "\n\005value\030\002 \001(\tR\005value:\0028\001B\017\n\rconfiguratio"
  "n\"p\n\034StreamTransformConfiguration\022P\n\026vid"
  "eo_encoding_enabled\030\001 \001(\0132\032.google.proto"
  "buf.BoolValueR\024videoEncodingEnabled\"\036\n\010B"
  "lobData\022\022\n\004data\030\001 \001(\tR\004data\"\215\001\n\013Diagnost"
  "ics\022;\n\013report_logs\030\001 \001(\0132\032.google.protob"
  "uf.BoolValueR\nreportLogs\022A\n\016report_metri"
  "cs\030\002 \001(\0132\032.google.protobuf.BoolValueR\rre"
  "portMetrics\"\010\n\006Custom\"\241\002\n\010Hardware\022#\n\rhw"
  "_descriptor\030\001 \001(\tR\014hwDescriptor\022.\n\023audio"
  "_hw_descriptor\030\003 \001(\tR\021audioHwDescriptor\022"
  "#\n\rhardware_type\030\004 \001(\tR\014hardwareType\0220\n\024"
  "rtsp_encoding_needed\030\005 \001(\010R\022rtspEncoding"
  "Needed\022\031\n\010is_onvif\030\006 \001(\010R\007isOnvif\022&\n\017ip_"
  "cam_username\030\007 \001(\tR\ripCamUsername\022&\n\017ip_"
  "cam_password\030\010 \001(\tR\ripCamPassword\"\240\001\n\016Di"
  "rectoryWatch\022\034\n\tdirectory\030\001 \001(\tR\tdirecto"
  "ry\022\034\n\textension\030\002 \001(\tR\textension\022/\n\tfile"
  "_type\030\003 \001(\0162\022.v1.model.FileTypeR\010fileTyp"
  "e\022!\n\014remote_agent\030\004 \001(\010R\013remoteAgent\"\257\001\n"
  "\010FileTail\022\032\n\010filename\030\001 \001(\tR\010filename\0225\n"
  "\013file_format\030\002 \001(\0162\024.v1.model.FileFormat"
  "R\nfileFormat\022\031\n\010time_key\030\003 \001(\tR\007timeKey\022"
  "\037\n\013time_format\030\004 \001(\tR\ntimeFormat\022\024\n\005rege"
  "x\030\005 \001(\tR\005regex*&\n\nTeleopMode\022\013\n\007COMMAND\020"
  "\000\022\013\n\007OBSERVE\020\001*&\n\nFileFormat\022\016\n\nPLAIN_TE"
  "XT\020\000\022\010\n\004JSON\020\001*;\n\010FileType\022\010\n\004FILE\020\000\022\t\n\005"
  "IMAGE\020\001\022\017\n\013POINT_CLOUD\020\004\022\t\n\005VIDEO\020\005B+Z)g"
  "ithub.com/FormantIO/genproto/go/v1/model"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto = {
    false, false, 5648, descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto,
    "protos/model/v1/config.proto",
    &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps, 2, 26,
    schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets,
    file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto,
    file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fconfig_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleopMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[0];
}
bool TeleopMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[1];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[2];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AgentConfigurationStore::_Internal {
 public:
  static const ::v1::model::AgentConfiguration& configuration(const AgentConfigurationStore* msg);
  static const ::v1::model::AgentFeatureSet& feature_set(const AgentConfigurationStore* msg);
};

const ::v1::model::AgentConfiguration&
AgentConfigurationStore::_Internal::configuration(const AgentConfigurationStore* msg) {
  return *msg->configuration_;
}
const ::v1::model::AgentFeatureSet&
AgentConfigurationStore::_Internal::feature_set(const AgentConfigurationStore* msg) {
  return *msg->feature_set_;
}
AgentConfigurationStore::AgentConfigurationStore(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfigurationStore)
}
AgentConfigurationStore::AgentConfigurationStore(const AgentConfigurationStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    agent_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_agent_version().empty()) {
    agent_version_.Set(from._internal_agent_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::v1::model::AgentConfiguration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_feature_set()) {
    feature_set_ = new ::v1::model::AgentFeatureSet(*from.feature_set_);
  } else {
    feature_set_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfigurationStore)
}

inline void AgentConfigurationStore::SharedCtor() {
agent_version_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  agent_version_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&feature_set_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(feature_set_));
}

AgentConfigurationStore::~AgentConfigurationStore() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfigurationStore)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentConfigurationStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agent_version_.Destroy();
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete feature_set_;
}

void AgentConfigurationStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfigurationStore::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfigurationStore)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && feature_set_ != nullptr) {
    delete feature_set_;
  }
  feature_set_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfigurationStore::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent_version = 1 [json_name = "agentVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_agent_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AgentConfigurationStore.agent_version"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_set(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentConfigurationStore::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfigurationStore)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_version = 1 [json_name = "agentVersion"];
  if (!this->_internal_agent_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_version().data(), static_cast<int>(this->_internal_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfigurationStore.agent_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_version(), target);
  }

  // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::configuration(this),
        _Internal::configuration(this).GetCachedSize(), target, stream);
  }

  // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
  if (this->_internal_has_feature_set()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::feature_set(this),
        _Internal::feature_set(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfigurationStore)
  return target;
}

size_t AgentConfigurationStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfigurationStore)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_version = 1 [json_name = "agentVersion"];
  if (!this->_internal_agent_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_version());
  }

  // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
  if (this->_internal_has_feature_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_set_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentConfigurationStore::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentConfigurationStore::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentConfigurationStore::GetClassData() const { return &_class_data_; }

void AgentConfigurationStore::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentConfigurationStore *>(to)->MergeFrom(
      static_cast<const AgentConfigurationStore &>(from));
}


void AgentConfigurationStore::MergeFrom(const AgentConfigurationStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfigurationStore)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_agent_version().empty()) {
    _internal_set_agent_version(from._internal_agent_version());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::v1::model::AgentConfiguration::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_feature_set()) {
    _internal_mutable_feature_set()->::v1::model::AgentFeatureSet::MergeFrom(from._internal_feature_set());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentConfigurationStore::CopyFrom(const AgentConfigurationStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfigurationStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigurationStore::IsInitialized() const {
  return true;
}

void AgentConfigurationStore::InternalSwap(AgentConfigurationStore* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &agent_version_, lhs_arena,
      &other->agent_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentConfigurationStore, feature_set_)
      + sizeof(AgentConfigurationStore::feature_set_)
      - PROTOBUF_FIELD_OFFSET(AgentConfigurationStore, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationStore::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[0]);
}

// ===================================================================

class AgentFeatureSet::_Internal {
 public:
};

AgentFeatureSet::AgentFeatureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentFeatureSet)
}
AgentFeatureSet::AgentFeatureSet(const AgentFeatureSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&telemetry_, &from.telemetry_,
    static_cast<size_t>(reinterpret_cast<char*>(&blob_storage_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentFeatureSet)
}

inline void AgentFeatureSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blob_storage_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
}

AgentFeatureSet::~AgentFeatureSet() {
  // @@protoc_insertion_point(destructor:v1.model.AgentFeatureSet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentFeatureSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AgentFeatureSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentFeatureSet::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentFeatureSet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&telemetry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blob_storage_) -
      reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentFeatureSet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool telemetry = 1 [json_name = "telemetry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          telemetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          internal_telemetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool teleop = 3 [json_name = "teleop"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          teleop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool custom_events = 4 [json_name = "customEvents"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          custom_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool triggered_events = 5 [json_name = "triggeredEvents"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          triggered_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool ssh = 6 [json_name = "ssh"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          ssh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool port_forwarding = 7 [json_name = "portForwarding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          port_forwarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool commands = 8 [json_name = "commands"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool interventions = 9 [json_name = "interventions"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          interventions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool on_demand = 10 [json_name = "onDemand"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          on_demand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool app_config = 11 [json_name = "appConfig"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          app_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool blob_storage = 12 [json_name = "blobStorage"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          blob_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentFeatureSet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentFeatureSet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool telemetry = 1 [json_name = "telemetry"];
  if (this->_internal_telemetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_telemetry(), target);
  }

  // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
  if (this->_internal_internal_telemetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_internal_telemetry(), target);
  }

  // bool teleop = 3 [json_name = "teleop"];
  if (this->_internal_teleop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_teleop(), target);
  }

  // bool custom_events = 4 [json_name = "customEvents"];
  if (this->_internal_custom_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_custom_events(), target);
  }

  // bool triggered_events = 5 [json_name = "triggeredEvents"];
  if (this->_internal_triggered_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_triggered_events(), target);
  }

  // bool ssh = 6 [json_name = "ssh"];
  if (this->_internal_ssh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_ssh(), target);
  }

  // bool port_forwarding = 7 [json_name = "portForwarding"];
  if (this->_internal_port_forwarding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_port_forwarding(), target);
  }

  // bool commands = 8 [json_name = "commands"];
  if (this->_internal_commands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_commands(), target);
  }

  // bool interventions = 9 [json_name = "interventions"];
  if (this->_internal_interventions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_interventions(), target);
  }

  // bool on_demand = 10 [json_name = "onDemand"];
  if (this->_internal_on_demand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_on_demand(), target);
  }

  // bool app_config = 11 [json_name = "appConfig"];
  if (this->_internal_app_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_app_config(), target);
  }

  // bool blob_storage = 12 [json_name = "blobStorage"];
  if (this->_internal_blob_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_blob_storage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentFeatureSet)
  return target;
}

size_t AgentFeatureSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentFeatureSet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool telemetry = 1 [json_name = "telemetry"];
  if (this->_internal_telemetry() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
  if (this->_internal_internal_telemetry() != 0) {
    total_size += 1 + 1;
  }

  // bool teleop = 3 [json_name = "teleop"];
  if (this->_internal_teleop() != 0) {
    total_size += 1 + 1;
  }

  // bool custom_events = 4 [json_name = "customEvents"];
  if (this->_internal_custom_events() != 0) {
    total_size += 1 + 1;
  }

  // bool triggered_events = 5 [json_name = "triggeredEvents"];
  if (this->_internal_triggered_events() != 0) {
    total_size += 1 + 1;
  }

  // bool ssh = 6 [json_name = "ssh"];
  if (this->_internal_ssh() != 0) {
    total_size += 1 + 1;
  }

  // bool port_forwarding = 7 [json_name = "portForwarding"];
  if (this->_internal_port_forwarding() != 0) {
    total_size += 1 + 1;
  }

  // bool commands = 8 [json_name = "commands"];
  if (this->_internal_commands() != 0) {
    total_size += 1 + 1;
  }

  // bool interventions = 9 [json_name = "interventions"];
  if (this->_internal_interventions() != 0) {
    total_size += 1 + 1;
  }

  // bool on_demand = 10 [json_name = "onDemand"];
  if (this->_internal_on_demand() != 0) {
    total_size += 1 + 1;
  }

  // bool app_config = 11 [json_name = "appConfig"];
  if (this->_internal_app_config() != 0) {
    total_size += 1 + 1;
  }

  // bool blob_storage = 12 [json_name = "blobStorage"];
  if (this->_internal_blob_storage() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentFeatureSet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentFeatureSet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentFeatureSet::GetClassData() const { return &_class_data_; }

void AgentFeatureSet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentFeatureSet *>(to)->MergeFrom(
      static_cast<const AgentFeatureSet &>(from));
}


void AgentFeatureSet::MergeFrom(const AgentFeatureSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentFeatureSet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_telemetry() != 0) {
    _internal_set_telemetry(from._internal_telemetry());
  }
  if (from._internal_internal_telemetry() != 0) {
    _internal_set_internal_telemetry(from._internal_internal_telemetry());
  }
  if (from._internal_teleop() != 0) {
    _internal_set_teleop(from._internal_teleop());
  }
  if (from._internal_custom_events() != 0) {
    _internal_set_custom_events(from._internal_custom_events());
  }
  if (from._internal_triggered_events() != 0) {
    _internal_set_triggered_events(from._internal_triggered_events());
  }
  if (from._internal_ssh() != 0) {
    _internal_set_ssh(from._internal_ssh());
  }
  if (from._internal_port_forwarding() != 0) {
    _internal_set_port_forwarding(from._internal_port_forwarding());
  }
  if (from._internal_commands() != 0) {
    _internal_set_commands(from._internal_commands());
  }
  if (from._internal_interventions() != 0) {
    _internal_set_interventions(from._internal_interventions());
  }
  if (from._internal_on_demand() != 0) {
    _internal_set_on_demand(from._internal_on_demand());
  }
  if (from._internal_app_config() != 0) {
    _internal_set_app_config(from._internal_app_config());
  }
  if (from._internal_blob_storage() != 0) {
    _internal_set_blob_storage(from._internal_blob_storage());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentFeatureSet::CopyFrom(const AgentFeatureSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentFeatureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentFeatureSet::IsInitialized() const {
  return true;
}

void AgentFeatureSet::InternalSwap(AgentFeatureSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentFeatureSet, blob_storage_)
      + sizeof(AgentFeatureSet::blob_storage_)
      - PROTOBUF_FIELD_OFFSET(AgentFeatureSet, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentFeatureSet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[1]);
}

// ===================================================================

class AgentConfiguration::_Internal {
 public:
  static const ::v1::model::AgentConfigurationDocument& document(const AgentConfiguration* msg);
};

const ::v1::model::AgentConfigurationDocument&
AgentConfiguration::_Internal::document(const AgentConfiguration* msg) {
  return *msg->document_;
}
AgentConfiguration::AgentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfiguration)
}
AgentConfiguration::AgentConfiguration(const AgentConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::v1::model::AgentConfigurationDocument(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfiguration)
}

inline void AgentConfiguration::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
document_ = nullptr;
}

AgentConfiguration::~AgentConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AgentConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_.Destroy();
  if (this != internal_default_instance()) delete document_;
}

void AgentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AgentConfiguration.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AgentConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
  if (this->_internal_has_document()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::document(this),
        _Internal::document(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfiguration)
  return target;
}

size_t AgentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
  if (this->_internal_has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentConfiguration::GetClassData() const { return &_class_data_; }

void AgentConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentConfiguration *>(to)->MergeFrom(
      static_cast<const AgentConfiguration &>(from));
}


void AgentConfiguration::MergeFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_document()) {
    _internal_mutable_document()->::v1::model::AgentConfigurationDocument::MergeFrom(from._internal_document());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentConfiguration::CopyFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfiguration::IsInitialized() const {
  return true;
}

void AgentConfiguration::InternalSwap(AgentConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[2]);
}

// ===================================================================

AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse() {}
AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgentConfigurationDocument_TagsEntry_DoNotUse::MergeFrom(const AgentConfigurationDocument_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument_TagsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[3]);
}

// ===================================================================

class AgentConfigurationDocument::_Internal {
 public:
  static const ::v1::model::TelemetryConfiguration& telemetry(const AgentConfigurationDocument* msg);
  static const ::v1::model::ResourcesConfiguration& resources(const AgentConfigurationDocument* msg);
  static const ::v1::model::ApplicationConfiguration& application(const AgentConfigurationDocument* msg);
  static const ::v1::model::TeleopConfiguration& teleop(const AgentConfigurationDocument* msg);
  static const ::v1::model::PortForwardingConfiguration& port_forwarding(const AgentConfigurationDocument* msg);
  static const ::v1::model::BlobData& blob_data(const AgentConfigurationDocument* msg);
  static const ::v1::model::Diagnostics& diagnostics(const AgentConfigurationDocument* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& terminal_access(const AgentConfigurationDocument* msg);
};

const ::v1::model::TelemetryConfiguration&
AgentConfigurationDocument::_Internal::telemetry(const AgentConfigurationDocument* msg) {
  return *msg->telemetry_;
}
const ::v1::model::ResourcesConfiguration&
AgentConfigurationDocument::_Internal::resources(const AgentConfigurationDocument* msg) {
  return *msg->resources_;
}
const ::v1::model::ApplicationConfiguration&
AgentConfigurationDocument::_Internal::application(const AgentConfigurationDocument* msg) {
  return *msg->application_;
}
const ::v1::model::TeleopConfiguration&
AgentConfigurationDocument::_Internal::teleop(const AgentConfigurationDocument* msg) {
  return *msg->teleop_;
}
const ::v1::model::PortForwardingConfiguration&
AgentConfigurationDocument::_Internal::port_forwarding(const AgentConfigurationDocument* msg) {
  return *msg->port_forwarding_;
}
const ::v1::model::BlobData&
AgentConfigurationDocument::_Internal::blob_data(const AgentConfigurationDocument* msg) {
  return *msg->blob_data_;
}
const ::v1::model::Diagnostics&
AgentConfigurationDocument::_Internal::diagnostics(const AgentConfigurationDocument* msg) {
  return *msg->diagnostics_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
AgentConfigurationDocument::_Internal::terminal_access(const AgentConfigurationDocument* msg) {
  return *msg->terminal_access_;
}
void AgentConfigurationDocument::clear_terminal_access() {
  if (GetArenaForAllocation() == nullptr && terminal_access_ != nullptr) {
    delete terminal_access_;
  }
  terminal_access_ = nullptr;
}
AgentConfigurationDocument::AgentConfigurationDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  adapters_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AgentConfigurationDocument::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfigurationDocument)
}
AgentConfigurationDocument::AgentConfigurationDocument(const AgentConfigurationDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      adapters_(from.adapters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::v1::model::TelemetryConfiguration(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  if (from._internal_has_resources()) {
    resources_ = new ::v1::model::ResourcesConfiguration(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_application()) {
    application_ = new ::v1::model::ApplicationConfiguration(*from.application_);
  } else {
    application_ = nullptr;
  }
  if (from._internal_has_teleop()) {
    teleop_ = new ::v1::model::TeleopConfiguration(*from.teleop_);
  } else {
    teleop_ = nullptr;
  }
  if (from._internal_has_port_forwarding()) {
    port_forwarding_ = new ::v1::model::PortForwardingConfiguration(*from.port_forwarding_);
  } else {
    port_forwarding_ = nullptr;
  }
  if (from._internal_has_blob_data()) {
    blob_data_ = new ::v1::model::BlobData(*from.blob_data_);
  } else {
    blob_data_ = nullptr;
  }
  if (from._internal_has_diagnostics()) {
    diagnostics_ = new ::v1::model::Diagnostics(*from.diagnostics_);
  } else {
    diagnostics_ = nullptr;
  }
  if (from._internal_has_terminal_access()) {
    terminal_access_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.terminal_access_);
  } else {
    terminal_access_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfigurationDocument)
}

inline void AgentConfigurationDocument::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(version_));
}

AgentConfigurationDocument::~AgentConfigurationDocument() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfigurationDocument)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AgentConfigurationDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.Destruct();
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete application_;
  if (this != internal_default_instance()) delete teleop_;
  if (this != internal_default_instance()) delete port_forwarding_;
  if (this != internal_default_instance()) delete blob_data_;
  if (this != internal_default_instance()) delete diagnostics_;
  if (this != internal_default_instance()) delete terminal_access_;
}

void AgentConfigurationDocument::ArenaDtor(void* object) {
  AgentConfigurationDocument* _this = reinterpret_cast< AgentConfigurationDocument* >(object);
  _this->tags_.Destruct();
}
void AgentConfigurationDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfigurationDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfigurationDocument)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  adapters_.Clear();
  if (GetArenaForAllocation() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaForAllocation() == nullptr && application_ != nullptr) {
    delete application_;
  }
  application_ = nullptr;
  if (GetArenaForAllocation() == nullptr && teleop_ != nullptr) {
    delete teleop_;
  }
  teleop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && port_forwarding_ != nullptr) {
    delete port_forwarding_;
  }
  port_forwarding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && blob_data_ != nullptr) {
    delete blob_data_;
  }
  blob_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && diagnostics_ != nullptr) {
    delete diagnostics_;
  }
  diagnostics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && terminal_access_ != nullptr) {
    delete terminal_access_;
  }
  terminal_access_ = nullptr;
  version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfigurationDocument::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_application(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleop(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_forwarding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminal_access(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adapters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AgentConfigurationDocument::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfigurationDocument)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // map<string, string> tags = 2 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tags();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.AgentConfigurationDocument.TagsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.AgentConfigurationDocument.TagsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
  if (this->_internal_has_telemetry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::telemetry(this),
        _Internal::telemetry(this).GetCachedSize(), target, stream);
  }

  // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
  if (this->_internal_has_resources()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::resources(this),
        _Internal::resources(this).GetCachedSize(), target, stream);
  }

  // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
  if (this->_internal_has_application()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::application(this),
        _Internal::application(this).GetCachedSize(), target, stream);
  }

  // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
  if (this->_internal_has_teleop()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::teleop(this),
        _Internal::teleop(this).GetCachedSize(), target, stream);
  }

  // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
  if (this->_internal_has_port_forwarding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::port_forwarding(this),
        _Internal::port_forwarding(this).GetCachedSize(), target, stream);
  }

  // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
  if (this->_internal_has_blob_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::blob_data(this),
        _Internal::blob_data(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
  if (this->_internal_has_diagnostics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::diagnostics(this),
        _Internal::diagnostics(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
  if (this->_internal_has_terminal_access()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::terminal_access(this),
        _Internal::terminal_access(this).GetCachedSize(), target, stream);
  }

  // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_adapters_size()); i < n; i++) {
    const auto& repfield = this->_internal_adapters(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfigurationDocument)
  return target;
}

size_t AgentConfigurationDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfigurationDocument)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
  total_size += 1UL * this->_internal_adapters_size();
  for (const auto& msg : this->adapters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
  if (this->_internal_has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
  if (this->_internal_has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
  if (this->_internal_has_application()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *application_);
  }

  // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
  if (this->_internal_has_teleop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teleop_);
  }

  // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
  if (this->_internal_has_port_forwarding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_forwarding_);
  }

  // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
  if (this->_internal_has_blob_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blob_data_);
  }

  // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
  if (this->_internal_has_diagnostics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnostics_);
  }

  // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
  if (this->_internal_has_terminal_access()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terminal_access_);
  }

  // int64 version = 1 [json_name = "version"];
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AgentConfigurationDocument::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AgentConfigurationDocument::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AgentConfigurationDocument::GetClassData() const { return &_class_data_; }

void AgentConfigurationDocument::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AgentConfigurationDocument *>(to)->MergeFrom(
      static_cast<const AgentConfigurationDocument &>(from));
}


void AgentConfigurationDocument::MergeFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfigurationDocument)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  adapters_.MergeFrom(from.adapters_);
  if (from._internal_has_telemetry()) {
    _internal_mutable_telemetry()->::v1::model::TelemetryConfiguration::MergeFrom(from._internal_telemetry());
  }
  if (from._internal_has_resources()) {
    _internal_mutable_resources()->::v1::model::ResourcesConfiguration::MergeFrom(from._internal_resources());
  }
  if (from._internal_has_application()) {
    _internal_mutable_application()->::v1::model::ApplicationConfiguration::MergeFrom(from._internal_application());
  }
  if (from._internal_has_teleop()) {
    _internal_mutable_teleop()->::v1::model::TeleopConfiguration::MergeFrom(from._internal_teleop());
  }
  if (from._internal_has_port_forwarding()) {
    _internal_mutable_port_forwarding()->::v1::model::PortForwardingConfiguration::MergeFrom(from._internal_port_forwarding());
  }
  if (from._internal_has_blob_data()) {
    _internal_mutable_blob_data()->::v1::model::BlobData::MergeFrom(from._internal_blob_data());
  }
  if (from._internal_has_diagnostics()) {
    _internal_mutable_diagnostics()->::v1::model::Diagnostics::MergeFrom(from._internal_diagnostics());
  }
  if (from._internal_has_terminal_access()) {
    _internal_mutable_terminal_access()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_terminal_access());
  }
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AgentConfigurationDocument::CopyFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfigurationDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigurationDocument::IsInitialized() const {
  return true;
}

void AgentConfigurationDocument::InternalSwap(AgentConfigurationDocument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  adapters_.InternalSwap(&other->adapters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentConfigurationDocument, version_)
      + sizeof(AgentConfigurationDocument::version_)
      - PROTOBUF_FIELD_OFFSET(AgentConfigurationDocument, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[4]);
}

// ===================================================================

class AdapterConfiguration::_Internal {
 public:
};

AdapterConfiguration::AdapterConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.AdapterConfiguration)
}
AdapterConfiguration::AdapterConfiguration(const AdapterConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  file_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    file_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_id().empty()) {
    file_id_.Set(from._internal_file_id(), 
      GetArenaForAllocation());
  }
  exec_command_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    exec_command_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_exec_command().empty()) {
    exec_command_.Set(from._internal_exec_command(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AdapterConfiguration)
}

inline void AdapterConfiguration::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  file_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
exec_command_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  exec_command_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AdapterConfiguration::~AdapterConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.AdapterConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AdapterConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  name_.Destroy();
  file_id_.Destroy();
  exec_command_.Destroy();
}

void AdapterConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdapterConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AdapterConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  file_id_.ClearToEmpty();
  exec_command_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdapterConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AdapterConfiguration.id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AdapterConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // string file_id = 3 [json_name = "fileId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AdapterConfiguration.file_id"));
        } else
          goto handle_unusual;
        continue;
      // string exec_command = 4 [json_name = "execCommand"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_exec_command();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.AdapterConfiguration.exec_command"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdapterConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AdapterConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string file_id = 3 [json_name = "fileId"];
  if (!this->_internal_file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.file_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_id(), target);
  }

  // string exec_command = 4 [json_name = "execCommand"];
  if (!this->_internal_exec_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_command().data(), static_cast<int>(this->_internal_exec_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.exec_command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exec_command(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AdapterConfiguration)
  return target;
}

size_t AdapterConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AdapterConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_id = 3 [json_name = "fileId"];
  if (!this->_internal_file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string exec_command = 4 [json_name = "execCommand"];
  if (!this->_internal_exec_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_command());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdapterConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdapterConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdapterConfiguration::GetClassData() const { return &_class_data_; }

void AdapterConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdapterConfiguration *>(to)->MergeFrom(
      static_cast<const AdapterConfiguration &>(from));
}


void AdapterConfiguration::MergeFrom(const AdapterConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AdapterConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_file_id().empty()) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (!from._internal_exec_command().empty()) {
    _internal_set_exec_command(from._internal_exec_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdapterConfiguration::CopyFrom(const AdapterConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AdapterConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterConfiguration::IsInitialized() const {
  return true;
}

void AdapterConfiguration::InternalSwap(AdapterConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &file_id_, lhs_arena,
      &other->file_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &exec_command_, lhs_arena,
      &other->exec_command_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AdapterConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[5]);
}

// ===================================================================

class TeleopConfiguration::_Internal {
 public:
};

TeleopConfiguration::TeleopConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ros_streams_(arena),
  custom_streams_(arena),
  hardware_streams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopConfiguration)
}
TeleopConfiguration::TeleopConfiguration(const TeleopConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ros_streams_(from.ros_streams_),
      custom_streams_(from.custom_streams_),
      hardware_streams_(from.hardware_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopConfiguration)
}

inline void TeleopConfiguration::SharedCtor() {
}

TeleopConfiguration::~TeleopConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeleopConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ros_streams_.Clear();
  custom_streams_.Clear();
  hardware_streams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ros_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hardware_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_ros_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_ros_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_custom_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_custom_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hardware_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_hardware_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopConfiguration)
  return target;
}

size_t TeleopConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
  total_size += 1UL * this->_internal_ros_streams_size();
  for (const auto& msg : this->ros_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
  total_size += 1UL * this->_internal_custom_streams_size();
  for (const auto& msg : this->custom_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
  total_size += 1UL * this->_internal_hardware_streams_size();
  for (const auto& msg : this->hardware_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopConfiguration::GetClassData() const { return &_class_data_; }

void TeleopConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopConfiguration *>(to)->MergeFrom(
      static_cast<const TeleopConfiguration &>(from));
}


void TeleopConfiguration::MergeFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ros_streams_.MergeFrom(from.ros_streams_);
  custom_streams_.MergeFrom(from.custom_streams_);
  hardware_streams_.MergeFrom(from.hardware_streams_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopConfiguration::CopyFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopConfiguration::IsInitialized() const {
  return true;
}

void TeleopConfiguration::InternalSwap(TeleopConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ros_streams_.InternalSwap(&other->ros_streams_);
  custom_streams_.InternalSwap(&other->custom_streams_);
  hardware_streams_.InternalSwap(&other->hardware_streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[6]);
}

// ===================================================================

class PortForwardingConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& enabled(const PortForwardingConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
PortForwardingConfiguration::_Internal::enabled(const PortForwardingConfiguration* msg) {
  return *msg->enabled_;
}
void PortForwardingConfiguration::clear_enabled() {
  if (GetArenaForAllocation() == nullptr && enabled_ != nullptr) {
    delete enabled_;
  }
  enabled_ = nullptr;
}
PortForwardingConfiguration::PortForwardingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.PortForwardingConfiguration)
}
PortForwardingConfiguration::PortForwardingConfiguration(const PortForwardingConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enabled()) {
    enabled_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.PortForwardingConfiguration)
}

inline void PortForwardingConfiguration::SharedCtor() {
enabled_ = nullptr;
}

PortForwardingConfiguration::~PortForwardingConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.PortForwardingConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PortForwardingConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enabled_;
}

void PortForwardingConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortForwardingConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.PortForwardingConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enabled_ != nullptr) {
    delete enabled_;
  }
  enabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortForwardingConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PortForwardingConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.PortForwardingConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
  if (this->_internal_has_enabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::enabled(this),
        _Internal::enabled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.PortForwardingConfiguration)
  return target;
}

size_t PortForwardingConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.PortForwardingConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
  if (this->_internal_has_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enabled_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PortForwardingConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PortForwardingConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PortForwardingConfiguration::GetClassData() const { return &_class_data_; }

void PortForwardingConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PortForwardingConfiguration *>(to)->MergeFrom(
      static_cast<const PortForwardingConfiguration &>(from));
}


void PortForwardingConfiguration::MergeFrom(const PortForwardingConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.PortForwardingConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_enabled()) {
    _internal_mutable_enabled()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PortForwardingConfiguration::CopyFrom(const PortForwardingConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.PortForwardingConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortForwardingConfiguration::IsInitialized() const {
  return true;
}

void PortForwardingConfiguration::InternalSwap(PortForwardingConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortForwardingConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[7]);
}

// ===================================================================

class TeleopRosStreamConfiguration::_Internal {
 public:
};

TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopRosStreamConfiguration)
}
TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(const TeleopRosStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    topic_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_topic_name().empty()) {
    topic_name_.Set(from._internal_topic_name(), 
      GetArenaForAllocation());
  }
  audio_codec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_codec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_codec().empty()) {
    audio_codec_.Set(from._internal_audio_codec(), 
      GetArenaForAllocation());
  }
  quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality().empty()) {
    quality_.Set(from._internal_quality(), 
      GetArenaForAllocation());
  }
  base_reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_reference_frame().empty()) {
    base_reference_frame_.Set(from._internal_base_reference_frame(), 
      GetArenaForAllocation());
  }
  local_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    local_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_frame().empty()) {
    local_frame_.Set(from._internal_local_frame(), 
      GetArenaForAllocation());
  }
  ::memcpy(&topic_type_, &from.topic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&encode_video_) -
    reinterpret_cast<char*>(&topic_type_)) + sizeof(encode_video_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopRosStreamConfiguration)
}

inline void TeleopRosStreamConfiguration::SharedCtor() {
topic_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  topic_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
audio_codec_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_codec_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quality_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quality_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
local_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  local_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encode_video_) -
    reinterpret_cast<char*>(&topic_type_)) + sizeof(encode_video_));
}

TeleopRosStreamConfiguration::~TeleopRosStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopRosStreamConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopRosStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  topic_name_.Destroy();
  audio_codec_.Destroy();
  quality_.Destroy();
  base_reference_frame_.Destroy();
  local_frame_.Destroy();
}

void TeleopRosStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopRosStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopRosStreamConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_name_.ClearToEmpty();
  audio_codec_.ClearToEmpty();
  quality_.ClearToEmpty();
  base_reference_frame_.ClearToEmpty();
  local_frame_.ClearToEmpty();
  ::memset(&topic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encode_video_) -
      reinterpret_cast<char*>(&topic_type_)) + sizeof(encode_video_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopRosStreamConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic_name = 1 [json_name = "topicName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.topic_name"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_topic_type(static_cast<::v1::model::ROSTopicType>(val));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool encode_video = 4 [json_name = "encodeVideo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          encode_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string audio_codec = 5 [json_name = "audioCodec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_audio_codec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.audio_codec"));
        } else
          goto handle_unusual;
        continue;
      // string quality = 6 [json_name = "quality"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_quality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.quality"));
        } else
          goto handle_unusual;
        continue;
      // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_base_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.base_reference_frame"));
        } else
          goto handle_unusual;
        continue;
      // string local_frame = 8 [json_name = "localFrame"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_local_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.local_frame"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopRosStreamConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopRosStreamConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic_name = 1 [json_name = "topicName"];
  if (!this->_internal_topic_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
  if (this->_internal_topic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_topic_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_encode_video(), target);
  }

  // string audio_codec = 5 [json_name = "audioCodec"];
  if (!this->_internal_audio_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_codec().data(), static_cast<int>(this->_internal_audio_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.audio_codec");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_audio_codec(), target);
  }

  // string quality = 6 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_quality(), target);
  }

  // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_reference_frame().data(), static_cast<int>(this->_internal_base_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.base_reference_frame");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_base_reference_frame(), target);
  }

  // string local_frame = 8 [json_name = "localFrame"];
  if (!this->_internal_local_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_frame().data(), static_cast<int>(this->_internal_local_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.local_frame");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_local_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopRosStreamConfiguration)
  return target;
}

size_t TeleopRosStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopRosStreamConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic_name = 1 [json_name = "topicName"];
  if (!this->_internal_topic_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_name());
  }

  // string audio_codec = 5 [json_name = "audioCodec"];
  if (!this->_internal_audio_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_codec());
  }

  // string quality = 6 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_reference_frame());
  }

  // string local_frame = 8 [json_name = "localFrame"];
  if (!this->_internal_local_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_frame());
  }

  // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
  if (this->_internal_topic_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_topic_type());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopRosStreamConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopRosStreamConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopRosStreamConfiguration::GetClassData() const { return &_class_data_; }

void TeleopRosStreamConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopRosStreamConfiguration *>(to)->MergeFrom(
      static_cast<const TeleopRosStreamConfiguration &>(from));
}


void TeleopRosStreamConfiguration::MergeFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopRosStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_topic_name().empty()) {
    _internal_set_topic_name(from._internal_topic_name());
  }
  if (!from._internal_audio_codec().empty()) {
    _internal_set_audio_codec(from._internal_audio_codec());
  }
  if (!from._internal_quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (!from._internal_base_reference_frame().empty()) {
    _internal_set_base_reference_frame(from._internal_base_reference_frame());
  }
  if (!from._internal_local_frame().empty()) {
    _internal_set_local_frame(from._internal_local_frame());
  }
  if (from._internal_topic_type() != 0) {
    _internal_set_topic_type(from._internal_topic_type());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_encode_video() != 0) {
    _internal_set_encode_video(from._internal_encode_video());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopRosStreamConfiguration::CopyFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopRosStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopRosStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopRosStreamConfiguration::InternalSwap(TeleopRosStreamConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &topic_name_, lhs_arena,
      &other->topic_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &audio_codec_, lhs_arena,
      &other->audio_codec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quality_, lhs_arena,
      &other->quality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &base_reference_frame_, lhs_arena,
      &other->base_reference_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &local_frame_, lhs_arena,
      &other->local_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopRosStreamConfiguration, encode_video_)
      + sizeof(TeleopRosStreamConfiguration::encode_video_)
      - PROTOBUF_FIELD_OFFSET(TeleopRosStreamConfiguration, topic_type_)>(
          reinterpret_cast<char*>(&topic_type_),
          reinterpret_cast<char*>(&other->topic_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopRosStreamConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[8]);
}

// ===================================================================

class TeleopHardwareStreamConfiguration::_Internal {
 public:
};

TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopHardwareStreamConfiguration)
}
TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(const TeleopHardwareStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  rtc_stream_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rtc_stream_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rtc_stream_type().empty()) {
    rtc_stream_type_.Set(from._internal_rtc_stream_type(), 
      GetArenaForAllocation());
  }
  hw_descriptor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hw_descriptor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hw_descriptor().empty()) {
    hw_descriptor_.Set(from._internal_hw_descriptor(), 
      GetArenaForAllocation());
  }
  quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality().empty()) {
    quality_.Set(from._internal_quality(), 
      GetArenaForAllocation());
  }
  hardware_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hardware_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardware_type().empty()) {
    hardware_type_.Set(from._internal_hardware_type(), 
      GetArenaForAllocation());
  }
  ip_cam_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_cam_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_cam_username().empty()) {
    ip_cam_username_.Set(from._internal_ip_cam_username(), 
      GetArenaForAllocation());
  }
  ip_cam_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_cam_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_cam_password().empty()) {
    ip_cam_password_.Set(from._internal_ip_cam_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_onvif_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(is_onvif_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopHardwareStreamConfiguration)
}

inline void TeleopHardwareStreamConfiguration::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rtc_stream_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rtc_stream_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hw_descriptor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hw_descriptor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quality_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quality_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hardware_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hardware_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_cam_username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_cam_username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_cam_password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_cam_password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_onvif_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(is_onvif_));
}

TeleopHardwareStreamConfiguration::~TeleopHardwareStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopHardwareStreamConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopHardwareStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  rtc_stream_type_.Destroy();
  hw_descriptor_.Destroy();
  quality_.Destroy();
  hardware_type_.Destroy();
  ip_cam_username_.Destroy();
  ip_cam_password_.Destroy();
}

void TeleopHardwareStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopHardwareStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopHardwareStreamConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  rtc_stream_type_.ClearToEmpty();
  hw_descriptor_.ClearToEmpty();
  quality_.ClearToEmpty();
  hardware_type_.ClearToEmpty();
  ip_cam_username_.ClearToEmpty();
  ip_cam_password_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_onvif_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(is_onvif_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopHardwareStreamConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rtc_stream_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.rtc_stream_type"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string hw_descriptor = 4 [json_name = "hwDescriptor"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hw_descriptor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.hw_descriptor"));
        } else
          goto handle_unusual;
        continue;
      // string quality = 5 [json_name = "quality"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.quality"));
        } else
          goto handle_unusual;
        continue;
      // string hardware_type = 6 [json_name = "hardwareType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_hardware_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.hardware_type"));
        } else
          goto handle_unusual;
        continue;
      // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          rtsp_encoding_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_onvif = 8 [json_name = "isOnvif"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          is_onvif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip_cam_username = 9 [json_name = "ipCamUsername"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_ip_cam_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.ip_cam_username"));
        } else
          goto handle_unusual;
        continue;
      // string ip_cam_password = 10 [json_name = "ipCamPassword"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_ip_cam_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.ip_cam_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopHardwareStreamConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopHardwareStreamConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->_internal_rtc_stream_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtc_stream_type().data(), static_cast<int>(this->_internal_rtc_stream_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.rtc_stream_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtc_stream_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // string hw_descriptor = 4 [json_name = "hwDescriptor"];
  if (!this->_internal_hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_descriptor().data(), static_cast<int>(this->_internal_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hw_descriptor(), target);
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_quality(), target);
  }

  // string hardware_type = 6 [json_name = "hardwareType"];
  if (!this->_internal_hardware_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_type().data(), static_cast<int>(this->_internal_hardware_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.hardware_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hardware_type(), target);
  }

  // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
  if (this->_internal_rtsp_encoding_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_rtsp_encoding_needed(), target);
  }

  // bool is_onvif = 8 [json_name = "isOnvif"];
  if (this->_internal_is_onvif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_is_onvif(), target);
  }

  // string ip_cam_username = 9 [json_name = "ipCamUsername"];
  if (!this->_internal_ip_cam_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_username().data(), static_cast<int>(this->_internal_ip_cam_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.ip_cam_username");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ip_cam_username(), target);
  }

  // string ip_cam_password = 10 [json_name = "ipCamPassword"];
  if (!this->_internal_ip_cam_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_password().data(), static_cast<int>(this->_internal_ip_cam_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.ip_cam_password");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ip_cam_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopHardwareStreamConfiguration)
  return target;
}

size_t TeleopHardwareStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopHardwareStreamConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->_internal_rtc_stream_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtc_stream_type());
  }

  // string hw_descriptor = 4 [json_name = "hwDescriptor"];
  if (!this->_internal_hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_descriptor());
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // string hardware_type = 6 [json_name = "hardwareType"];
  if (!this->_internal_hardware_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_type());
  }

  // string ip_cam_username = 9 [json_name = "ipCamUsername"];
  if (!this->_internal_ip_cam_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_username());
  }

  // string ip_cam_password = 10 [json_name = "ipCamPassword"];
  if (!this->_internal_ip_cam_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_password());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
  if (this->_internal_rtsp_encoding_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_onvif = 8 [json_name = "isOnvif"];
  if (this->_internal_is_onvif() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopHardwareStreamConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopHardwareStreamConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopHardwareStreamConfiguration::GetClassData() const { return &_class_data_; }

void TeleopHardwareStreamConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopHardwareStreamConfiguration *>(to)->MergeFrom(
      static_cast<const TeleopHardwareStreamConfiguration &>(from));
}


void TeleopHardwareStreamConfiguration::MergeFrom(const TeleopHardwareStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopHardwareStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_rtc_stream_type().empty()) {
    _internal_set_rtc_stream_type(from._internal_rtc_stream_type());
  }
  if (!from._internal_hw_descriptor().empty()) {
    _internal_set_hw_descriptor(from._internal_hw_descriptor());
  }
  if (!from._internal_quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (!from._internal_hardware_type().empty()) {
    _internal_set_hardware_type(from._internal_hardware_type());
  }
  if (!from._internal_ip_cam_username().empty()) {
    _internal_set_ip_cam_username(from._internal_ip_cam_username());
  }
  if (!from._internal_ip_cam_password().empty()) {
    _internal_set_ip_cam_password(from._internal_ip_cam_password());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_rtsp_encoding_needed() != 0) {
    _internal_set_rtsp_encoding_needed(from._internal_rtsp_encoding_needed());
  }
  if (from._internal_is_onvif() != 0) {
    _internal_set_is_onvif(from._internal_is_onvif());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopHardwareStreamConfiguration::CopyFrom(const TeleopHardwareStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopHardwareStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopHardwareStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopHardwareStreamConfiguration::InternalSwap(TeleopHardwareStreamConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rtc_stream_type_, lhs_arena,
      &other->rtc_stream_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hw_descriptor_, lhs_arena,
      &other->hw_descriptor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quality_, lhs_arena,
      &other->quality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hardware_type_, lhs_arena,
      &other->hardware_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_cam_username_, lhs_arena,
      &other->ip_cam_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_cam_password_, lhs_arena,
      &other->ip_cam_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopHardwareStreamConfiguration, is_onvif_)
      + sizeof(TeleopHardwareStreamConfiguration::is_onvif_)
      - PROTOBUF_FIELD_OFFSET(TeleopHardwareStreamConfiguration, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopHardwareStreamConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[9]);
}

// ===================================================================

class TeleopCustomStreamConfiguration::_Internal {
 public:
};

TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopCustomStreamConfiguration)
}
TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(const TeleopCustomStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  rtc_stream_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    rtc_stream_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_rtc_stream_type().empty()) {
    rtc_stream_type_.Set(from._internal_rtc_stream_type(), 
      GetArenaForAllocation());
  }
  quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality().empty()) {
    quality_.Set(from._internal_quality(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&encode_video_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(encode_video_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopCustomStreamConfiguration)
}

inline void TeleopCustomStreamConfiguration::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
rtc_stream_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  rtc_stream_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quality_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quality_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encode_video_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(encode_video_));
}

TeleopCustomStreamConfiguration::~TeleopCustomStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopCustomStreamConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopCustomStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  rtc_stream_type_.Destroy();
  quality_.Destroy();
}

void TeleopCustomStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopCustomStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopCustomStreamConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  rtc_stream_type_.ClearToEmpty();
  quality_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encode_video_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(encode_video_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopCustomStreamConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_rtc_stream_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.rtc_stream_type"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else
          goto handle_unusual;
        continue;
      // bool encode_video = 4 [json_name = "encodeVideo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          encode_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quality = 5 [json_name = "quality"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_quality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.quality"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopCustomStreamConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopCustomStreamConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->_internal_rtc_stream_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtc_stream_type().data(), static_cast<int>(this->_internal_rtc_stream_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.rtc_stream_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtc_stream_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_encode_video(), target);
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopCustomStreamConfiguration)
  return target;
}

size_t TeleopCustomStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopCustomStreamConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->_internal_rtc_stream_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtc_stream_type());
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopCustomStreamConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopCustomStreamConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopCustomStreamConfiguration::GetClassData() const { return &_class_data_; }

void TeleopCustomStreamConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopCustomStreamConfiguration *>(to)->MergeFrom(
      static_cast<const TeleopCustomStreamConfiguration &>(from));
}


void TeleopCustomStreamConfiguration::MergeFrom(const TeleopCustomStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopCustomStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_rtc_stream_type().empty()) {
    _internal_set_rtc_stream_type(from._internal_rtc_stream_type());
  }
  if (!from._internal_quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_encode_video() != 0) {
    _internal_set_encode_video(from._internal_encode_video());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopCustomStreamConfiguration::CopyFrom(const TeleopCustomStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopCustomStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopCustomStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopCustomStreamConfiguration::InternalSwap(TeleopCustomStreamConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &rtc_stream_type_, lhs_arena,
      &other->rtc_stream_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quality_, lhs_arena,
      &other->quality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopCustomStreamConfiguration, encode_video_)
      + sizeof(TeleopCustomStreamConfiguration::encode_video_)
      - PROTOBUF_FIELD_OFFSET(TeleopCustomStreamConfiguration, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopCustomStreamConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[10]);
}

// ===================================================================

class TelemetryConfiguration::_Internal {
 public:
  static const ::v1::model::ROSConfiguration& ros(const TelemetryConfiguration* msg);
};

const ::v1::model::ROSConfiguration&
TelemetryConfiguration::_Internal::ros(const TelemetryConfiguration* msg) {
  return *msg->ros_;
}
TelemetryConfiguration::TelemetryConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  streams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TelemetryConfiguration)
}
TelemetryConfiguration::TelemetryConfiguration(const TelemetryConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ros()) {
    ros_ = new ::v1::model::ROSConfiguration(*from.ros_);
  } else {
    ros_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TelemetryConfiguration)
}

inline void TelemetryConfiguration::SharedCtor() {
ros_ = nullptr;
}

TelemetryConfiguration::~TelemetryConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TelemetryConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TelemetryConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ros_;
}

void TelemetryConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TelemetryConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  if (GetArenaForAllocation() == nullptr && ros_ != nullptr) {
    delete ros_;
  }
  ros_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TelemetryConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TelemetryConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_streams_size()); i < n; i++) {
    const auto& repfield = this->_internal_streams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
  if (this->_internal_has_ros()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ros(this),
        _Internal::ros(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TelemetryConfiguration)
  return target;
}

size_t TelemetryConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TelemetryConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
  if (this->_internal_has_ros()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ros_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TelemetryConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TelemetryConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TelemetryConfiguration::GetClassData() const { return &_class_data_; }

void TelemetryConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TelemetryConfiguration *>(to)->MergeFrom(
      static_cast<const TelemetryConfiguration &>(from));
}


void TelemetryConfiguration::MergeFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TelemetryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from._internal_has_ros()) {
    _internal_mutable_ros()->::v1::model::ROSConfiguration::MergeFrom(from._internal_ros());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TelemetryConfiguration::CopyFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TelemetryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryConfiguration::IsInitialized() const {
  return true;
}

void TelemetryConfiguration::InternalSwap(TelemetryConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  swap(ros_, other->ros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[11]);
}

// ===================================================================

ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse() {}
ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::MergeFrom(const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[12]);
}

// ===================================================================

class ApplicationConfiguration::_Internal {
 public:
};

ApplicationConfiguration::ApplicationConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  configuration_map_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ApplicationConfiguration::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:v1.model.ApplicationConfiguration)
}
ApplicationConfiguration::ApplicationConfiguration(const ApplicationConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  configuration_map_.MergeFrom(from.configuration_map_);
  // @@protoc_insertion_point(copy_constructor:v1.model.ApplicationConfiguration)
}

inline void ApplicationConfiguration::SharedCtor() {
}

ApplicationConfiguration::~ApplicationConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ApplicationConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ApplicationConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  configuration_map_.Destruct();
}

void ApplicationConfiguration::ArenaDtor(void* object) {
  ApplicationConfiguration* _this = reinterpret_cast< ApplicationConfiguration* >(object);
  _this->configuration_map_.Destruct();
}
void ApplicationConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ApplicationConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configuration_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configuration_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ApplicationConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ApplicationConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
  if (!this->_internal_configuration_map().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_configuration_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.ApplicationConfiguration.ConfigurationMapEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.ApplicationConfiguration.ConfigurationMapEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ApplicationConfiguration)
  return target;
}

size_t ApplicationConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ApplicationConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration_map().begin();
      it != this->_internal_configuration_map().end(); ++it) {
    total_size += ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ApplicationConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ApplicationConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ApplicationConfiguration::GetClassData() const { return &_class_data_; }

void ApplicationConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ApplicationConfiguration *>(to)->MergeFrom(
      static_cast<const ApplicationConfiguration &>(from));
}


void ApplicationConfiguration::MergeFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ApplicationConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  configuration_map_.MergeFrom(from.configuration_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ApplicationConfiguration::CopyFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ApplicationConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationConfiguration::IsInitialized() const {
  return true;
}

void ApplicationConfiguration::InternalSwap(ApplicationConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  configuration_map_.InternalSwap(&other->configuration_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[13]);
}

// ===================================================================

class ResourcesConfiguration::_Internal {
 public:
  static const ::v1::model::DiskConfiguration& disk(const ResourcesConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& stream_throttle_hz(const ResourcesConfiguration* msg);
};

const ::v1::model::DiskConfiguration&
ResourcesConfiguration::_Internal::disk(const ResourcesConfiguration* msg) {
  return *msg->disk_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
ResourcesConfiguration::_Internal::stream_throttle_hz(const ResourcesConfiguration* msg) {
  return *msg->stream_throttle_hz_;
}
void ResourcesConfiguration::clear_stream_throttle_hz() {
  if (GetArenaForAllocation() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
}
ResourcesConfiguration::ResourcesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ResourcesConfiguration)
}
ResourcesConfiguration::ResourcesConfiguration(const ResourcesConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_disk()) {
    disk_ = new ::v1::model::DiskConfiguration(*from.disk_);
  } else {
    disk_ = nullptr;
  }
  if (from._internal_has_stream_throttle_hz()) {
    stream_throttle_hz_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.stream_throttle_hz_);
  } else {
    stream_throttle_hz_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ResourcesConfiguration)
}

inline void ResourcesConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stream_throttle_hz_) -
    reinterpret_cast<char*>(&disk_)) + sizeof(stream_throttle_hz_));
}

ResourcesConfiguration::~ResourcesConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ResourcesConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourcesConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete disk_;
  if (this != internal_default_instance()) delete stream_throttle_hz_;
}

void ResourcesConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourcesConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ResourcesConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && disk_ != nullptr) {
    delete disk_;
  }
  disk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_throttle_hz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourcesConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ResourcesConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
  if (this->_internal_has_disk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::disk(this),
        _Internal::disk(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
  if (this->_internal_has_stream_throttle_hz()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::stream_throttle_hz(this),
        _Internal::stream_throttle_hz(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ResourcesConfiguration)
  return target;
}

size_t ResourcesConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ResourcesConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
  if (this->_internal_has_disk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
  if (this->_internal_has_stream_throttle_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_throttle_hz_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourcesConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesConfiguration::GetClassData() const { return &_class_data_; }

void ResourcesConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourcesConfiguration *>(to)->MergeFrom(
      static_cast<const ResourcesConfiguration &>(from));
}


void ResourcesConfiguration::MergeFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ResourcesConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_disk()) {
    _internal_mutable_disk()->::v1::model::DiskConfiguration::MergeFrom(from._internal_disk());
  }
  if (from._internal_has_stream_throttle_hz()) {
    _internal_mutable_stream_throttle_hz()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_stream_throttle_hz());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesConfiguration::CopyFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ResourcesConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesConfiguration::IsInitialized() const {
  return true;
}

void ResourcesConfiguration::InternalSwap(ResourcesConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourcesConfiguration, stream_throttle_hz_)
      + sizeof(ResourcesConfiguration::stream_throttle_hz_)
      - PROTOBUF_FIELD_OFFSET(ResourcesConfiguration, disk_)>(
          reinterpret_cast<char*>(&disk_),
          reinterpret_cast<char*>(&other->disk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[14]);
}

// ===================================================================

class DiskConfiguration::_Internal {
 public:
};

DiskConfiguration::DiskConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.DiskConfiguration)
}
DiskConfiguration::DiskConfiguration(const DiskConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buffer_size_, &from.buffer_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_demand_buffer_size_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
  // @@protoc_insertion_point(copy_constructor:v1.model.DiskConfiguration)
}

inline void DiskConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buffer_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_demand_buffer_size_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
}

DiskConfiguration::~DiskConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.DiskConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DiskConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiskConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DiskConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_demand_buffer_size_) -
      reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 buffer_size = 1 [json_name = "bufferSize"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          on_demand_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DiskConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DiskConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buffer_size = 1 [json_name = "bufferSize"];
  if (this->_internal_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_buffer_size(), target);
  }

  // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
  if (this->_internal_on_demand_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_on_demand_buffer_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DiskConfiguration)
  return target;
}

size_t DiskConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DiskConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buffer_size = 1 [json_name = "bufferSize"];
  if (this->_internal_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_buffer_size());
  }

  // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
  if (this->_internal_on_demand_buffer_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_on_demand_buffer_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DiskConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DiskConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DiskConfiguration::GetClassData() const { return &_class_data_; }

void DiskConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DiskConfiguration *>(to)->MergeFrom(
      static_cast<const DiskConfiguration &>(from));
}


void DiskConfiguration::MergeFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DiskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
  if (from._internal_on_demand_buffer_size() != 0) {
    _internal_set_on_demand_buffer_size(from._internal_on_demand_buffer_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DiskConfiguration::CopyFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DiskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskConfiguration::IsInitialized() const {
  return true;
}

void DiskConfiguration::InternalSwap(DiskConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiskConfiguration, on_demand_buffer_size_)
      + sizeof(DiskConfiguration::on_demand_buffer_size_)
      - PROTOBUF_FIELD_OFFSET(DiskConfiguration, buffer_size_)>(
          reinterpret_cast<char*>(&buffer_size_),
          reinterpret_cast<char*>(&other->buffer_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[15]);
}

// ===================================================================

class ROSConfiguration::_Internal {
 public:
};

ROSConfiguration::ROSConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSConfiguration)
}
ROSConfiguration::ROSConfiguration(const ROSConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  world_reference_frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    world_reference_frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_world_reference_frame_id().empty()) {
    world_reference_frame_id_.Set(from._internal_world_reference_frame_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSConfiguration)
}

inline void ROSConfiguration::SharedCtor() {
world_reference_frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  world_reference_frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ROSConfiguration::~ROSConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ROSConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROSConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  world_reference_frame_id_.Destroy();
}

void ROSConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_reference_frame_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_world_reference_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSConfiguration.world_reference_frame_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROSConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
  if (!this->_internal_world_reference_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world_reference_frame_id().data(), static_cast<int>(this->_internal_world_reference_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSConfiguration.world_reference_frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_world_reference_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSConfiguration)
  return target;
}

size_t ROSConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
  if (!this->_internal_world_reference_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world_reference_frame_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROSConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROSConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROSConfiguration::GetClassData() const { return &_class_data_; }

void ROSConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROSConfiguration *>(to)->MergeFrom(
      static_cast<const ROSConfiguration &>(from));
}


void ROSConfiguration::MergeFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_world_reference_frame_id().empty()) {
    _internal_set_world_reference_frame_id(from._internal_world_reference_frame_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROSConfiguration::CopyFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSConfiguration::IsInitialized() const {
  return true;
}

void ROSConfiguration::InternalSwap(ROSConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &world_reference_frame_id_, lhs_arena,
      &other->world_reference_frame_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[16]);
}

// ===================================================================

StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse() {}
StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamConfiguration_TagsEntry_DoNotUse::MergeFrom(const StreamConfiguration_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration_TagsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[17]);
}

// ===================================================================

class StreamConfiguration::_Internal {
 public:
  static const ::v1::model::ROSTopic& ros_topic(const StreamConfiguration* msg);
  static const ::v1::model::ROSLocalization& ros_localization(const StreamConfiguration* msg);
  static const ::v1::model::DirectoryWatch& directory_watch(const StreamConfiguration* msg);
  static const ::v1::model::FileTail& file_tail(const StreamConfiguration* msg);
  static const ::v1::model::ROSTransformTree& ros_transform_tree(const StreamConfiguration* msg);
  static const ::v1::model::Custom& custom(const StreamConfiguration* msg);
  static const ::v1::model::Hardware& hardware(const StreamConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& throttle_hz(const StreamConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& disabled(const StreamConfiguration* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& on_demand(const StreamConfiguration* msg);
  static const ::v1::model::StreamTransformConfiguration& transform(const StreamConfiguration* msg);
};

const ::v1::model::ROSTopic&
StreamConfiguration::_Internal::ros_topic(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_topic_;
}
const ::v1::model::ROSLocalization&
StreamConfiguration::_Internal::ros_localization(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_localization_;
}
const ::v1::model::DirectoryWatch&
StreamConfiguration::_Internal::directory_watch(const StreamConfiguration* msg) {
  return *msg->configuration_.directory_watch_;
}
const ::v1::model::FileTail&
StreamConfiguration::_Internal::file_tail(const StreamConfiguration* msg) {
  return *msg->configuration_.file_tail_;
}
const ::v1::model::ROSTransformTree&
StreamConfiguration::_Internal::ros_transform_tree(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_transform_tree_;
}
const ::v1::model::Custom&
StreamConfiguration::_Internal::custom(const StreamConfiguration* msg) {
  return *msg->configuration_.custom_;
}
const ::v1::model::Hardware&
StreamConfiguration::_Internal::hardware(const StreamConfiguration* msg) {
  return *msg->configuration_.hardware_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
StreamConfiguration::_Internal::throttle_hz(const StreamConfiguration* msg) {
  return *msg->throttle_hz_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
StreamConfiguration::_Internal::disabled(const StreamConfiguration* msg) {
  return *msg->disabled_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
StreamConfiguration::_Internal::on_demand(const StreamConfiguration* msg) {
  return *msg->on_demand_;
}
const ::v1::model::StreamTransformConfiguration&
StreamConfiguration::_Internal::transform(const StreamConfiguration* msg) {
  return *msg->transform_;
}
void StreamConfiguration::set_allocated_ros_topic(::v1::model::ROSTopic* ros_topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_topic));
    if (message_arena != submessage_arena) {
      ros_topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_topic, submessage_arena);
    }
    set_has_ros_topic();
    configuration_.ros_topic_ = ros_topic;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_topic)
}
void StreamConfiguration::clear_ros_topic() {
  if (_internal_has_ros_topic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_topic_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_ros_localization(::v1::model::ROSLocalization* ros_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_localization));
    if (message_arena != submessage_arena) {
      ros_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_localization, submessage_arena);
    }
    set_has_ros_localization();
    configuration_.ros_localization_ = ros_localization;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_localization)
}
void StreamConfiguration::clear_ros_localization() {
  if (_internal_has_ros_localization()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_localization_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_directory_watch(::v1::model::DirectoryWatch* directory_watch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (directory_watch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(directory_watch);
    if (message_arena != submessage_arena) {
      directory_watch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory_watch, submessage_arena);
    }
    set_has_directory_watch();
    configuration_.directory_watch_ = directory_watch;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.directory_watch)
}
void StreamConfiguration::set_allocated_file_tail(::v1::model::FileTail* file_tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (file_tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_tail);
    if (message_arena != submessage_arena) {
      file_tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_tail, submessage_arena);
    }
    set_has_file_tail();
    configuration_.file_tail_ = file_tail;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.file_tail)
}
void StreamConfiguration::set_allocated_ros_transform_tree(::v1::model::ROSTransformTree* ros_transform_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_transform_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_transform_tree));
    if (message_arena != submessage_arena) {
      ros_transform_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_transform_tree, submessage_arena);
    }
    set_has_ros_transform_tree();
    configuration_.ros_transform_tree_ = ros_transform_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_transform_tree)
}
void StreamConfiguration::clear_ros_transform_tree() {
  if (_internal_has_ros_transform_tree()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_transform_tree_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_custom(::v1::model::Custom* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    configuration_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.custom)
}
void StreamConfiguration::set_allocated_hardware(::v1::model::Hardware* hardware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (hardware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(hardware);
    if (message_arena != submessage_arena) {
      hardware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hardware, submessage_arena);
    }
    set_has_hardware();
    configuration_.hardware_ = hardware;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.hardware)
}
void StreamConfiguration::clear_throttle_hz() {
  if (GetArenaForAllocation() == nullptr && throttle_hz_ != nullptr) {
    delete throttle_hz_;
  }
  throttle_hz_ = nullptr;
}
void StreamConfiguration::clear_disabled() {
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
}
void StreamConfiguration::clear_on_demand() {
  if (GetArenaForAllocation() == nullptr && on_demand_ != nullptr) {
    delete on_demand_;
  }
  on_demand_ = nullptr;
}
StreamConfiguration::StreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &StreamConfiguration::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:v1.model.StreamConfiguration)
}
StreamConfiguration::StreamConfiguration(const StreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  quality_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    quality_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quality().empty()) {
    quality_.Set(from._internal_quality(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_throttle_hz()) {
    throttle_hz_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from.throttle_hz_);
  } else {
    throttle_hz_ = nullptr;
  }
  if (from._internal_has_disabled()) {
    disabled_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.disabled_);
  } else {
    disabled_ = nullptr;
  }
  if (from._internal_has_on_demand()) {
    on_demand_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.on_demand_);
  } else {
    on_demand_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::v1::model::StreamTransformConfiguration(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  clear_has_configuration();
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::v1::model::Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kHardware: {
      _internal_mutable_hardware()->::v1::model::Hardware::MergeFrom(from._internal_hardware());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.StreamConfiguration)
}

inline void StreamConfiguration::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
quality_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  quality_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&throttle_hz_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transform_) -
    reinterpret_cast<char*>(&throttle_hz_)) + sizeof(transform_));
clear_has_configuration();
}

StreamConfiguration::~StreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.StreamConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void StreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.Destruct();
  name_.Destroy();
  quality_.Destroy();
  if (this != internal_default_instance()) delete throttle_hz_;
  if (this != internal_default_instance()) delete disabled_;
  if (this != internal_default_instance()) delete on_demand_;
  if (this != internal_default_instance()) delete transform_;
  if (has_configuration()) {
    clear_configuration();
  }
}

void StreamConfiguration::ArenaDtor(void* object) {
  StreamConfiguration* _this = reinterpret_cast< StreamConfiguration* >(object);
  _this->tags_.Destruct();
}
void StreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamConfiguration::clear_configuration() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.StreamConfiguration)
  switch (configuration_case()) {
    case kRosTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_topic_;
      }
      break;
    }
    case kRosLocalization: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_localization_;
      }
      break;
    }
    case kDirectoryWatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.directory_watch_;
      }
      break;
    }
    case kFileTail: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.file_tail_;
      }
      break;
    }
    case kRosTransformTree: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_transform_tree_;
      }
      break;
    }
    case kCustom: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.custom_;
      }
      break;
    }
    case kHardware: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.hardware_;
      }
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}


void StreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.StreamConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  name_.ClearToEmpty();
  quality_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && throttle_hz_ != nullptr) {
    delete throttle_hz_;
  }
  throttle_hz_ = nullptr;
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && on_demand_ != nullptr) {
    delete on_demand_;
  }
  on_demand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  clear_configuration();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.StreamConfiguration.name"));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_topic(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_localization(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_directory_watch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_tail(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_transform_tree(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_hz(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Custom custom = 9 [json_name = "custom"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_demand(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quality = 22 [json_name = "quality"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_quality();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.StreamConfiguration.quality"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.StreamConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.StreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> tags = 2 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = StreamConfiguration_TagsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tags();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.StreamConfiguration.TagsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.StreamConfiguration.TagsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
  if (_internal_has_ros_topic()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::ros_topic(this),
        _Internal::ros_topic(this).GetCachedSize(), target, stream);
  }

  // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
  if (_internal_has_ros_localization()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::ros_localization(this),
        _Internal::ros_localization(this).GetCachedSize(), target, stream);
  }

  // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
  if (_internal_has_directory_watch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::directory_watch(this),
        _Internal::directory_watch(this).GetCachedSize(), target, stream);
  }

  // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
  if (_internal_has_file_tail()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::file_tail(this),
        _Internal::file_tail(this).GetCachedSize(), target, stream);
  }

  // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
  if (_internal_has_ros_transform_tree()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ros_transform_tree(this),
        _Internal::ros_transform_tree(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
  if (this->_internal_has_throttle_hz()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::throttle_hz(this),
        _Internal::throttle_hz(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Custom custom = 9 [json_name = "custom"];
  if (_internal_has_custom()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::custom(this),
        _Internal::custom(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
  if (_internal_has_hardware()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::hardware(this),
        _Internal::hardware(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
  if (this->_internal_has_disabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::disabled(this),
        _Internal::disabled(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
  if (this->_internal_has_on_demand()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::on_demand(this),
        _Internal::on_demand(this).GetCachedSize(), target, stream);
  }

  // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
  if (this->_internal_has_transform()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::transform(this),
        _Internal::transform(this).GetCachedSize(), target, stream);
  }

  // string quality = 22 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.StreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.StreamConfiguration)
  return target;
}

size_t StreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.StreamConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += StreamConfiguration_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string quality = 22 [json_name = "quality"];
  if (!this->_internal_quality().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
  if (this->_internal_has_throttle_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_hz_);
  }

  // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
  if (this->_internal_has_disabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disabled_);
  }

  // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
  if (this->_internal_has_on_demand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *on_demand_);
  }

  // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
  if (this->_internal_has_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  switch (configuration_case()) {
    // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
    case kRosTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_topic_);
      break;
    }
    // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
    case kRosLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_localization_);
      break;
    }
    // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
    case kDirectoryWatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.directory_watch_);
      break;
    }
    // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
    case kFileTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.file_tail_);
      break;
    }
    // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
    case kRosTransformTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_transform_tree_);
      break;
    }
    // .v1.model.Custom custom = 9 [json_name = "custom"];
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.custom_);
      break;
    }
    // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
    case kHardware: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.hardware_);
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamConfiguration::GetClassData() const { return &_class_data_; }

void StreamConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamConfiguration *>(to)->MergeFrom(
      static_cast<const StreamConfiguration &>(from));
}


void StreamConfiguration::MergeFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.StreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (from._internal_has_throttle_hz()) {
    _internal_mutable_throttle_hz()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_throttle_hz());
  }
  if (from._internal_has_disabled()) {
    _internal_mutable_disabled()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_disabled());
  }
  if (from._internal_has_on_demand()) {
    _internal_mutable_on_demand()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_on_demand());
  }
  if (from._internal_has_transform()) {
    _internal_mutable_transform()->::v1::model::StreamTransformConfiguration::MergeFrom(from._internal_transform());
  }
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::v1::model::Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kHardware: {
      _internal_mutable_hardware()->::v1::model::Hardware::MergeFrom(from._internal_hardware());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamConfiguration::CopyFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.StreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamConfiguration::IsInitialized() const {
  return true;
}

void StreamConfiguration::InternalSwap(StreamConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &quality_, lhs_arena,
      &other->quality_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamConfiguration, transform_)
      + sizeof(StreamConfiguration::transform_)
      - PROTOBUF_FIELD_OFFSET(StreamConfiguration, throttle_hz_)>(
          reinterpret_cast<char*>(&throttle_hz_),
          reinterpret_cast<char*>(&other->throttle_hz_));
  swap(configuration_, other->configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[18]);
}

// ===================================================================

class StreamTransformConfiguration::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& video_encoding_enabled(const StreamTransformConfiguration* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
StreamTransformConfiguration::_Internal::video_encoding_enabled(const StreamTransformConfiguration* msg) {
  return *msg->video_encoding_enabled_;
}
void StreamTransformConfiguration::clear_video_encoding_enabled() {
  if (GetArenaForAllocation() == nullptr && video_encoding_enabled_ != nullptr) {
    delete video_encoding_enabled_;
  }
  video_encoding_enabled_ = nullptr;
}
StreamTransformConfiguration::StreamTransformConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.StreamTransformConfiguration)
}
StreamTransformConfiguration::StreamTransformConfiguration(const StreamTransformConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_video_encoding_enabled()) {
    video_encoding_enabled_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.video_encoding_enabled_);
  } else {
    video_encoding_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.StreamTransformConfiguration)
}

inline void StreamTransformConfiguration::SharedCtor() {
video_encoding_enabled_ = nullptr;
}

StreamTransformConfiguration::~StreamTransformConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.StreamTransformConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StreamTransformConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete video_encoding_enabled_;
}

void StreamTransformConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamTransformConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.StreamTransformConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && video_encoding_enabled_ != nullptr) {
    delete video_encoding_enabled_;
  }
  video_encoding_enabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTransformConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_encoding_enabled(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamTransformConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.StreamTransformConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
  if (this->_internal_has_video_encoding_enabled()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::video_encoding_enabled(this),
        _Internal::video_encoding_enabled(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.StreamTransformConfiguration)
  return target;
}

size_t StreamTransformConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.StreamTransformConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
  if (this->_internal_has_video_encoding_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_encoding_enabled_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamTransformConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamTransformConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamTransformConfiguration::GetClassData() const { return &_class_data_; }

void StreamTransformConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamTransformConfiguration *>(to)->MergeFrom(
      static_cast<const StreamTransformConfiguration &>(from));
}


void StreamTransformConfiguration::MergeFrom(const StreamTransformConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.StreamTransformConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_video_encoding_enabled()) {
    _internal_mutable_video_encoding_enabled()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_video_encoding_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamTransformConfiguration::CopyFrom(const StreamTransformConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.StreamTransformConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTransformConfiguration::IsInitialized() const {
  return true;
}

void StreamTransformConfiguration::InternalSwap(StreamTransformConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(video_encoding_enabled_, other->video_encoding_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTransformConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[19]);
}

// ===================================================================

class BlobData::_Internal {
 public:
};

BlobData::BlobData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.BlobData)
}
BlobData::BlobData(const BlobData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.BlobData)
}

inline void BlobData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BlobData::~BlobData() {
  // @@protoc_insertion_point(destructor:v1.model.BlobData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BlobData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void BlobData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlobData::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.BlobData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.BlobData.data"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BlobData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.BlobData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.BlobData.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.BlobData)
  return target;
}

size_t BlobData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.BlobData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BlobData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BlobData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BlobData::GetClassData() const { return &_class_data_; }

void BlobData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BlobData *>(to)->MergeFrom(
      static_cast<const BlobData &>(from));
}


void BlobData::MergeFrom(const BlobData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.BlobData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BlobData::CopyFrom(const BlobData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.BlobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobData::IsInitialized() const {
  return true;
}

void BlobData::InternalSwap(BlobData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[20]);
}

// ===================================================================

class Diagnostics::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& report_logs(const Diagnostics* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& report_metrics(const Diagnostics* msg);
};

const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Diagnostics::_Internal::report_logs(const Diagnostics* msg) {
  return *msg->report_logs_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
Diagnostics::_Internal::report_metrics(const Diagnostics* msg) {
  return *msg->report_metrics_;
}
void Diagnostics::clear_report_logs() {
  if (GetArenaForAllocation() == nullptr && report_logs_ != nullptr) {
    delete report_logs_;
  }
  report_logs_ = nullptr;
}
void Diagnostics::clear_report_metrics() {
  if (GetArenaForAllocation() == nullptr && report_metrics_ != nullptr) {
    delete report_metrics_;
  }
  report_metrics_ = nullptr;
}
Diagnostics::Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_report_logs()) {
    report_logs_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.report_logs_);
  } else {
    report_logs_ = nullptr;
  }
  if (from._internal_has_report_metrics()) {
    report_metrics_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from.report_metrics_);
  } else {
    report_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Diagnostics)
}

inline void Diagnostics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&report_logs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_metrics_) -
    reinterpret_cast<char*>(&report_logs_)) + sizeof(report_metrics_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:v1.model.Diagnostics)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Diagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete report_logs_;
  if (this != internal_default_instance()) delete report_metrics_;
}

void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Diagnostics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && report_logs_ != nullptr) {
    delete report_logs_;
  }
  report_logs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && report_metrics_ != nullptr) {
    delete report_metrics_;
  }
  report_metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnostics::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_report_logs(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Diagnostics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Diagnostics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
  if (this->_internal_has_report_logs()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::report_logs(this),
        _Internal::report_logs(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
  if (this->_internal_has_report_metrics()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::report_metrics(this),
        _Internal::report_metrics(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Diagnostics)
  return target;
}

size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Diagnostics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
  if (this->_internal_has_report_logs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_logs_);
  }

  // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
  if (this->_internal_has_report_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_metrics_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Diagnostics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Diagnostics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Diagnostics::GetClassData() const { return &_class_data_; }

void Diagnostics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Diagnostics *>(to)->MergeFrom(
      static_cast<const Diagnostics &>(from));
}


void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_report_logs()) {
    _internal_mutable_report_logs()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_report_logs());
  }
  if (from._internal_has_report_metrics()) {
    _internal_mutable_report_metrics()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_report_metrics());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  return true;
}

void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnostics, report_metrics_)
      + sizeof(Diagnostics::report_metrics_)
      - PROTOBUF_FIELD_OFFSET(Diagnostics, report_logs_)>(
          reinterpret_cast<char*>(&report_logs_),
          reinterpret_cast<char*>(&other->report_logs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[21]);
}

// ===================================================================

class Custom::_Internal {
 public:
};

Custom::Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:v1.model.Custom)
}
Custom::Custom(const Custom& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.Custom)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Custom::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Custom::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata Custom::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[22]);
}

// ===================================================================

class Hardware::_Internal {
 public:
};

Hardware::Hardware(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Hardware)
}
Hardware::Hardware(const Hardware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hw_descriptor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hw_descriptor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hw_descriptor().empty()) {
    hw_descriptor_.Set(from._internal_hw_descriptor(), 
      GetArenaForAllocation());
  }
  audio_hw_descriptor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    audio_hw_descriptor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audio_hw_descriptor().empty()) {
    audio_hw_descriptor_.Set(from._internal_audio_hw_descriptor(), 
      GetArenaForAllocation());
  }
  hardware_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    hardware_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hardware_type().empty()) {
    hardware_type_.Set(from._internal_hardware_type(), 
      GetArenaForAllocation());
  }
  ip_cam_username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_cam_username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_cam_username().empty()) {
    ip_cam_username_.Set(from._internal_ip_cam_username(), 
      GetArenaForAllocation());
  }
  ip_cam_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_cam_password_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_cam_password().empty()) {
    ip_cam_password_.Set(from._internal_ip_cam_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&rtsp_encoding_needed_, &from.rtsp_encoding_needed_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_onvif_) -
    reinterpret_cast<char*>(&rtsp_encoding_needed_)) + sizeof(is_onvif_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Hardware)
}

inline void Hardware::SharedCtor() {
hw_descriptor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hw_descriptor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
audio_hw_descriptor_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  audio_hw_descriptor_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hardware_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  hardware_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_cam_username_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_cam_username_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ip_cam_password_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_cam_password_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&rtsp_encoding_needed_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_onvif_) -
    reinterpret_cast<char*>(&rtsp_encoding_needed_)) + sizeof(is_onvif_));
}

Hardware::~Hardware() {
  // @@protoc_insertion_point(destructor:v1.model.Hardware)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Hardware::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hw_descriptor_.Destroy();
  audio_hw_descriptor_.Destroy();
  hardware_type_.Destroy();
  ip_cam_username_.Destroy();
  ip_cam_password_.Destroy();
}

void Hardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hardware::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Hardware)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hw_descriptor_.ClearToEmpty();
  audio_hw_descriptor_.ClearToEmpty();
  hardware_type_.ClearToEmpty();
  ip_cam_username_.ClearToEmpty();
  ip_cam_password_.ClearToEmpty();
  ::memset(&rtsp_encoding_needed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_onvif_) -
      reinterpret_cast<char*>(&rtsp_encoding_needed_)) + sizeof(is_onvif_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hardware::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hw_descriptor = 1 [json_name = "hwDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hw_descriptor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Hardware.hw_descriptor"));
        } else
          goto handle_unusual;
        continue;
      // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_audio_hw_descriptor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Hardware.audio_hw_descriptor"));
        } else
          goto handle_unusual;
        continue;
      // string hardware_type = 4 [json_name = "hardwareType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_hardware_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Hardware.hardware_type"));
        } else
          goto handle_unusual;
        continue;
      // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          rtsp_encoding_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_onvif = 6 [json_name = "isOnvif"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          is_onvif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ip_cam_username = 7 [json_name = "ipCamUsername"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_ip_cam_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Hardware.ip_cam_username"));
        } else
          goto handle_unusual;
        continue;
      // string ip_cam_password = 8 [json_name = "ipCamPassword"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_ip_cam_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Hardware.ip_cam_password"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Hardware::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Hardware)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hw_descriptor = 1 [json_name = "hwDescriptor"];
  if (!this->_internal_hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_descriptor().data(), static_cast<int>(this->_internal_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hw_descriptor(), target);
  }

  // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
  if (!this->_internal_audio_hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_hw_descriptor().data(), static_cast<int>(this->_internal_audio_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.audio_hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_audio_hw_descriptor(), target);
  }

  // string hardware_type = 4 [json_name = "hardwareType"];
  if (!this->_internal_hardware_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_type().data(), static_cast<int>(this->_internal_hardware_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.hardware_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hardware_type(), target);
  }

  // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
  if (this->_internal_rtsp_encoding_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_rtsp_encoding_needed(), target);
  }

  // bool is_onvif = 6 [json_name = "isOnvif"];
  if (this->_internal_is_onvif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_onvif(), target);
  }

  // string ip_cam_username = 7 [json_name = "ipCamUsername"];
  if (!this->_internal_ip_cam_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_username().data(), static_cast<int>(this->_internal_ip_cam_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.ip_cam_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip_cam_username(), target);
  }

  // string ip_cam_password = 8 [json_name = "ipCamPassword"];
  if (!this->_internal_ip_cam_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_password().data(), static_cast<int>(this->_internal_ip_cam_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.ip_cam_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ip_cam_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Hardware)
  return target;
}

size_t Hardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Hardware)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hw_descriptor = 1 [json_name = "hwDescriptor"];
  if (!this->_internal_hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_descriptor());
  }

  // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
  if (!this->_internal_audio_hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_hw_descriptor());
  }

  // string hardware_type = 4 [json_name = "hardwareType"];
  if (!this->_internal_hardware_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_type());
  }

  // string ip_cam_username = 7 [json_name = "ipCamUsername"];
  if (!this->_internal_ip_cam_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_username());
  }

  // string ip_cam_password = 8 [json_name = "ipCamPassword"];
  if (!this->_internal_ip_cam_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_password());
  }

  // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
  if (this->_internal_rtsp_encoding_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_onvif = 6 [json_name = "isOnvif"];
  if (this->_internal_is_onvif() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Hardware::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Hardware::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Hardware::GetClassData() const { return &_class_data_; }

void Hardware::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Hardware *>(to)->MergeFrom(
      static_cast<const Hardware &>(from));
}


void Hardware::MergeFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_hw_descriptor().empty()) {
    _internal_set_hw_descriptor(from._internal_hw_descriptor());
  }
  if (!from._internal_audio_hw_descriptor().empty()) {
    _internal_set_audio_hw_descriptor(from._internal_audio_hw_descriptor());
  }
  if (!from._internal_hardware_type().empty()) {
    _internal_set_hardware_type(from._internal_hardware_type());
  }
  if (!from._internal_ip_cam_username().empty()) {
    _internal_set_ip_cam_username(from._internal_ip_cam_username());
  }
  if (!from._internal_ip_cam_password().empty()) {
    _internal_set_ip_cam_password(from._internal_ip_cam_password());
  }
  if (from._internal_rtsp_encoding_needed() != 0) {
    _internal_set_rtsp_encoding_needed(from._internal_rtsp_encoding_needed());
  }
  if (from._internal_is_onvif() != 0) {
    _internal_set_is_onvif(from._internal_is_onvif());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Hardware::CopyFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hardware::IsInitialized() const {
  return true;
}

void Hardware::InternalSwap(Hardware* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hw_descriptor_, lhs_arena,
      &other->hw_descriptor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &audio_hw_descriptor_, lhs_arena,
      &other->audio_hw_descriptor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &hardware_type_, lhs_arena,
      &other->hardware_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_cam_username_, lhs_arena,
      &other->ip_cam_username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ip_cam_password_, lhs_arena,
      &other->ip_cam_password_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hardware, is_onvif_)
      + sizeof(Hardware::is_onvif_)
      - PROTOBUF_FIELD_OFFSET(Hardware, rtsp_encoding_needed_)>(
          reinterpret_cast<char*>(&rtsp_encoding_needed_),
          reinterpret_cast<char*>(&other->rtsp_encoding_needed_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hardware::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[23]);
}

// ===================================================================

class DirectoryWatch::_Internal {
 public:
};

DirectoryWatch::DirectoryWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.DirectoryWatch)
}
DirectoryWatch::DirectoryWatch(const DirectoryWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_directory().empty()) {
    directory_.Set(from._internal_directory(), 
      GetArenaForAllocation());
  }
  extension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    extension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extension().empty()) {
    extension_.Set(from._internal_extension(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_type_, &from.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_agent_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  // @@protoc_insertion_point(copy_constructor:v1.model.DirectoryWatch)
}

inline void DirectoryWatch::SharedCtor() {
directory_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  directory_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
extension_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  extension_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_agent_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
}

DirectoryWatch::~DirectoryWatch() {
  // @@protoc_insertion_point(destructor:v1.model.DirectoryWatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DirectoryWatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.Destroy();
  extension_.Destroy();
}

void DirectoryWatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectoryWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DirectoryWatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmpty();
  extension_.ClearToEmpty();
  ::memset(&file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_agent_) -
      reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryWatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string directory = 1 [json_name = "directory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.DirectoryWatch.directory"));
        } else
          goto handle_unusual;
        continue;
      // string extension = 2 [json_name = "extension"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.DirectoryWatch.extension"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.FileType file_type = 3 [json_name = "fileType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_type(static_cast<::v1::model::FileType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool remote_agent = 4 [json_name = "remoteAgent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          remote_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DirectoryWatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DirectoryWatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1 [json_name = "directory"];
  if (!this->_internal_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // string extension = 2 [json_name = "extension"];
  if (!this->_internal_extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.extension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension(), target);
  }

  // .v1.model.FileType file_type = 3 [json_name = "fileType"];
  if (this->_internal_file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_file_type(), target);
  }

  // bool remote_agent = 4 [json_name = "remoteAgent"];
  if (this->_internal_remote_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_remote_agent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DirectoryWatch)
  return target;
}

size_t DirectoryWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DirectoryWatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory = 1 [json_name = "directory"];
  if (!this->_internal_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  // string extension = 2 [json_name = "extension"];
  if (!this->_internal_extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // .v1.model.FileType file_type = 3 [json_name = "fileType"];
  if (this->_internal_file_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_file_type());
  }

  // bool remote_agent = 4 [json_name = "remoteAgent"];
  if (this->_internal_remote_agent() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DirectoryWatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DirectoryWatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DirectoryWatch::GetClassData() const { return &_class_data_; }

void DirectoryWatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DirectoryWatch *>(to)->MergeFrom(
      static_cast<const DirectoryWatch &>(from));
}


void DirectoryWatch::MergeFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DirectoryWatch)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_directory().empty()) {
    _internal_set_directory(from._internal_directory());
  }
  if (!from._internal_extension().empty()) {
    _internal_set_extension(from._internal_extension());
  }
  if (from._internal_file_type() != 0) {
    _internal_set_file_type(from._internal_file_type());
  }
  if (from._internal_remote_agent() != 0) {
    _internal_set_remote_agent(from._internal_remote_agent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DirectoryWatch::CopyFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DirectoryWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryWatch::IsInitialized() const {
  return true;
}

void DirectoryWatch::InternalSwap(DirectoryWatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &directory_, lhs_arena,
      &other->directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &extension_, lhs_arena,
      &other->extension_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectoryWatch, remote_agent_)
      + sizeof(DirectoryWatch::remote_agent_)
      - PROTOBUF_FIELD_OFFSET(DirectoryWatch, file_type_)>(
          reinterpret_cast<char*>(&file_type_),
          reinterpret_cast<char*>(&other->file_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryWatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[24]);
}

// ===================================================================

class FileTail::_Internal {
 public:
};

FileTail::FileTail(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.FileTail)
}
FileTail::FileTail(const FileTail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    filename_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename().empty()) {
    filename_.Set(from._internal_filename(), 
      GetArenaForAllocation());
  }
  time_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_key().empty()) {
    time_key_.Set(from._internal_time_key(), 
      GetArenaForAllocation());
  }
  time_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    time_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time_format().empty()) {
    time_format_.Set(from._internal_time_format(), 
      GetArenaForAllocation());
  }
  regex_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    regex_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_regex().empty()) {
    regex_.Set(from._internal_regex(), 
      GetArenaForAllocation());
  }
  file_format_ = from.file_format_;
  // @@protoc_insertion_point(copy_constructor:v1.model.FileTail)
}

inline void FileTail::SharedCtor() {
filename_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  filename_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_key_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_key_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
time_format_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  time_format_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
regex_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  regex_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
file_format_ = 0;
}

FileTail::~FileTail() {
  // @@protoc_insertion_point(destructor:v1.model.FileTail)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileTail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.Destroy();
  time_key_.Destroy();
  time_format_.Destroy();
  regex_.Destroy();
}

void FileTail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileTail::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.FileTail)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  time_key_.ClearToEmpty();
  time_format_.ClearToEmpty();
  regex_.ClearToEmpty();
  file_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTail::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1 [json_name = "filename"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.FileTail.filename"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_format(static_cast<::v1::model::FileFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // string time_key = 3 [json_name = "timeKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_time_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.FileTail.time_key"));
        } else
          goto handle_unusual;
        continue;
      // string time_format = 4 [json_name = "timeFormat"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_time_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.FileTail.time_format"));
        } else
          goto handle_unusual;
        continue;
      // string regex = 5 [json_name = "regex"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_regex();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.FileTail.regex"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileTail::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.FileTail)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1 [json_name = "filename"];
  if (!this->_internal_filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
  if (this->_internal_file_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_file_format(), target);
  }

  // string time_key = 3 [json_name = "timeKey"];
  if (!this->_internal_time_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_key().data(), static_cast<int>(this->_internal_time_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_key(), target);
  }

  // string time_format = 4 [json_name = "timeFormat"];
  if (!this->_internal_time_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_format().data(), static_cast<int>(this->_internal_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_time_format(), target);
  }

  // string regex = 5 [json_name = "regex"];
  if (!this->_internal_regex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.regex");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.FileTail)
  return target;
}

size_t FileTail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.FileTail)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1 [json_name = "filename"];
  if (!this->_internal_filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string time_key = 3 [json_name = "timeKey"];
  if (!this->_internal_time_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_key());
  }

  // string time_format = 4 [json_name = "timeFormat"];
  if (!this->_internal_time_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_format());
  }

  // string regex = 5 [json_name = "regex"];
  if (!this->_internal_regex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
  if (this->_internal_file_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_file_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileTail::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileTail::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileTail::GetClassData() const { return &_class_data_; }

void FileTail::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileTail *>(to)->MergeFrom(
      static_cast<const FileTail &>(from));
}


void FileTail::MergeFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.FileTail)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (!from._internal_time_key().empty()) {
    _internal_set_time_key(from._internal_time_key());
  }
  if (!from._internal_time_format().empty()) {
    _internal_set_time_format(from._internal_time_format());
  }
  if (!from._internal_regex().empty()) {
    _internal_set_regex(from._internal_regex());
  }
  if (from._internal_file_format() != 0) {
    _internal_set_file_format(from._internal_file_format());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileTail::CopyFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.FileTail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTail::IsInitialized() const {
  return true;
}

void FileTail::InternalSwap(FileTail* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &filename_, lhs_arena,
      &other->filename_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_key_, lhs_arena,
      &other->time_key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &time_format_, lhs_arena,
      &other->time_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &regex_, lhs_arena,
      &other->regex_, rhs_arena
  );
  swap(file_format_, other->file_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTail::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[25]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationStore*
Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationStore >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentFeatureSet*
Arena::CreateMaybeMessage< ::v1::model::AgentFeatureSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentFeatureSet >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfiguration*
Arena::CreateMaybeMessage< ::v1::model::AgentConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument*
Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AdapterConfiguration*
Arena::CreateMaybeMessage< ::v1::model::AdapterConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AdapterConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopConfiguration*
Arena::CreateMaybeMessage< ::v1::model::TeleopConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::PortForwardingConfiguration*
Arena::CreateMaybeMessage< ::v1::model::PortForwardingConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::PortForwardingConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopRosStreamConfiguration*
Arena::CreateMaybeMessage< ::v1::model::TeleopRosStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopRosStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopHardwareStreamConfiguration*
Arena::CreateMaybeMessage< ::v1::model::TeleopHardwareStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopHardwareStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopCustomStreamConfiguration*
Arena::CreateMaybeMessage< ::v1::model::TeleopCustomStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopCustomStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TelemetryConfiguration*
Arena::CreateMaybeMessage< ::v1::model::TelemetryConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TelemetryConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration*
Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ApplicationConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ResourcesConfiguration*
Arena::CreateMaybeMessage< ::v1::model::ResourcesConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ResourcesConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DiskConfiguration*
Arena::CreateMaybeMessage< ::v1::model::DiskConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::DiskConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSConfiguration*
Arena::CreateMaybeMessage< ::v1::model::ROSConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration_TagsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration*
Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamTransformConfiguration*
Arena::CreateMaybeMessage< ::v1::model::StreamTransformConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamTransformConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::BlobData*
Arena::CreateMaybeMessage< ::v1::model::BlobData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::BlobData >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Diagnostics*
Arena::CreateMaybeMessage< ::v1::model::Diagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Diagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Custom*
Arena::CreateMaybeMessage< ::v1::model::Custom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Custom >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Hardware*
Arena::CreateMaybeMessage< ::v1::model::Hardware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Hardware >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DirectoryWatch*
Arena::CreateMaybeMessage< ::v1::model::DirectoryWatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::DirectoryWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::FileTail*
Arena::CreateMaybeMessage< ::v1::model::FileTail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::FileTail >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

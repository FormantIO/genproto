// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/config.proto

#include "protos/model/v1/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v1 {
namespace model {
constexpr AgentConfigurationStore::AgentConfigurationStore(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : agent_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr)
  , feature_set_(nullptr)
  , commands_(nullptr){}
struct AgentConfigurationStoreDefaultTypeInternal {
  constexpr AgentConfigurationStoreDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgentConfigurationStoreDefaultTypeInternal() {}
  union {
    AgentConfigurationStore _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgentConfigurationStoreDefaultTypeInternal _AgentConfigurationStore_default_instance_;
constexpr AgentFeatureSet::AgentFeatureSet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : telemetry_(false)
  , internal_telemetry_(false)
  , teleop_(false)
  , custom_events_(false)
  , triggered_events_(false)
  , ssh_(false)
  , port_forwarding_(false)
  , commands_(false)
  , interventions_(false)
  , on_demand_(false)
  , app_config_(false)
  , blob_storage_(false){}
struct AgentFeatureSetDefaultTypeInternal {
  constexpr AgentFeatureSetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgentFeatureSetDefaultTypeInternal() {}
  union {
    AgentFeatureSet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgentFeatureSetDefaultTypeInternal _AgentFeatureSet_default_instance_;
constexpr AgentConfiguration::AgentConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , document_(nullptr){}
struct AgentConfigurationDefaultTypeInternal {
  constexpr AgentConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgentConfigurationDefaultTypeInternal() {}
  union {
    AgentConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgentConfigurationDefaultTypeInternal _AgentConfiguration_default_instance_;
constexpr AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AgentConfigurationDocument_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgentConfigurationDocument_TagsEntry_DoNotUseDefaultTypeInternal _AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_;
constexpr AgentConfigurationDocument::AgentConfigurationDocument(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , adapters_()
  , telemetry_(nullptr)
  , resources_(nullptr)
  , application_(nullptr)
  , teleop_(nullptr)
  , port_forwarding_(nullptr)
  , blob_data_(nullptr)
  , diagnostics_(nullptr)
  , terminal_access_(nullptr)
  , rtc_info_(nullptr)
  , version_(int64_t{0}){}
struct AgentConfigurationDocumentDefaultTypeInternal {
  constexpr AgentConfigurationDocumentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AgentConfigurationDocumentDefaultTypeInternal() {}
  union {
    AgentConfigurationDocument _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AgentConfigurationDocumentDefaultTypeInternal _AgentConfigurationDocument_default_instance_;
constexpr AdapterConfiguration::AdapterConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , exec_command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AdapterConfigurationDefaultTypeInternal {
  constexpr AdapterConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdapterConfigurationDefaultTypeInternal() {}
  union {
    AdapterConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdapterConfigurationDefaultTypeInternal _AdapterConfiguration_default_instance_;
constexpr TeleopConfiguration::TeleopConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ros_streams_()
  , custom_streams_()
  , hardware_streams_(){}
struct TeleopConfigurationDefaultTypeInternal {
  constexpr TeleopConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleopConfigurationDefaultTypeInternal() {}
  union {
    TeleopConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleopConfigurationDefaultTypeInternal _TeleopConfiguration_default_instance_;
constexpr PortForwardingConfiguration::PortForwardingConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : enabled_(nullptr){}
struct PortForwardingConfigurationDefaultTypeInternal {
  constexpr PortForwardingConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PortForwardingConfigurationDefaultTypeInternal() {}
  union {
    PortForwardingConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PortForwardingConfigurationDefaultTypeInternal _PortForwardingConfiguration_default_instance_;
constexpr TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : topic_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_codec_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , base_reference_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , local_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , topic_type_(0)

  , mode_(0)

  , bitrate_(int64_t{0})
  , encode_video_(false)
  , overlay_clock_(false)
  , disable_adaptive_quality_(false){}
struct TeleopRosStreamConfigurationDefaultTypeInternal {
  constexpr TeleopRosStreamConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleopRosStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopRosStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleopRosStreamConfigurationDefaultTypeInternal _TeleopRosStreamConfiguration_default_instance_;
constexpr TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtc_stream_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hw_descriptor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hardware_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_cam_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_cam_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)

  , rtsp_encoding_needed_(false)
  , is_onvif_(false)
  , overlay_clock_(false)
  , disable_adaptive_quality_(false)
  , bitrate_(int64_t{0}){}
struct TeleopHardwareStreamConfigurationDefaultTypeInternal {
  constexpr TeleopHardwareStreamConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleopHardwareStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopHardwareStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleopHardwareStreamConfigurationDefaultTypeInternal _TeleopHardwareStreamConfiguration_default_instance_;
constexpr TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , rtc_stream_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mode_(0)

  , encode_video_(false)
  , overlay_clock_(false)
  , disable_adaptive_quality_(false)
  , bitrate_(int64_t{0}){}
struct TeleopCustomStreamConfigurationDefaultTypeInternal {
  constexpr TeleopCustomStreamConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TeleopCustomStreamConfigurationDefaultTypeInternal() {}
  union {
    TeleopCustomStreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TeleopCustomStreamConfigurationDefaultTypeInternal _TeleopCustomStreamConfiguration_default_instance_;
constexpr TelemetryConfiguration::TelemetryConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streams_()
  , ros_(nullptr){}
struct TelemetryConfigurationDefaultTypeInternal {
  constexpr TelemetryConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TelemetryConfigurationDefaultTypeInternal() {}
  union {
    TelemetryConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TelemetryConfigurationDefaultTypeInternal _TelemetryConfiguration_default_instance_;
constexpr ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ApplicationConfiguration_ConfigurationMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationConfiguration_ConfigurationMapEntry_DoNotUseDefaultTypeInternal _ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_;
constexpr ApplicationConfiguration::ApplicationConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : configuration_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ApplicationConfigurationDefaultTypeInternal {
  constexpr ApplicationConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationConfigurationDefaultTypeInternal() {}
  union {
    ApplicationConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationConfigurationDefaultTypeInternal _ApplicationConfiguration_default_instance_;
constexpr ResourcesConfiguration::ResourcesConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : disk_(nullptr)
  , stream_throttle_hz_(nullptr)
  , datapoint_batch_size_(uint64_t{0u})
  , datapoint_batchlifetime_ms_(uint64_t{0u})
  , asset_batch_size_(uint64_t{0u})
  , asset_batch_lifetime_ms_(uint64_t{0u})
  , low_bandwidth_agent_(false){}
struct ResourcesConfigurationDefaultTypeInternal {
  constexpr ResourcesConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesConfigurationDefaultTypeInternal() {}
  union {
    ResourcesConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesConfigurationDefaultTypeInternal _ResourcesConfiguration_default_instance_;
constexpr DiskConfiguration::DiskConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : buffer_size_(int64_t{0})
  , on_demand_buffer_size_(int64_t{0}){}
struct DiskConfigurationDefaultTypeInternal {
  constexpr DiskConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiskConfigurationDefaultTypeInternal() {}
  union {
    DiskConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiskConfigurationDefaultTypeInternal _DiskConfiguration_default_instance_;
constexpr ROSConfiguration::ROSConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : world_reference_frame_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ROSConfigurationDefaultTypeInternal {
  constexpr ROSConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ROSConfigurationDefaultTypeInternal() {}
  union {
    ROSConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ROSConfigurationDefaultTypeInternal _ROSConfiguration_default_instance_;
constexpr StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    StreamConfiguration_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamConfiguration_TagsEntry_DoNotUseDefaultTypeInternal _StreamConfiguration_TagsEntry_DoNotUse_default_instance_;
constexpr StreamConfiguration::StreamConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quality_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , throttle_hz_(nullptr)
  , disabled_(nullptr)
  , on_demand_(nullptr)
  , transform_(nullptr)
  , _oneof_case_{}{}
struct StreamConfigurationDefaultTypeInternal {
  constexpr StreamConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamConfigurationDefaultTypeInternal() {}
  union {
    StreamConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamConfigurationDefaultTypeInternal _StreamConfiguration_default_instance_;
constexpr StreamTransformConfiguration::StreamTransformConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : video_encoding_enabled_(nullptr){}
struct StreamTransformConfigurationDefaultTypeInternal {
  constexpr StreamTransformConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamTransformConfigurationDefaultTypeInternal() {}
  union {
    StreamTransformConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamTransformConfigurationDefaultTypeInternal _StreamTransformConfiguration_default_instance_;
constexpr BlobData::BlobData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BlobDataDefaultTypeInternal {
  constexpr BlobDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BlobDataDefaultTypeInternal() {}
  union {
    BlobData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BlobDataDefaultTypeInternal _BlobData_default_instance_;
constexpr Diagnostics::Diagnostics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_logs_(nullptr)
  , report_metrics_(nullptr){}
struct DiagnosticsDefaultTypeInternal {
  constexpr DiagnosticsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DiagnosticsDefaultTypeInternal() {}
  union {
    Diagnostics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DiagnosticsDefaultTypeInternal _Diagnostics_default_instance_;
constexpr Custom::Custom(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CustomDefaultTypeInternal {
  constexpr CustomDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CustomDefaultTypeInternal() {}
  union {
    Custom _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CustomDefaultTypeInternal _Custom_default_instance_;
constexpr Hardware::Hardware(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hw_descriptor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , audio_hw_descriptor_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , hardware_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_cam_username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_cam_password_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , bitrate_(int64_t{0})
  , rtsp_encoding_needed_(false)
  , is_onvif_(false)
  , overlay_clock_(false)
  , disable_adaptive_quality_(false){}
struct HardwareDefaultTypeInternal {
  constexpr HardwareDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HardwareDefaultTypeInternal() {}
  union {
    Hardware _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HardwareDefaultTypeInternal _Hardware_default_instance_;
constexpr DirectoryWatch::DirectoryWatch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : directory_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , extension_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_type_(0)

  , remote_agent_(false){}
struct DirectoryWatchDefaultTypeInternal {
  constexpr DirectoryWatchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DirectoryWatchDefaultTypeInternal() {}
  union {
    DirectoryWatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DirectoryWatchDefaultTypeInternal _DirectoryWatch_default_instance_;
constexpr FileTail::FileTail(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filename_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , time_format_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , regex_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , file_format_(0)
{}
struct FileTailDefaultTypeInternal {
  constexpr FileTailDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileTailDefaultTypeInternal() {}
  union {
    FileTail _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileTailDefaultTypeInternal _FileTail_default_instance_;
constexpr RtcInfo::RtcInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rtc_ice_transport_policies_()
  , rtc_ice_server_protocol_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , use_all_servers_(false){}
struct RtcInfoDefaultTypeInternal {
  constexpr RtcInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RtcInfoDefaultTypeInternal() {}
  union {
    RtcInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RtcInfoDefaultTypeInternal _RtcInfo_default_instance_;
}  // namespace model
}  // namespace v1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, agent_version_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, configuration_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, feature_set_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationStore, commands_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, internal_telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, teleop_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, custom_events_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, triggered_events_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, ssh_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, port_forwarding_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, commands_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, interventions_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, on_demand_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, app_config_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentFeatureSet, blob_storage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfiguration, document_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, version_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, telemetry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, resources_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, application_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, teleop_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, port_forwarding_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, blob_data_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, diagnostics_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, terminal_access_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, adapters_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AgentConfigurationDocument, rtc_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, file_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, exec_command_),
  PROTOBUF_FIELD_OFFSET(::v1::model::AdapterConfiguration, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, ros_streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, custom_streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopConfiguration, hardware_streams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::PortForwardingConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::PortForwardingConfiguration, enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, topic_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, encode_video_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, audio_codec_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, base_reference_frame_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, local_frame_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, overlay_clock_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, bitrate_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRosStreamConfiguration, disable_adaptive_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, rtc_stream_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, rtsp_encoding_needed_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, is_onvif_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, ip_cam_username_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, ip_cam_password_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, overlay_clock_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, bitrate_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopHardwareStreamConfiguration, disable_adaptive_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, rtc_stream_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, mode_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, encode_video_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, overlay_clock_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, bitrate_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopCustomStreamConfiguration, disable_adaptive_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, streams_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TelemetryConfiguration, ros_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ApplicationConfiguration, configuration_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, disk_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, stream_throttle_hz_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, low_bandwidth_agent_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, datapoint_batch_size_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, datapoint_batchlifetime_ms_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, asset_batch_size_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ResourcesConfiguration, asset_batch_lifetime_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, buffer_size_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DiskConfiguration, on_demand_buffer_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSConfiguration, world_reference_frame_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, tags_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, throttle_hz_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, disabled_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, on_demand_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, transform_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, quality_),
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamConfiguration, configuration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamTransformConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::StreamTransformConfiguration, video_encoding_enabled_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::BlobData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::BlobData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, report_logs_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Diagnostics, report_metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Custom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, audio_hw_descriptor_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, hardware_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, rtsp_encoding_needed_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, is_onvif_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, ip_cam_username_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, ip_cam_password_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, overlay_clock_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, bitrate_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Hardware, disable_adaptive_quality_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, directory_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, extension_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, file_type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::DirectoryWatch, remote_agent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, filename_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, file_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, time_format_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileTail, regex_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcInfo, rtc_ice_transport_policies_),
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcInfo, rtc_ice_server_protocol_),
  PROTOBUF_FIELD_OFFSET(::v1::model::RtcInfo, use_all_servers_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::AgentConfigurationStore)},
  { 9, -1, sizeof(::v1::model::AgentFeatureSet)},
  { 26, -1, sizeof(::v1::model::AgentConfiguration)},
  { 34, 41, sizeof(::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse)},
  { 43, -1, sizeof(::v1::model::AgentConfigurationDocument)},
  { 60, -1, sizeof(::v1::model::AdapterConfiguration)},
  { 70, -1, sizeof(::v1::model::TeleopConfiguration)},
  { 78, -1, sizeof(::v1::model::PortForwardingConfiguration)},
  { 84, -1, sizeof(::v1::model::TeleopRosStreamConfiguration)},
  { 100, -1, sizeof(::v1::model::TeleopHardwareStreamConfiguration)},
  { 118, -1, sizeof(::v1::model::TeleopCustomStreamConfiguration)},
  { 131, -1, sizeof(::v1::model::TelemetryConfiguration)},
  { 138, 145, sizeof(::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse)},
  { 147, -1, sizeof(::v1::model::ApplicationConfiguration)},
  { 153, -1, sizeof(::v1::model::ResourcesConfiguration)},
  { 165, -1, sizeof(::v1::model::DiskConfiguration)},
  { 172, -1, sizeof(::v1::model::ROSConfiguration)},
  { 178, 185, sizeof(::v1::model::StreamConfiguration_TagsEntry_DoNotUse)},
  { 187, -1, sizeof(::v1::model::StreamConfiguration)},
  { 207, -1, sizeof(::v1::model::StreamTransformConfiguration)},
  { 213, -1, sizeof(::v1::model::BlobData)},
  { 219, -1, sizeof(::v1::model::Diagnostics)},
  { 226, -1, sizeof(::v1::model::Custom)},
  { 231, -1, sizeof(::v1::model::Hardware)},
  { 246, -1, sizeof(::v1::model::DirectoryWatch)},
  { 255, -1, sizeof(::v1::model::FileTail)},
  { 265, -1, sizeof(::v1::model::RtcInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfigurationStore_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentFeatureSet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfigurationDocument_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AgentConfigurationDocument_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_AdapterConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_PortForwardingConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopRosStreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopHardwareStreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TeleopCustomStreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_TelemetryConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ApplicationConfiguration_ConfigurationMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ApplicationConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ResourcesConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_DiskConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ROSConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_StreamConfiguration_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_StreamConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_StreamTransformConfiguration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_BlobData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Diagnostics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Custom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Hardware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_DirectoryWatch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_FileTail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_RtcInfo_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034protos/model/v1/config.proto\022\010v1.model"
  "\032\036protos/model/v1/commands.proto\032\031protos"
  "/model/v1/ros.proto\032\036google/protobuf/wra"
  "ppers.proto\"\366\001\n\027AgentConfigurationStore\022"
  "#\n\ragent_version\030\001 \001(\tR\014agentVersion\022B\n\r"
  "configuration\030\002 \001(\0132\034.v1.model.AgentConf"
  "igurationR\rconfiguration\022:\n\013feature_set\030"
  "\003 \001(\0132\031.v1.model.AgentFeatureSetR\nfeatur"
  "eSet\0226\n\010commands\030\004 \001(\0132\032.v1.model.Comman"
  "dsMetadataR\010commands\"\242\003\n\017AgentFeatureSet"
  "\022\034\n\ttelemetry\030\001 \001(\010R\ttelemetry\022-\n\022intern"
  "al_telemetry\030\002 \001(\010R\021internalTelemetry\022\026\n"
  "\006teleop\030\003 \001(\010R\006teleop\022#\n\rcustom_events\030\004"
  " \001(\010R\014customEvents\022)\n\020triggered_events\030\005"
  " \001(\010R\017triggeredEvents\022\020\n\003ssh\030\006 \001(\010R\003ssh\022"
  "\'\n\017port_forwarding\030\007 \001(\010R\016portForwarding"
  "\022\032\n\010commands\030\010 \001(\010R\010commands\022$\n\rinterven"
  "tions\030\t \001(\010R\rinterventions\022\033\n\ton_demand\030"
  "\n \001(\010R\010onDemand\022\035\n\napp_config\030\013 \001(\010R\tapp"
  "Config\022!\n\014blob_storage\030\014 \001(\010R\013blobStorag"
  "e\"z\n\022AgentConfiguration\022\016\n\002id\030\001 \001(\tR\002id\022"
  "\022\n\004name\030\002 \001(\tR\004name\022@\n\010document\030\003 \001(\0132$."
  "v1.model.AgentConfigurationDocumentR\010doc"
  "ument\"\231\006\n\032AgentConfigurationDocument\022\030\n\007"
  "version\030\001 \001(\003R\007version\022B\n\004tags\030\002 \003(\0132..v"
  "1.model.AgentConfigurationDocument.TagsE"
  "ntryR\004tags\022>\n\ttelemetry\030\003 \001(\0132 .v1.model"
  ".TelemetryConfigurationR\ttelemetry\022>\n\tre"
  "sources\030\004 \001(\0132 .v1.model.ResourcesConfig"
  "urationR\tresources\022D\n\013application\030\005 \001(\0132"
  "\".v1.model.ApplicationConfigurationR\013app"
  "lication\0225\n\006teleop\030\006 \001(\0132\035.v1.model.Tele"
  "opConfigurationR\006teleop\022N\n\017port_forwardi"
  "ng\030\007 \001(\0132%.v1.model.PortForwardingConfig"
  "urationR\016portForwarding\022/\n\tblob_data\030\010 \001"
  "(\0132\022.v1.model.BlobDataR\010blobData\0227\n\013diag"
  "nostics\030\t \001(\0132\025.v1.model.DiagnosticsR\013di"
  "agnostics\022C\n\017terminal_access\030\n \001(\0132\032.goo"
  "gle.protobuf.BoolValueR\016terminalAccess\022:"
  "\n\010adapters\030\013 \003(\0132\036.v1.model.AdapterConfi"
  "gurationR\010adapters\022,\n\010rtc_info\030\014 \001(\0132\021.v"
  "1.model.RtcInfoR\007rtcInfo\0327\n\tTagsEntry\022\020\n"
  "\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028"
  "\001\"\234\001\n\024AdapterConfiguration\022\016\n\002id\030\001 \001(\tR\002"
  "id\022\022\n\004name\030\002 \001(\tR\004name\022\027\n\007file_id\030\003 \001(\tR"
  "\006fileId\022!\n\014exec_command\030\004 \001(\tR\013execComma"
  "nd\022$\n\rconfiguration\030\005 \001(\tR\rconfiguration"
  "\"\210\002\n\023TeleopConfiguration\022G\n\013ros_streams\030"
  "\001 \003(\0132&.v1.model.TeleopRosStreamConfigur"
  "ationR\nrosStreams\022P\n\016custom_streams\030\002 \003("
  "\0132).v1.model.TeleopCustomStreamConfigura"
  "tionR\rcustomStreams\022V\n\020hardware_streams\030"
  "\003 \003(\0132+.v1.model.TeleopHardwareStreamCon"
  "figurationR\017hardwareStreams\"S\n\033PortForwa"
  "rdingConfiguration\0224\n\007enabled\030\001 \001(\0132\032.go"
  "ogle.protobuf.BoolValueR\007enabled\"\310\003\n\034Tel"
  "eopRosStreamConfiguration\022\035\n\ntopic_name\030"
  "\001 \001(\tR\ttopicName\0225\n\ntopic_type\030\002 \001(\0162\026.v"
  "1.model.ROSTopicTypeR\ttopicType\022(\n\004mode\030"
  "\003 \001(\0162\024.v1.model.TeleopModeR\004mode\022!\n\014enc"
  "ode_video\030\004 \001(\010R\013encodeVideo\022\037\n\013audio_co"
  "dec\030\005 \001(\tR\naudioCodec\022\030\n\007quality\030\006 \001(\tR\007"
  "quality\0220\n\024base_reference_frame\030\007 \001(\tR\022b"
  "aseReferenceFrame\022\037\n\013local_frame\030\010 \001(\tR\n"
  "localFrame\022#\n\roverlay_clock\030\t \001(\010R\014overl"
  "ayClock\022\030\n\007bitrate\030\n \001(\003R\007bitrate\0228\n\030dis"
  "able_adaptive_quality\030\013 \001(\010R\026disableAdap"
  "tiveQuality\"\203\004\n!TeleopHardwareStreamConf"
  "iguration\022\022\n\004name\030\001 \001(\tR\004name\022&\n\017rtc_str"
  "eam_type\030\002 \001(\tR\rrtcStreamType\022(\n\004mode\030\003 "
  "\001(\0162\024.v1.model.TeleopModeR\004mode\022#\n\rhw_de"
  "scriptor\030\004 \001(\tR\014hwDescriptor\022\030\n\007quality\030"
  "\005 \001(\tR\007quality\022#\n\rhardware_type\030\006 \001(\tR\014h"
  "ardwareType\0220\n\024rtsp_encoding_needed\030\007 \001("
  "\010R\022rtspEncodingNeeded\022\031\n\010is_onvif\030\010 \001(\010R"
  "\007isOnvif\022&\n\017ip_cam_username\030\t \001(\tR\ripCam"
  "Username\022&\n\017ip_cam_password\030\n \001(\tR\ripCam"
  "Password\022#\n\roverlay_clock\030\013 \001(\010R\014overlay"
  "Clock\022\030\n\007bitrate\030\014 \001(\003R\007bitrate\0228\n\030disab"
  "le_adaptive_quality\030\r \001(\010R\026disableAdapti"
  "veQuality\"\275\002\n\037TeleopCustomStreamConfigur"
  "ation\022\022\n\004name\030\001 \001(\tR\004name\022&\n\017rtc_stream_"
  "type\030\002 \001(\tR\rrtcStreamType\022(\n\004mode\030\003 \001(\0162"
  "\024.v1.model.TeleopModeR\004mode\022!\n\014encode_vi"
  "deo\030\004 \001(\010R\013encodeVideo\022\030\n\007quality\030\005 \001(\tR"
  "\007quality\022#\n\roverlay_clock\030\006 \001(\010R\014overlay"
  "Clock\022\030\n\007bitrate\030\007 \001(\003R\007bitrate\0228\n\030disab"
  "le_adaptive_quality\030\010 \001(\010R\026disableAdapti"
  "veQuality\"\177\n\026TelemetryConfiguration\0227\n\007s"
  "treams\030\001 \003(\0132\035.v1.model.StreamConfigurat"
  "ionR\007streams\022,\n\003ros\030\002 \001(\0132\032.v1.model.ROS"
  "ConfigurationR\003ros\"\306\001\n\030ApplicationConfig"
  "uration\022e\n\021configuration_map\030\001 \003(\01328.v1."
  "model.ApplicationConfiguration.Configura"
  "tionMapEntryR\020configurationMap\032C\n\025Config"
  "urationMapEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005val"
  "ue\030\002 \001(\tR\005value:\0028\001\"\226\003\n\026ResourcesConfigu"
  "ration\022/\n\004disk\030\001 \001(\0132\033.v1.model.DiskConf"
  "igurationR\004disk\022J\n\022stream_throttle_hz\030\002 "
  "\001(\0132\034.google.protobuf.DoubleValueR\020strea"
  "mThrottleHz\022.\n\023low_bandwidth_agent\030\003 \001(\010"
  "R\021lowBandwidthAgent\0220\n\024datapoint_batch_s"
  "ize\030\004 \001(\004R\022datapointBatchSize\022<\n\032datapoi"
  "nt_batchLifetime_ms\030\005 \001(\004R\030datapointBatc"
  "hLifetimeMs\022(\n\020asset_batch_size\030\006 \001(\004R\016a"
  "ssetBatchSize\0225\n\027asset_batch_lifetime_ms"
  "\030\007 \001(\004R\024assetBatchLifetimeMs\"g\n\021DiskConf"
  "iguration\022\037\n\013buffer_size\030\001 \001(\003R\nbufferSi"
  "ze\0221\n\025on_demand_buffer_size\030\002 \001(\003R\022onDem"
  "andBufferSize\"K\n\020ROSConfiguration\0227\n\030wor"
  "ld_reference_frame_id\030\001 \001(\tR\025worldRefere"
  "nceFrameId\"\335\006\n\023StreamConfiguration\022\022\n\004na"
  "me\030\001 \001(\tR\004name\022;\n\004tags\030\002 \003(\0132\'.v1.model."
  "StreamConfiguration.TagsEntryR\004tags\0221\n\tr"
  "os_topic\030\003 \001(\0132\022.v1.model.ROSTopicH\000R\010ro"
  "sTopic\022F\n\020ros_localization\030\004 \001(\0132\031.v1.mo"
  "del.ROSLocalizationH\000R\017rosLocalization\022C"
  "\n\017directory_watch\030\005 \001(\0132\030.v1.model.Direc"
  "toryWatchH\000R\016directoryWatch\0221\n\tfile_tail"
  "\030\006 \001(\0132\022.v1.model.FileTailH\000R\010fileTail\022J"
  "\n\022ros_transform_tree\030\007 \001(\0132\032.v1.model.RO"
  "STransformTreeH\000R\020rosTransformTree\022*\n\006cu"
  "stom\030\t \001(\0132\020.v1.model.CustomH\000R\006custom\0220"
  "\n\010hardware\030\n \001(\0132\022.v1.model.HardwareH\000R\010"
  "hardware\022=\n\013throttle_hz\030\010 \001(\0132\034.google.p"
  "rotobuf.DoubleValueR\nthrottleHz\0226\n\010disab"
  "led\030\023 \001(\0132\032.google.protobuf.BoolValueR\010d"
  "isabled\0227\n\ton_demand\030\024 \001(\0132\032.google.prot"
  "obuf.BoolValueR\010onDemand\022D\n\ttransform\030\025 "
  "\001(\0132&.v1.model.StreamTransformConfigurat"
  "ionR\ttransform\022\030\n\007quality\030\026 \001(\tR\007quality"
  "\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value"
  "\030\002 \001(\tR\005value:\0028\001B\017\n\rconfiguration\"p\n\034St"
  "reamTransformConfiguration\022P\n\026video_enco"
  "ding_enabled\030\001 \001(\0132\032.google.protobuf.Boo"
  "lValueR\024videoEncodingEnabled\"\036\n\010BlobData"
  "\022\022\n\004data\030\001 \001(\tR\004data\"\215\001\n\013Diagnostics\022;\n\013"
  "report_logs\030\001 \001(\0132\032.google.protobuf.Bool"
  "ValueR\nreportLogs\022A\n\016report_metrics\030\002 \001("
  "\0132\032.google.protobuf.BoolValueR\rreportMet"
  "rics\"\010\n\006Custom\"\232\003\n\010Hardware\022#\n\rhw_descri"
  "ptor\030\001 \001(\tR\014hwDescriptor\022.\n\023audio_hw_des"
  "criptor\030\003 \001(\tR\021audioHwDescriptor\022#\n\rhard"
  "ware_type\030\004 \001(\tR\014hardwareType\0220\n\024rtsp_en"
  "coding_needed\030\005 \001(\010R\022rtspEncodingNeeded\022"
  "\031\n\010is_onvif\030\006 \001(\010R\007isOnvif\022&\n\017ip_cam_use"
  "rname\030\007 \001(\tR\ripCamUsername\022&\n\017ip_cam_pas"
  "sword\030\010 \001(\tR\ripCamPassword\022#\n\roverlay_cl"
  "ock\030\t \001(\010R\014overlayClock\022\030\n\007bitrate\030\n \001(\003"
  "R\007bitrate\0228\n\030disable_adaptive_quality\030\013 "
  "\001(\010R\026disableAdaptiveQuality\"\240\001\n\016Director"
  "yWatch\022\034\n\tdirectory\030\001 \001(\tR\tdirectory\022\034\n\t"
  "extension\030\002 \001(\tR\textension\022/\n\tfile_type\030"
  "\003 \001(\0162\022.v1.model.FileTypeR\010fileType\022!\n\014r"
  "emote_agent\030\004 \001(\010R\013remoteAgent\"\257\001\n\010FileT"
  "ail\022\032\n\010filename\030\001 \001(\tR\010filename\0225\n\013file_"
  "format\030\002 \001(\0162\024.v1.model.FileFormatR\nfile"
  "Format\022\031\n\010time_key\030\003 \001(\tR\007timeKey\022\037\n\013tim"
  "e_format\030\004 \001(\tR\ntimeFormat\022\024\n\005regex\030\005 \001("
  "\tR\005regex\"\245\001\n\007RtcInfo\022;\n\032rtc_ice_transpor"
  "t_policies\030\001 \003(\tR\027rtcIceTransportPolicie"
  "s\0225\n\027rtc_ice_server_protocol\030\002 \001(\tR\024rtcI"
  "ceServerProtocol\022&\n\017use_all_servers\030\003 \001("
  "\010R\ruseAllServers*&\n\nTeleopMode\022\013\n\007COMMAN"
  "D\020\000\022\013\n\007OBSERVE\020\001*&\n\nFileFormat\022\016\n\nPLAIN_"
  "TEXT\020\000\022\010\n\004JSON\020\001*;\n\010FileType\022\010\n\004FILE\020\000\022\t"
  "\n\005IMAGE\020\001\022\017\n\013POINT_CLOUD\020\004\022\t\n\005VIDEO\020\005B+Z"
  ")github.com/FormantIO/genproto/go/v1/mod"
  "elb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fros_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto = {
  false, false, 6730, descriptor_table_protodef_protos_2fmodel_2fv1_2fconfig_2eproto, "protos/model/v1/config.proto", 
  &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_deps, 3, 27,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fconfig_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fconfig_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TeleopMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[0];
}
bool TeleopMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[1];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FileType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fconfig_2eproto[2];
}
bool FileType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class AgentConfigurationStore::_Internal {
 public:
  static const ::v1::model::AgentConfiguration& configuration(const AgentConfigurationStore* msg);
  static const ::v1::model::AgentFeatureSet& feature_set(const AgentConfigurationStore* msg);
  static const ::v1::model::CommandsMetadata& commands(const AgentConfigurationStore* msg);
};

const ::v1::model::AgentConfiguration&
AgentConfigurationStore::_Internal::configuration(const AgentConfigurationStore* msg) {
  return *msg->configuration_;
}
const ::v1::model::AgentFeatureSet&
AgentConfigurationStore::_Internal::feature_set(const AgentConfigurationStore* msg) {
  return *msg->feature_set_;
}
const ::v1::model::CommandsMetadata&
AgentConfigurationStore::_Internal::commands(const AgentConfigurationStore* msg) {
  return *msg->commands_;
}
void AgentConfigurationStore::clear_commands() {
  if (GetArenaForAllocation() == nullptr && commands_ != nullptr) {
    delete commands_;
  }
  commands_ = nullptr;
}
AgentConfigurationStore::AgentConfigurationStore(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfigurationStore)
}
AgentConfigurationStore::AgentConfigurationStore(const AgentConfigurationStore& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  agent_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_agent_version().empty()) {
    agent_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_agent_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::v1::model::AgentConfiguration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_feature_set()) {
    feature_set_ = new ::v1::model::AgentFeatureSet(*from.feature_set_);
  } else {
    feature_set_ = nullptr;
  }
  if (from._internal_has_commands()) {
    commands_ = new ::v1::model::CommandsMetadata(*from.commands_);
  } else {
    commands_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfigurationStore)
}

void AgentConfigurationStore::SharedCtor() {
agent_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&commands_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(commands_));
}

AgentConfigurationStore::~AgentConfigurationStore() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfigurationStore)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentConfigurationStore::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  agent_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete feature_set_;
  if (this != internal_default_instance()) delete commands_;
}

void AgentConfigurationStore::ArenaDtor(void* object) {
  AgentConfigurationStore* _this = reinterpret_cast< AgentConfigurationStore* >(object);
  (void)_this;
}
void AgentConfigurationStore::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentConfigurationStore::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfigurationStore::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfigurationStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  agent_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && feature_set_ != nullptr) {
    delete feature_set_;
  }
  feature_set_ = nullptr;
  if (GetArenaForAllocation() == nullptr && commands_ != nullptr) {
    delete commands_;
  }
  commands_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfigurationStore::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string agent_version = 1 [json_name = "agentVersion"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_agent_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AgentConfigurationStore.agent_version"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.CommandsMetadata commands = 4 [json_name = "commands"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_commands(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentConfigurationStore::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfigurationStore)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string agent_version = 1 [json_name = "agentVersion"];
  if (!this->agent_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_agent_version().data(), static_cast<int>(this->_internal_agent_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfigurationStore.agent_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_agent_version(), target);
  }

  // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::configuration(this), target, stream);
  }

  // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
  if (this->has_feature_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::feature_set(this), target, stream);
  }

  // .v1.model.CommandsMetadata commands = 4 [json_name = "commands"];
  if (this->has_commands()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::commands(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfigurationStore)
  return target;
}

size_t AgentConfigurationStore::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfigurationStore)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string agent_version = 1 [json_name = "agentVersion"];
  if (!this->agent_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_agent_version());
  }

  // .v1.model.AgentConfiguration configuration = 2 [json_name = "configuration"];
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .v1.model.AgentFeatureSet feature_set = 3 [json_name = "featureSet"];
  if (this->has_feature_set()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *feature_set_);
  }

  // .v1.model.CommandsMetadata commands = 4 [json_name = "commands"];
  if (this->has_commands()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commands_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentConfigurationStore::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentConfigurationStore)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentConfigurationStore* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentConfigurationStore>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentConfigurationStore)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentConfigurationStore)
    MergeFrom(*source);
  }
}

void AgentConfigurationStore::MergeFrom(const AgentConfigurationStore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfigurationStore)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.agent_version().empty()) {
    _internal_set_agent_version(from._internal_agent_version());
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->::v1::model::AgentConfiguration::MergeFrom(from._internal_configuration());
  }
  if (from.has_feature_set()) {
    _internal_mutable_feature_set()->::v1::model::AgentFeatureSet::MergeFrom(from._internal_feature_set());
  }
  if (from.has_commands()) {
    _internal_mutable_commands()->::v1::model::CommandsMetadata::MergeFrom(from._internal_commands());
  }
}

void AgentConfigurationStore::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentConfigurationStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfigurationStore::CopyFrom(const AgentConfigurationStore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfigurationStore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigurationStore::IsInitialized() const {
  return true;
}

void AgentConfigurationStore::InternalSwap(AgentConfigurationStore* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &agent_version_, GetArenaForAllocation(),
      &other->agent_version_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentConfigurationStore, commands_)
      + sizeof(AgentConfigurationStore::commands_)
      - PROTOBUF_FIELD_OFFSET(AgentConfigurationStore, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationStore::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[0]);
}

// ===================================================================

class AgentFeatureSet::_Internal {
 public:
};

AgentFeatureSet::AgentFeatureSet(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentFeatureSet)
}
AgentFeatureSet::AgentFeatureSet(const AgentFeatureSet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&telemetry_, &from.telemetry_,
    static_cast<size_t>(reinterpret_cast<char*>(&blob_storage_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentFeatureSet)
}

void AgentFeatureSet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&blob_storage_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
}

AgentFeatureSet::~AgentFeatureSet() {
  // @@protoc_insertion_point(destructor:v1.model.AgentFeatureSet)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentFeatureSet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AgentFeatureSet::ArenaDtor(void* object) {
  AgentFeatureSet* _this = reinterpret_cast< AgentFeatureSet* >(object);
  (void)_this;
}
void AgentFeatureSet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentFeatureSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentFeatureSet::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentFeatureSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&telemetry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blob_storage_) -
      reinterpret_cast<char*>(&telemetry_)) + sizeof(blob_storage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentFeatureSet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool telemetry = 1 [json_name = "telemetry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          telemetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          internal_telemetry_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool teleop = 3 [json_name = "teleop"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          teleop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool custom_events = 4 [json_name = "customEvents"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          custom_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool triggered_events = 5 [json_name = "triggeredEvents"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          triggered_events_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool ssh = 6 [json_name = "ssh"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ssh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool port_forwarding = 7 [json_name = "portForwarding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          port_forwarding_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool commands = 8 [json_name = "commands"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          commands_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool interventions = 9 [json_name = "interventions"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          interventions_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool on_demand = 10 [json_name = "onDemand"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          on_demand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool app_config = 11 [json_name = "appConfig"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          app_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool blob_storage = 12 [json_name = "blobStorage"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          blob_storage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentFeatureSet::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentFeatureSet)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool telemetry = 1 [json_name = "telemetry"];
  if (this->telemetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_telemetry(), target);
  }

  // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
  if (this->internal_telemetry() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_internal_telemetry(), target);
  }

  // bool teleop = 3 [json_name = "teleop"];
  if (this->teleop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_teleop(), target);
  }

  // bool custom_events = 4 [json_name = "customEvents"];
  if (this->custom_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_custom_events(), target);
  }

  // bool triggered_events = 5 [json_name = "triggeredEvents"];
  if (this->triggered_events() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_triggered_events(), target);
  }

  // bool ssh = 6 [json_name = "ssh"];
  if (this->ssh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_ssh(), target);
  }

  // bool port_forwarding = 7 [json_name = "portForwarding"];
  if (this->port_forwarding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_port_forwarding(), target);
  }

  // bool commands = 8 [json_name = "commands"];
  if (this->commands() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_commands(), target);
  }

  // bool interventions = 9 [json_name = "interventions"];
  if (this->interventions() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_interventions(), target);
  }

  // bool on_demand = 10 [json_name = "onDemand"];
  if (this->on_demand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_on_demand(), target);
  }

  // bool app_config = 11 [json_name = "appConfig"];
  if (this->app_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_app_config(), target);
  }

  // bool blob_storage = 12 [json_name = "blobStorage"];
  if (this->blob_storage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(12, this->_internal_blob_storage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentFeatureSet)
  return target;
}

size_t AgentFeatureSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentFeatureSet)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool telemetry = 1 [json_name = "telemetry"];
  if (this->telemetry() != 0) {
    total_size += 1 + 1;
  }

  // bool internal_telemetry = 2 [json_name = "internalTelemetry"];
  if (this->internal_telemetry() != 0) {
    total_size += 1 + 1;
  }

  // bool teleop = 3 [json_name = "teleop"];
  if (this->teleop() != 0) {
    total_size += 1 + 1;
  }

  // bool custom_events = 4 [json_name = "customEvents"];
  if (this->custom_events() != 0) {
    total_size += 1 + 1;
  }

  // bool triggered_events = 5 [json_name = "triggeredEvents"];
  if (this->triggered_events() != 0) {
    total_size += 1 + 1;
  }

  // bool ssh = 6 [json_name = "ssh"];
  if (this->ssh() != 0) {
    total_size += 1 + 1;
  }

  // bool port_forwarding = 7 [json_name = "portForwarding"];
  if (this->port_forwarding() != 0) {
    total_size += 1 + 1;
  }

  // bool commands = 8 [json_name = "commands"];
  if (this->commands() != 0) {
    total_size += 1 + 1;
  }

  // bool interventions = 9 [json_name = "interventions"];
  if (this->interventions() != 0) {
    total_size += 1 + 1;
  }

  // bool on_demand = 10 [json_name = "onDemand"];
  if (this->on_demand() != 0) {
    total_size += 1 + 1;
  }

  // bool app_config = 11 [json_name = "appConfig"];
  if (this->app_config() != 0) {
    total_size += 1 + 1;
  }

  // bool blob_storage = 12 [json_name = "blobStorage"];
  if (this->blob_storage() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentFeatureSet::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentFeatureSet)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentFeatureSet* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentFeatureSet>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentFeatureSet)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentFeatureSet)
    MergeFrom(*source);
  }
}

void AgentFeatureSet::MergeFrom(const AgentFeatureSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentFeatureSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.telemetry() != 0) {
    _internal_set_telemetry(from._internal_telemetry());
  }
  if (from.internal_telemetry() != 0) {
    _internal_set_internal_telemetry(from._internal_internal_telemetry());
  }
  if (from.teleop() != 0) {
    _internal_set_teleop(from._internal_teleop());
  }
  if (from.custom_events() != 0) {
    _internal_set_custom_events(from._internal_custom_events());
  }
  if (from.triggered_events() != 0) {
    _internal_set_triggered_events(from._internal_triggered_events());
  }
  if (from.ssh() != 0) {
    _internal_set_ssh(from._internal_ssh());
  }
  if (from.port_forwarding() != 0) {
    _internal_set_port_forwarding(from._internal_port_forwarding());
  }
  if (from.commands() != 0) {
    _internal_set_commands(from._internal_commands());
  }
  if (from.interventions() != 0) {
    _internal_set_interventions(from._internal_interventions());
  }
  if (from.on_demand() != 0) {
    _internal_set_on_demand(from._internal_on_demand());
  }
  if (from.app_config() != 0) {
    _internal_set_app_config(from._internal_app_config());
  }
  if (from.blob_storage() != 0) {
    _internal_set_blob_storage(from._internal_blob_storage());
  }
}

void AgentFeatureSet::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentFeatureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentFeatureSet::CopyFrom(const AgentFeatureSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentFeatureSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentFeatureSet::IsInitialized() const {
  return true;
}

void AgentFeatureSet::InternalSwap(AgentFeatureSet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentFeatureSet, blob_storage_)
      + sizeof(AgentFeatureSet::blob_storage_)
      - PROTOBUF_FIELD_OFFSET(AgentFeatureSet, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentFeatureSet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[1]);
}

// ===================================================================

class AgentConfiguration::_Internal {
 public:
  static const ::v1::model::AgentConfigurationDocument& document(const AgentConfiguration* msg);
};

const ::v1::model::AgentConfigurationDocument&
AgentConfiguration::_Internal::document(const AgentConfiguration* msg) {
  return *msg->document_;
}
AgentConfiguration::AgentConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfiguration)
}
AgentConfiguration::AgentConfiguration(const AgentConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_document()) {
    document_ = new ::v1::model::AgentConfigurationDocument(*from.document_);
  } else {
    document_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfiguration)
}

void AgentConfiguration::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
document_ = nullptr;
}

AgentConfiguration::~AgentConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete document_;
}

void AgentConfiguration::ArenaDtor(void* object) {
  AgentConfiguration* _this = reinterpret_cast< AgentConfiguration* >(object);
  (void)_this;
}
void AgentConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AgentConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && document_ != nullptr) {
    delete document_;
  }
  document_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AgentConfiguration.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AgentConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_document(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AgentConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
  if (this->has_document()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::document(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfiguration)
  return target;
}

size_t AgentConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .v1.model.AgentConfigurationDocument document = 3 [json_name = "document"];
  if (this->has_document()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *document_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentConfiguration)
    MergeFrom(*source);
  }
}

void AgentConfiguration::MergeFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_document()) {
    _internal_mutable_document()->::v1::model::AgentConfigurationDocument::MergeFrom(from._internal_document());
  }
}

void AgentConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfiguration::CopyFrom(const AgentConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfiguration::IsInitialized() const {
  return true;
}

void AgentConfiguration::InternalSwap(AgentConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  swap(document_, other->document_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[2]);
}

// ===================================================================

AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse() {}
AgentConfigurationDocument_TagsEntry_DoNotUse::AgentConfigurationDocument_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AgentConfigurationDocument_TagsEntry_DoNotUse::MergeFrom(const AgentConfigurationDocument_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[3]);
}
void AgentConfigurationDocument_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class AgentConfigurationDocument::_Internal {
 public:
  static const ::v1::model::TelemetryConfiguration& telemetry(const AgentConfigurationDocument* msg);
  static const ::v1::model::ResourcesConfiguration& resources(const AgentConfigurationDocument* msg);
  static const ::v1::model::ApplicationConfiguration& application(const AgentConfigurationDocument* msg);
  static const ::v1::model::TeleopConfiguration& teleop(const AgentConfigurationDocument* msg);
  static const ::v1::model::PortForwardingConfiguration& port_forwarding(const AgentConfigurationDocument* msg);
  static const ::v1::model::BlobData& blob_data(const AgentConfigurationDocument* msg);
  static const ::v1::model::Diagnostics& diagnostics(const AgentConfigurationDocument* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& terminal_access(const AgentConfigurationDocument* msg);
  static const ::v1::model::RtcInfo& rtc_info(const AgentConfigurationDocument* msg);
};

const ::v1::model::TelemetryConfiguration&
AgentConfigurationDocument::_Internal::telemetry(const AgentConfigurationDocument* msg) {
  return *msg->telemetry_;
}
const ::v1::model::ResourcesConfiguration&
AgentConfigurationDocument::_Internal::resources(const AgentConfigurationDocument* msg) {
  return *msg->resources_;
}
const ::v1::model::ApplicationConfiguration&
AgentConfigurationDocument::_Internal::application(const AgentConfigurationDocument* msg) {
  return *msg->application_;
}
const ::v1::model::TeleopConfiguration&
AgentConfigurationDocument::_Internal::teleop(const AgentConfigurationDocument* msg) {
  return *msg->teleop_;
}
const ::v1::model::PortForwardingConfiguration&
AgentConfigurationDocument::_Internal::port_forwarding(const AgentConfigurationDocument* msg) {
  return *msg->port_forwarding_;
}
const ::v1::model::BlobData&
AgentConfigurationDocument::_Internal::blob_data(const AgentConfigurationDocument* msg) {
  return *msg->blob_data_;
}
const ::v1::model::Diagnostics&
AgentConfigurationDocument::_Internal::diagnostics(const AgentConfigurationDocument* msg) {
  return *msg->diagnostics_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
AgentConfigurationDocument::_Internal::terminal_access(const AgentConfigurationDocument* msg) {
  return *msg->terminal_access_;
}
const ::v1::model::RtcInfo&
AgentConfigurationDocument::_Internal::rtc_info(const AgentConfigurationDocument* msg) {
  return *msg->rtc_info_;
}
void AgentConfigurationDocument::clear_terminal_access() {
  if (GetArenaForAllocation() == nullptr && terminal_access_ != nullptr) {
    delete terminal_access_;
  }
  terminal_access_ = nullptr;
}
AgentConfigurationDocument::AgentConfigurationDocument(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  adapters_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.AgentConfigurationDocument)
}
AgentConfigurationDocument::AgentConfigurationDocument(const AgentConfigurationDocument& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      adapters_(from.adapters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  if (from._internal_has_telemetry()) {
    telemetry_ = new ::v1::model::TelemetryConfiguration(*from.telemetry_);
  } else {
    telemetry_ = nullptr;
  }
  if (from._internal_has_resources()) {
    resources_ = new ::v1::model::ResourcesConfiguration(*from.resources_);
  } else {
    resources_ = nullptr;
  }
  if (from._internal_has_application()) {
    application_ = new ::v1::model::ApplicationConfiguration(*from.application_);
  } else {
    application_ = nullptr;
  }
  if (from._internal_has_teleop()) {
    teleop_ = new ::v1::model::TeleopConfiguration(*from.teleop_);
  } else {
    teleop_ = nullptr;
  }
  if (from._internal_has_port_forwarding()) {
    port_forwarding_ = new ::v1::model::PortForwardingConfiguration(*from.port_forwarding_);
  } else {
    port_forwarding_ = nullptr;
  }
  if (from._internal_has_blob_data()) {
    blob_data_ = new ::v1::model::BlobData(*from.blob_data_);
  } else {
    blob_data_ = nullptr;
  }
  if (from._internal_has_diagnostics()) {
    diagnostics_ = new ::v1::model::Diagnostics(*from.diagnostics_);
  } else {
    diagnostics_ = nullptr;
  }
  if (from._internal_has_terminal_access()) {
    terminal_access_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.terminal_access_);
  } else {
    terminal_access_ = nullptr;
  }
  if (from._internal_has_rtc_info()) {
    rtc_info_ = new ::v1::model::RtcInfo(*from.rtc_info_);
  } else {
    rtc_info_ = nullptr;
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:v1.model.AgentConfigurationDocument)
}

void AgentConfigurationDocument::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&telemetry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&telemetry_)) + sizeof(version_));
}

AgentConfigurationDocument::~AgentConfigurationDocument() {
  // @@protoc_insertion_point(destructor:v1.model.AgentConfigurationDocument)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AgentConfigurationDocument::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete telemetry_;
  if (this != internal_default_instance()) delete resources_;
  if (this != internal_default_instance()) delete application_;
  if (this != internal_default_instance()) delete teleop_;
  if (this != internal_default_instance()) delete port_forwarding_;
  if (this != internal_default_instance()) delete blob_data_;
  if (this != internal_default_instance()) delete diagnostics_;
  if (this != internal_default_instance()) delete terminal_access_;
  if (this != internal_default_instance()) delete rtc_info_;
}

void AgentConfigurationDocument::ArenaDtor(void* object) {
  AgentConfigurationDocument* _this = reinterpret_cast< AgentConfigurationDocument* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void AgentConfigurationDocument::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AgentConfigurationDocument::ArenaDtor);
  }
}
void AgentConfigurationDocument::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AgentConfigurationDocument::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AgentConfigurationDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  adapters_.Clear();
  if (GetArenaForAllocation() == nullptr && telemetry_ != nullptr) {
    delete telemetry_;
  }
  telemetry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && resources_ != nullptr) {
    delete resources_;
  }
  resources_ = nullptr;
  if (GetArenaForAllocation() == nullptr && application_ != nullptr) {
    delete application_;
  }
  application_ = nullptr;
  if (GetArenaForAllocation() == nullptr && teleop_ != nullptr) {
    delete teleop_;
  }
  teleop_ = nullptr;
  if (GetArenaForAllocation() == nullptr && port_forwarding_ != nullptr) {
    delete port_forwarding_;
  }
  port_forwarding_ = nullptr;
  if (GetArenaForAllocation() == nullptr && blob_data_ != nullptr) {
    delete blob_data_;
  }
  blob_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && diagnostics_ != nullptr) {
    delete diagnostics_;
  }
  diagnostics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && terminal_access_ != nullptr) {
    delete terminal_access_;
  }
  terminal_access_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rtc_info_ != nullptr) {
    delete rtc_info_;
  }
  rtc_info_ = nullptr;
  version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AgentConfigurationDocument::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 version = 1 [json_name = "version"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_telemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_resources(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_application(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_port_forwarding(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_blob_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_diagnostics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_terminal_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_adapters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.RtcInfo rtc_info = 12 [json_name = "rtcInfo"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_rtc_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AgentConfigurationDocument::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AgentConfigurationDocument)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 version = 1 [json_name = "version"];
  if (this->version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_version(), target);
  }

  // map<string, string> tags = 2 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.AgentConfigurationDocument.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.AgentConfigurationDocument.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
  if (this->has_telemetry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::telemetry(this), target, stream);
  }

  // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
  if (this->has_resources()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::resources(this), target, stream);
  }

  // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
  if (this->has_application()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::application(this), target, stream);
  }

  // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
  if (this->has_teleop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::teleop(this), target, stream);
  }

  // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
  if (this->has_port_forwarding()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::port_forwarding(this), target, stream);
  }

  // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
  if (this->has_blob_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::blob_data(this), target, stream);
  }

  // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
  if (this->has_diagnostics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::diagnostics(this), target, stream);
  }

  // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
  if (this->has_terminal_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::terminal_access(this), target, stream);
  }

  // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_adapters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_adapters(i), target, stream);
  }

  // .v1.model.RtcInfo rtc_info = 12 [json_name = "rtcInfo"];
  if (this->has_rtc_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::rtc_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AgentConfigurationDocument)
  return target;
}

size_t AgentConfigurationDocument::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AgentConfigurationDocument)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += AgentConfigurationDocument_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .v1.model.AdapterConfiguration adapters = 11 [json_name = "adapters"];
  total_size += 1UL * this->_internal_adapters_size();
  for (const auto& msg : this->adapters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.TelemetryConfiguration telemetry = 3 [json_name = "telemetry"];
  if (this->has_telemetry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *telemetry_);
  }

  // .v1.model.ResourcesConfiguration resources = 4 [json_name = "resources"];
  if (this->has_resources()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resources_);
  }

  // .v1.model.ApplicationConfiguration application = 5 [json_name = "application"];
  if (this->has_application()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *application_);
  }

  // .v1.model.TeleopConfiguration teleop = 6 [json_name = "teleop"];
  if (this->has_teleop()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *teleop_);
  }

  // .v1.model.PortForwardingConfiguration port_forwarding = 7 [json_name = "portForwarding"];
  if (this->has_port_forwarding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *port_forwarding_);
  }

  // .v1.model.BlobData blob_data = 8 [json_name = "blobData"];
  if (this->has_blob_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blob_data_);
  }

  // .v1.model.Diagnostics diagnostics = 9 [json_name = "diagnostics"];
  if (this->has_diagnostics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *diagnostics_);
  }

  // .google.protobuf.BoolValue terminal_access = 10 [json_name = "terminalAccess"];
  if (this->has_terminal_access()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *terminal_access_);
  }

  // .v1.model.RtcInfo rtc_info = 12 [json_name = "rtcInfo"];
  if (this->has_rtc_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rtc_info_);
  }

  // int64 version = 1 [json_name = "version"];
  if (this->version() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_version());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AgentConfigurationDocument::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AgentConfigurationDocument)
  GOOGLE_DCHECK_NE(&from, this);
  const AgentConfigurationDocument* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AgentConfigurationDocument>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AgentConfigurationDocument)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AgentConfigurationDocument)
    MergeFrom(*source);
  }
}

void AgentConfigurationDocument::MergeFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AgentConfigurationDocument)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  adapters_.MergeFrom(from.adapters_);
  if (from.has_telemetry()) {
    _internal_mutable_telemetry()->::v1::model::TelemetryConfiguration::MergeFrom(from._internal_telemetry());
  }
  if (from.has_resources()) {
    _internal_mutable_resources()->::v1::model::ResourcesConfiguration::MergeFrom(from._internal_resources());
  }
  if (from.has_application()) {
    _internal_mutable_application()->::v1::model::ApplicationConfiguration::MergeFrom(from._internal_application());
  }
  if (from.has_teleop()) {
    _internal_mutable_teleop()->::v1::model::TeleopConfiguration::MergeFrom(from._internal_teleop());
  }
  if (from.has_port_forwarding()) {
    _internal_mutable_port_forwarding()->::v1::model::PortForwardingConfiguration::MergeFrom(from._internal_port_forwarding());
  }
  if (from.has_blob_data()) {
    _internal_mutable_blob_data()->::v1::model::BlobData::MergeFrom(from._internal_blob_data());
  }
  if (from.has_diagnostics()) {
    _internal_mutable_diagnostics()->::v1::model::Diagnostics::MergeFrom(from._internal_diagnostics());
  }
  if (from.has_terminal_access()) {
    _internal_mutable_terminal_access()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_terminal_access());
  }
  if (from.has_rtc_info()) {
    _internal_mutable_rtc_info()->::v1::model::RtcInfo::MergeFrom(from._internal_rtc_info());
  }
  if (from.version() != 0) {
    _internal_set_version(from._internal_version());
  }
}

void AgentConfigurationDocument::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AgentConfigurationDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfigurationDocument::CopyFrom(const AgentConfigurationDocument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AgentConfigurationDocument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigurationDocument::IsInitialized() const {
  return true;
}

void AgentConfigurationDocument::InternalSwap(AgentConfigurationDocument* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  adapters_.InternalSwap(&other->adapters_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AgentConfigurationDocument, version_)
      + sizeof(AgentConfigurationDocument::version_)
      - PROTOBUF_FIELD_OFFSET(AgentConfigurationDocument, telemetry_)>(
          reinterpret_cast<char*>(&telemetry_),
          reinterpret_cast<char*>(&other->telemetry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AgentConfigurationDocument::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[4]);
}

// ===================================================================

class AdapterConfiguration::_Internal {
 public:
};

AdapterConfiguration::AdapterConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.AdapterConfiguration)
}
AdapterConfiguration::AdapterConfiguration(const AdapterConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_id().empty()) {
    file_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_id(), 
      GetArenaForAllocation());
  }
  exec_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_exec_command().empty()) {
    exec_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_exec_command(), 
      GetArenaForAllocation());
  }
  configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_configuration().empty()) {
    configuration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_configuration(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.AdapterConfiguration)
}

void AdapterConfiguration::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
exec_command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configuration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AdapterConfiguration::~AdapterConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.AdapterConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdapterConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exec_command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configuration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AdapterConfiguration::ArenaDtor(void* object) {
  AdapterConfiguration* _this = reinterpret_cast< AdapterConfiguration* >(object);
  (void)_this;
}
void AdapterConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdapterConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdapterConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.AdapterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  file_id_.ClearToEmpty();
  exec_command_.ClearToEmpty();
  configuration_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdapterConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AdapterConfiguration.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AdapterConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_id = 3 [json_name = "fileId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_file_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AdapterConfiguration.file_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string exec_command = 4 [json_name = "execCommand"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_exec_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AdapterConfiguration.exec_command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string configuration = 5 [json_name = "configuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_configuration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.AdapterConfiguration.configuration"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdapterConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.AdapterConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string file_id = 3 [json_name = "fileId"];
  if (!this->file_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_id().data(), static_cast<int>(this->_internal_file_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.file_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_id(), target);
  }

  // string exec_command = 4 [json_name = "execCommand"];
  if (!this->exec_command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_exec_command().data(), static_cast<int>(this->_internal_exec_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.exec_command");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_exec_command(), target);
  }

  // string configuration = 5 [json_name = "configuration"];
  if (!this->configuration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_configuration().data(), static_cast<int>(this->_internal_configuration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.AdapterConfiguration.configuration");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_configuration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.AdapterConfiguration)
  return target;
}

size_t AdapterConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.AdapterConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string file_id = 3 [json_name = "fileId"];
  if (!this->file_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_id());
  }

  // string exec_command = 4 [json_name = "execCommand"];
  if (!this->exec_command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_exec_command());
  }

  // string configuration = 5 [json_name = "configuration"];
  if (!this->configuration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_configuration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdapterConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.AdapterConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const AdapterConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdapterConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.AdapterConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.AdapterConfiguration)
    MergeFrom(*source);
  }
}

void AdapterConfiguration::MergeFrom(const AdapterConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.AdapterConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.file_id().empty()) {
    _internal_set_file_id(from._internal_file_id());
  }
  if (!from.exec_command().empty()) {
    _internal_set_exec_command(from._internal_exec_command());
  }
  if (!from.configuration().empty()) {
    _internal_set_configuration(from._internal_configuration());
  }
}

void AdapterConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.AdapterConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdapterConfiguration::CopyFrom(const AdapterConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.AdapterConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdapterConfiguration::IsInitialized() const {
  return true;
}

void AdapterConfiguration::InternalSwap(AdapterConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_id_, GetArenaForAllocation(),
      &other->file_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &exec_command_, GetArenaForAllocation(),
      &other->exec_command_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &configuration_, GetArenaForAllocation(),
      &other->configuration_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AdapterConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[5]);
}

// ===================================================================

class TeleopConfiguration::_Internal {
 public:
};

TeleopConfiguration::TeleopConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ros_streams_(arena),
  custom_streams_(arena),
  hardware_streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopConfiguration)
}
TeleopConfiguration::TeleopConfiguration(const TeleopConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ros_streams_(from.ros_streams_),
      custom_streams_(from.custom_streams_),
      hardware_streams_(from.hardware_streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopConfiguration)
}

void TeleopConfiguration::SharedCtor() {
}

TeleopConfiguration::~TeleopConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleopConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TeleopConfiguration::ArenaDtor(void* object) {
  TeleopConfiguration* _this = reinterpret_cast< TeleopConfiguration* >(object);
  (void)_this;
}
void TeleopConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleopConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ros_streams_.Clear();
  custom_streams_.Clear();
  hardware_streams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ros_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_custom_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hardware_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ros_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_ros_streams(i), target, stream);
  }

  // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_custom_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_custom_streams(i), target, stream);
  }

  // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_hardware_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_hardware_streams(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopConfiguration)
  return target;
}

size_t TeleopConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.TeleopRosStreamConfiguration ros_streams = 1 [json_name = "rosStreams"];
  total_size += 1UL * this->_internal_ros_streams_size();
  for (const auto& msg : this->ros_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.TeleopCustomStreamConfiguration custom_streams = 2 [json_name = "customStreams"];
  total_size += 1UL * this->_internal_custom_streams_size();
  for (const auto& msg : this->custom_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.TeleopHardwareStreamConfiguration hardware_streams = 3 [json_name = "hardwareStreams"];
  total_size += 1UL * this->_internal_hardware_streams_size();
  for (const auto& msg : this->hardware_streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopConfiguration)
    MergeFrom(*source);
  }
}

void TeleopConfiguration::MergeFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ros_streams_.MergeFrom(from.ros_streams_);
  custom_streams_.MergeFrom(from.custom_streams_);
  hardware_streams_.MergeFrom(from.hardware_streams_);
}

void TeleopConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopConfiguration::CopyFrom(const TeleopConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopConfiguration::IsInitialized() const {
  return true;
}

void TeleopConfiguration::InternalSwap(TeleopConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ros_streams_.InternalSwap(&other->ros_streams_);
  custom_streams_.InternalSwap(&other->custom_streams_);
  hardware_streams_.InternalSwap(&other->hardware_streams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[6]);
}

// ===================================================================

class PortForwardingConfiguration::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& enabled(const PortForwardingConfiguration* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
PortForwardingConfiguration::_Internal::enabled(const PortForwardingConfiguration* msg) {
  return *msg->enabled_;
}
void PortForwardingConfiguration::clear_enabled() {
  if (GetArenaForAllocation() == nullptr && enabled_ != nullptr) {
    delete enabled_;
  }
  enabled_ = nullptr;
}
PortForwardingConfiguration::PortForwardingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.PortForwardingConfiguration)
}
PortForwardingConfiguration::PortForwardingConfiguration(const PortForwardingConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_enabled()) {
    enabled_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.enabled_);
  } else {
    enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.PortForwardingConfiguration)
}

void PortForwardingConfiguration::SharedCtor() {
enabled_ = nullptr;
}

PortForwardingConfiguration::~PortForwardingConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.PortForwardingConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PortForwardingConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete enabled_;
}

void PortForwardingConfiguration::ArenaDtor(void* object) {
  PortForwardingConfiguration* _this = reinterpret_cast< PortForwardingConfiguration* >(object);
  (void)_this;
}
void PortForwardingConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PortForwardingConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PortForwardingConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.PortForwardingConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && enabled_ != nullptr) {
    delete enabled_;
  }
  enabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PortForwardingConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PortForwardingConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.PortForwardingConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
  if (this->has_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::enabled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.PortForwardingConfiguration)
  return target;
}

size_t PortForwardingConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.PortForwardingConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue enabled = 1 [json_name = "enabled"];
  if (this->has_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enabled_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PortForwardingConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.PortForwardingConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const PortForwardingConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PortForwardingConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.PortForwardingConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.PortForwardingConfiguration)
    MergeFrom(*source);
  }
}

void PortForwardingConfiguration::MergeFrom(const PortForwardingConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.PortForwardingConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_enabled()) {
    _internal_mutable_enabled()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_enabled());
  }
}

void PortForwardingConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.PortForwardingConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PortForwardingConfiguration::CopyFrom(const PortForwardingConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.PortForwardingConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PortForwardingConfiguration::IsInitialized() const {
  return true;
}

void PortForwardingConfiguration::InternalSwap(PortForwardingConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(enabled_, other->enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PortForwardingConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[7]);
}

// ===================================================================

class TeleopRosStreamConfiguration::_Internal {
 public:
};

TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopRosStreamConfiguration)
}
TeleopRosStreamConfiguration::TeleopRosStreamConfiguration(const TeleopRosStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic_name().empty()) {
    topic_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_topic_name(), 
      GetArenaForAllocation());
  }
  audio_codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_codec().empty()) {
    audio_codec_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_codec(), 
      GetArenaForAllocation());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quality(), 
      GetArenaForAllocation());
  }
  base_reference_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_base_reference_frame().empty()) {
    base_reference_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_base_reference_frame(), 
      GetArenaForAllocation());
  }
  local_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_local_frame().empty()) {
    local_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_local_frame(), 
      GetArenaForAllocation());
  }
  ::memcpy(&topic_type_, &from.topic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_adaptive_quality_) -
    reinterpret_cast<char*>(&topic_type_)) + sizeof(disable_adaptive_quality_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopRosStreamConfiguration)
}

void TeleopRosStreamConfiguration::SharedCtor() {
topic_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audio_codec_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
base_reference_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
local_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&topic_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_adaptive_quality_) -
    reinterpret_cast<char*>(&topic_type_)) + sizeof(disable_adaptive_quality_));
}

TeleopRosStreamConfiguration::~TeleopRosStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopRosStreamConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleopRosStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  topic_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_codec_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  base_reference_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  local_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleopRosStreamConfiguration::ArenaDtor(void* object) {
  TeleopRosStreamConfiguration* _this = reinterpret_cast< TeleopRosStreamConfiguration* >(object);
  (void)_this;
}
void TeleopRosStreamConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleopRosStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopRosStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopRosStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_name_.ClearToEmpty();
  audio_codec_.ClearToEmpty();
  quality_.ClearToEmpty();
  base_reference_frame_.ClearToEmpty();
  local_frame_.ClearToEmpty();
  ::memset(&topic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_adaptive_quality_) -
      reinterpret_cast<char*>(&topic_type_)) + sizeof(disable_adaptive_quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopRosStreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string topic_name = 1 [json_name = "topicName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.topic_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_topic_type(static_cast<::v1::model::ROSTopicType>(val));
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else goto handle_unusual;
        continue;
      // bool encode_video = 4 [json_name = "encodeVideo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          encode_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audio_codec = 5 [json_name = "audioCodec"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_audio_codec();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.audio_codec"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 6 [json_name = "quality"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.quality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_base_reference_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.base_reference_frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string local_frame = 8 [json_name = "localFrame"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_local_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopRosStreamConfiguration.local_frame"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlay_clock = 9 [json_name = "overlayClock"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          overlay_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bitrate = 10 [json_name = "bitrate"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          disable_adaptive_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopRosStreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopRosStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic_name = 1 [json_name = "topicName"];
  if (!this->topic_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic_name().data(), static_cast<int>(this->_internal_topic_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.topic_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic_name(), target);
  }

  // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
  if (this->topic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_topic_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->encode_video() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_encode_video(), target);
  }

  // string audio_codec = 5 [json_name = "audioCodec"];
  if (!this->audio_codec().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_codec().data(), static_cast<int>(this->_internal_audio_codec().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.audio_codec");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_audio_codec(), target);
  }

  // string quality = 6 [json_name = "quality"];
  if (!this->quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_quality(), target);
  }

  // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
  if (!this->base_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_reference_frame().data(), static_cast<int>(this->_internal_base_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.base_reference_frame");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_base_reference_frame(), target);
  }

  // string local_frame = 8 [json_name = "localFrame"];
  if (!this->local_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_frame().data(), static_cast<int>(this->_internal_local_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRosStreamConfiguration.local_frame");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_local_frame(), target);
  }

  // bool overlay_clock = 9 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_overlay_clock(), target);
  }

  // int64 bitrate = 10 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_bitrate(), target);
  }

  // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_disable_adaptive_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopRosStreamConfiguration)
  return target;
}

size_t TeleopRosStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopRosStreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic_name = 1 [json_name = "topicName"];
  if (!this->topic_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic_name());
  }

  // string audio_codec = 5 [json_name = "audioCodec"];
  if (!this->audio_codec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_codec());
  }

  // string quality = 6 [json_name = "quality"];
  if (!this->quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // string base_reference_frame = 7 [json_name = "baseReferenceFrame"];
  if (!this->base_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_reference_frame());
  }

  // string local_frame = 8 [json_name = "localFrame"];
  if (!this->local_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_frame());
  }

  // .v1.model.ROSTopicType topic_type = 2 [json_name = "topicType"];
  if (this->topic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_topic_type());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // int64 bitrate = 10 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bitrate());
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->encode_video() != 0) {
    total_size += 1 + 1;
  }

  // bool overlay_clock = 9 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopRosStreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopRosStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopRosStreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopRosStreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopRosStreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopRosStreamConfiguration)
    MergeFrom(*source);
  }
}

void TeleopRosStreamConfiguration::MergeFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopRosStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.topic_name().empty()) {
    _internal_set_topic_name(from._internal_topic_name());
  }
  if (!from.audio_codec().empty()) {
    _internal_set_audio_codec(from._internal_audio_codec());
  }
  if (!from.quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (!from.base_reference_frame().empty()) {
    _internal_set_base_reference_frame(from._internal_base_reference_frame());
  }
  if (!from.local_frame().empty()) {
    _internal_set_local_frame(from._internal_local_frame());
  }
  if (from.topic_type() != 0) {
    _internal_set_topic_type(from._internal_topic_type());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  if (from.encode_video() != 0) {
    _internal_set_encode_video(from._internal_encode_video());
  }
  if (from.overlay_clock() != 0) {
    _internal_set_overlay_clock(from._internal_overlay_clock());
  }
  if (from.disable_adaptive_quality() != 0) {
    _internal_set_disable_adaptive_quality(from._internal_disable_adaptive_quality());
  }
}

void TeleopRosStreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopRosStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopRosStreamConfiguration::CopyFrom(const TeleopRosStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopRosStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopRosStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopRosStreamConfiguration::InternalSwap(TeleopRosStreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &topic_name_, GetArenaForAllocation(),
      &other->topic_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_codec_, GetArenaForAllocation(),
      &other->audio_codec_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quality_, GetArenaForAllocation(),
      &other->quality_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &base_reference_frame_, GetArenaForAllocation(),
      &other->base_reference_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &local_frame_, GetArenaForAllocation(),
      &other->local_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopRosStreamConfiguration, disable_adaptive_quality_)
      + sizeof(TeleopRosStreamConfiguration::disable_adaptive_quality_)
      - PROTOBUF_FIELD_OFFSET(TeleopRosStreamConfiguration, topic_type_)>(
          reinterpret_cast<char*>(&topic_type_),
          reinterpret_cast<char*>(&other->topic_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopRosStreamConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[8]);
}

// ===================================================================

class TeleopHardwareStreamConfiguration::_Internal {
 public:
};

TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopHardwareStreamConfiguration)
}
TeleopHardwareStreamConfiguration::TeleopHardwareStreamConfiguration(const TeleopHardwareStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  rtc_stream_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rtc_stream_type().empty()) {
    rtc_stream_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtc_stream_type(), 
      GetArenaForAllocation());
  }
  hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hw_descriptor().empty()) {
    hw_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hw_descriptor(), 
      GetArenaForAllocation());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quality(), 
      GetArenaForAllocation());
  }
  hardware_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hardware_type().empty()) {
    hardware_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hardware_type(), 
      GetArenaForAllocation());
  }
  ip_cam_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_cam_username().empty()) {
    ip_cam_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_cam_username(), 
      GetArenaForAllocation());
  }
  ip_cam_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_cam_password().empty()) {
    ip_cam_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_cam_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopHardwareStreamConfiguration)
}

void TeleopHardwareStreamConfiguration::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rtc_stream_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hardware_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_cam_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_cam_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
}

TeleopHardwareStreamConfiguration::~TeleopHardwareStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopHardwareStreamConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleopHardwareStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtc_stream_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hw_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_cam_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_cam_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleopHardwareStreamConfiguration::ArenaDtor(void* object) {
  TeleopHardwareStreamConfiguration* _this = reinterpret_cast< TeleopHardwareStreamConfiguration* >(object);
  (void)_this;
}
void TeleopHardwareStreamConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleopHardwareStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopHardwareStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopHardwareStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  rtc_stream_type_.ClearToEmpty();
  hw_descriptor_.ClearToEmpty();
  quality_.ClearToEmpty();
  hardware_type_.ClearToEmpty();
  ip_cam_username_.ClearToEmpty();
  ip_cam_password_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitrate_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopHardwareStreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rtc_stream_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.rtc_stream_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else goto handle_unusual;
        continue;
      // string hw_descriptor = 4 [json_name = "hwDescriptor"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hw_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.hw_descriptor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 5 [json_name = "quality"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.quality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hardware_type = 6 [json_name = "hardwareType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_hardware_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.hardware_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          rtsp_encoding_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_onvif = 8 [json_name = "isOnvif"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          is_onvif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_cam_username = 9 [json_name = "ipCamUsername"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_ip_cam_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.ip_cam_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_cam_password = 10 [json_name = "ipCamPassword"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_ip_cam_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopHardwareStreamConfiguration.ip_cam_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlay_clock = 11 [json_name = "overlayClock"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          overlay_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bitrate = 12 [json_name = "bitrate"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_adaptive_quality = 13 [json_name = "disableAdaptiveQuality"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          disable_adaptive_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopHardwareStreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopHardwareStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->rtc_stream_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtc_stream_type().data(), static_cast<int>(this->_internal_rtc_stream_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.rtc_stream_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtc_stream_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // string hw_descriptor = 4 [json_name = "hwDescriptor"];
  if (!this->hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_descriptor().data(), static_cast<int>(this->_internal_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hw_descriptor(), target);
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_quality(), target);
  }

  // string hardware_type = 6 [json_name = "hardwareType"];
  if (!this->hardware_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_type().data(), static_cast<int>(this->_internal_hardware_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.hardware_type");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_hardware_type(), target);
  }

  // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
  if (this->rtsp_encoding_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_rtsp_encoding_needed(), target);
  }

  // bool is_onvif = 8 [json_name = "isOnvif"];
  if (this->is_onvif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_is_onvif(), target);
  }

  // string ip_cam_username = 9 [json_name = "ipCamUsername"];
  if (!this->ip_cam_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_username().data(), static_cast<int>(this->_internal_ip_cam_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.ip_cam_username");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_ip_cam_username(), target);
  }

  // string ip_cam_password = 10 [json_name = "ipCamPassword"];
  if (!this->ip_cam_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_password().data(), static_cast<int>(this->_internal_ip_cam_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopHardwareStreamConfiguration.ip_cam_password");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_ip_cam_password(), target);
  }

  // bool overlay_clock = 11 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_overlay_clock(), target);
  }

  // int64 bitrate = 12 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_bitrate(), target);
  }

  // bool disable_adaptive_quality = 13 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_disable_adaptive_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopHardwareStreamConfiguration)
  return target;
}

size_t TeleopHardwareStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopHardwareStreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->rtc_stream_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtc_stream_type());
  }

  // string hw_descriptor = 4 [json_name = "hwDescriptor"];
  if (!this->hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_descriptor());
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // string hardware_type = 6 [json_name = "hardwareType"];
  if (!this->hardware_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_type());
  }

  // string ip_cam_username = 9 [json_name = "ipCamUsername"];
  if (!this->ip_cam_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_username());
  }

  // string ip_cam_password = 10 [json_name = "ipCamPassword"];
  if (!this->ip_cam_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_password());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool rtsp_encoding_needed = 7 [json_name = "rtspEncodingNeeded"];
  if (this->rtsp_encoding_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_onvif = 8 [json_name = "isOnvif"];
  if (this->is_onvif() != 0) {
    total_size += 1 + 1;
  }

  // bool overlay_clock = 11 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_adaptive_quality = 13 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    total_size += 1 + 1;
  }

  // int64 bitrate = 12 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bitrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopHardwareStreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopHardwareStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopHardwareStreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopHardwareStreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopHardwareStreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopHardwareStreamConfiguration)
    MergeFrom(*source);
  }
}

void TeleopHardwareStreamConfiguration::MergeFrom(const TeleopHardwareStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopHardwareStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.rtc_stream_type().empty()) {
    _internal_set_rtc_stream_type(from._internal_rtc_stream_type());
  }
  if (!from.hw_descriptor().empty()) {
    _internal_set_hw_descriptor(from._internal_hw_descriptor());
  }
  if (!from.quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (!from.hardware_type().empty()) {
    _internal_set_hardware_type(from._internal_hardware_type());
  }
  if (!from.ip_cam_username().empty()) {
    _internal_set_ip_cam_username(from._internal_ip_cam_username());
  }
  if (!from.ip_cam_password().empty()) {
    _internal_set_ip_cam_password(from._internal_ip_cam_password());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.rtsp_encoding_needed() != 0) {
    _internal_set_rtsp_encoding_needed(from._internal_rtsp_encoding_needed());
  }
  if (from.is_onvif() != 0) {
    _internal_set_is_onvif(from._internal_is_onvif());
  }
  if (from.overlay_clock() != 0) {
    _internal_set_overlay_clock(from._internal_overlay_clock());
  }
  if (from.disable_adaptive_quality() != 0) {
    _internal_set_disable_adaptive_quality(from._internal_disable_adaptive_quality());
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
}

void TeleopHardwareStreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopHardwareStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopHardwareStreamConfiguration::CopyFrom(const TeleopHardwareStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopHardwareStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopHardwareStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopHardwareStreamConfiguration::InternalSwap(TeleopHardwareStreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rtc_stream_type_, GetArenaForAllocation(),
      &other->rtc_stream_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hw_descriptor_, GetArenaForAllocation(),
      &other->hw_descriptor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quality_, GetArenaForAllocation(),
      &other->quality_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hardware_type_, GetArenaForAllocation(),
      &other->hardware_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_cam_username_, GetArenaForAllocation(),
      &other->ip_cam_username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_cam_password_, GetArenaForAllocation(),
      &other->ip_cam_password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopHardwareStreamConfiguration, bitrate_)
      + sizeof(TeleopHardwareStreamConfiguration::bitrate_)
      - PROTOBUF_FIELD_OFFSET(TeleopHardwareStreamConfiguration, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopHardwareStreamConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[9]);
}

// ===================================================================

class TeleopCustomStreamConfiguration::_Internal {
 public:
};

TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopCustomStreamConfiguration)
}
TeleopCustomStreamConfiguration::TeleopCustomStreamConfiguration(const TeleopCustomStreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  rtc_stream_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rtc_stream_type().empty()) {
    rtc_stream_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtc_stream_type(), 
      GetArenaForAllocation());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quality(), 
      GetArenaForAllocation());
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopCustomStreamConfiguration)
}

void TeleopCustomStreamConfiguration::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
rtc_stream_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&mode_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&bitrate_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
}

TeleopCustomStreamConfiguration::~TeleopCustomStreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopCustomStreamConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TeleopCustomStreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rtc_stream_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TeleopCustomStreamConfiguration::ArenaDtor(void* object) {
  TeleopCustomStreamConfiguration* _this = reinterpret_cast< TeleopCustomStreamConfiguration* >(object);
  (void)_this;
}
void TeleopCustomStreamConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TeleopCustomStreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopCustomStreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopCustomStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  rtc_stream_type_.ClearToEmpty();
  quality_.ClearToEmpty();
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bitrate_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(bitrate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopCustomStreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rtc_stream_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.rtc_stream_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::v1::model::TeleopMode>(val));
        } else goto handle_unusual;
        continue;
      // bool encode_video = 4 [json_name = "encodeVideo"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          encode_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 5 [json_name = "quality"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.TeleopCustomStreamConfiguration.quality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlay_clock = 6 [json_name = "overlayClock"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          overlay_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bitrate = 7 [json_name = "bitrate"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_adaptive_quality = 8 [json_name = "disableAdaptiveQuality"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          disable_adaptive_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TeleopCustomStreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopCustomStreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->rtc_stream_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtc_stream_type().data(), static_cast<int>(this->_internal_rtc_stream_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.rtc_stream_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtc_stream_type(), target);
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_mode(), target);
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->encode_video() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_encode_video(), target);
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopCustomStreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_quality(), target);
  }

  // bool overlay_clock = 6 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_overlay_clock(), target);
  }

  // int64 bitrate = 7 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(7, this->_internal_bitrate(), target);
  }

  // bool disable_adaptive_quality = 8 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_disable_adaptive_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopCustomStreamConfiguration)
  return target;
}

size_t TeleopCustomStreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopCustomStreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string rtc_stream_type = 2 [json_name = "rtcStreamType"];
  if (!this->rtc_stream_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtc_stream_type());
  }

  // string quality = 5 [json_name = "quality"];
  if (!this->quality().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // .v1.model.TeleopMode mode = 3 [json_name = "mode"];
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // bool encode_video = 4 [json_name = "encodeVideo"];
  if (this->encode_video() != 0) {
    total_size += 1 + 1;
  }

  // bool overlay_clock = 6 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_adaptive_quality = 8 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    total_size += 1 + 1;
  }

  // int64 bitrate = 7 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bitrate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleopCustomStreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TeleopCustomStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleopCustomStreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TeleopCustomStreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TeleopCustomStreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TeleopCustomStreamConfiguration)
    MergeFrom(*source);
  }
}

void TeleopCustomStreamConfiguration::MergeFrom(const TeleopCustomStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopCustomStreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.rtc_stream_type().empty()) {
    _internal_set_rtc_stream_type(from._internal_rtc_stream_type());
  }
  if (!from.quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.encode_video() != 0) {
    _internal_set_encode_video(from._internal_encode_video());
  }
  if (from.overlay_clock() != 0) {
    _internal_set_overlay_clock(from._internal_overlay_clock());
  }
  if (from.disable_adaptive_quality() != 0) {
    _internal_set_disable_adaptive_quality(from._internal_disable_adaptive_quality());
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
}

void TeleopCustomStreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TeleopCustomStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleopCustomStreamConfiguration::CopyFrom(const TeleopCustomStreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopCustomStreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopCustomStreamConfiguration::IsInitialized() const {
  return true;
}

void TeleopCustomStreamConfiguration::InternalSwap(TeleopCustomStreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rtc_stream_type_, GetArenaForAllocation(),
      &other->rtc_stream_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quality_, GetArenaForAllocation(),
      &other->quality_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TeleopCustomStreamConfiguration, bitrate_)
      + sizeof(TeleopCustomStreamConfiguration::bitrate_)
      - PROTOBUF_FIELD_OFFSET(TeleopCustomStreamConfiguration, mode_)>(
          reinterpret_cast<char*>(&mode_),
          reinterpret_cast<char*>(&other->mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopCustomStreamConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[10]);
}

// ===================================================================

class TelemetryConfiguration::_Internal {
 public:
  static const ::v1::model::ROSConfiguration& ros(const TelemetryConfiguration* msg);
};

const ::v1::model::ROSConfiguration&
TelemetryConfiguration::_Internal::ros(const TelemetryConfiguration* msg) {
  return *msg->ros_;
}
TelemetryConfiguration::TelemetryConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  streams_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.TelemetryConfiguration)
}
TelemetryConfiguration::TelemetryConfiguration(const TelemetryConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      streams_(from.streams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ros()) {
    ros_ = new ::v1::model::ROSConfiguration(*from.ros_);
  } else {
    ros_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TelemetryConfiguration)
}

void TelemetryConfiguration::SharedCtor() {
ros_ = nullptr;
}

TelemetryConfiguration::~TelemetryConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.TelemetryConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TelemetryConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ros_;
}

void TelemetryConfiguration::ArenaDtor(void* object) {
  TelemetryConfiguration* _this = reinterpret_cast< TelemetryConfiguration* >(object);
  (void)_this;
}
void TelemetryConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TelemetryConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TelemetryConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TelemetryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streams_.Clear();
  if (GetArenaForAllocation() == nullptr && ros_ != nullptr) {
    delete ros_;
  }
  ros_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TelemetryConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_streams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TelemetryConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_streams_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_streams(i), target, stream);
  }

  // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
  if (this->has_ros()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ros(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TelemetryConfiguration)
  return target;
}

size_t TelemetryConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TelemetryConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
  total_size += 1UL * this->_internal_streams_size();
  for (const auto& msg : this->streams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.ROSConfiguration ros = 2 [json_name = "ros"];
  if (this->has_ros()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ros_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.TelemetryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.TelemetryConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.TelemetryConfiguration)
    MergeFrom(*source);
  }
}

void TelemetryConfiguration::MergeFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TelemetryConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  streams_.MergeFrom(from.streams_);
  if (from.has_ros()) {
    _internal_mutable_ros()->::v1::model::ROSConfiguration::MergeFrom(from._internal_ros());
  }
}

void TelemetryConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.TelemetryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryConfiguration::CopyFrom(const TelemetryConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TelemetryConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryConfiguration::IsInitialized() const {
  return true;
}

void TelemetryConfiguration::InternalSwap(TelemetryConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  streams_.InternalSwap(&other->streams_);
  swap(ros_, other->ros_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[11]);
}

// ===================================================================

ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse() {}
ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::MergeFrom(const ApplicationConfiguration_ConfigurationMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[12]);
}
void ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ApplicationConfiguration::_Internal {
 public:
};

ApplicationConfiguration::ApplicationConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  configuration_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ApplicationConfiguration)
}
ApplicationConfiguration::ApplicationConfiguration(const ApplicationConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  configuration_map_.MergeFrom(from.configuration_map_);
  // @@protoc_insertion_point(copy_constructor:v1.model.ApplicationConfiguration)
}

void ApplicationConfiguration::SharedCtor() {
}

ApplicationConfiguration::~ApplicationConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ApplicationConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ApplicationConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ApplicationConfiguration::ArenaDtor(void* object) {
  ApplicationConfiguration* _this = reinterpret_cast< ApplicationConfiguration* >(object);
  (void)_this;
  _this->configuration_map_. ~MapField();
}
inline void ApplicationConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ApplicationConfiguration::ArenaDtor);
  }
}
void ApplicationConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ApplicationConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ApplicationConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  configuration_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ApplicationConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&configuration_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ApplicationConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ApplicationConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
  if (!this->_internal_configuration_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ApplicationConfiguration.ConfigurationMapEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ApplicationConfiguration.ConfigurationMapEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_configuration_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_configuration_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configuration_map().begin();
          it != this->_internal_configuration_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_configuration_map().begin();
          it != this->_internal_configuration_map().end(); ++it) {
        target = ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ApplicationConfiguration)
  return target;
}

size_t ApplicationConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ApplicationConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> configuration_map = 1 [json_name = "configurationMap"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_configuration_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_configuration_map().begin();
      it != this->_internal_configuration_map().end(); ++it) {
    total_size += ApplicationConfiguration_ConfigurationMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ApplicationConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ApplicationConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ApplicationConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ApplicationConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ApplicationConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ApplicationConfiguration)
    MergeFrom(*source);
  }
}

void ApplicationConfiguration::MergeFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ApplicationConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  configuration_map_.MergeFrom(from.configuration_map_);
}

void ApplicationConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ApplicationConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApplicationConfiguration::CopyFrom(const ApplicationConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ApplicationConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApplicationConfiguration::IsInitialized() const {
  return true;
}

void ApplicationConfiguration::InternalSwap(ApplicationConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  configuration_map_.InternalSwap(&other->configuration_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ApplicationConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[13]);
}

// ===================================================================

class ResourcesConfiguration::_Internal {
 public:
  static const ::v1::model::DiskConfiguration& disk(const ResourcesConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& stream_throttle_hz(const ResourcesConfiguration* msg);
};

const ::v1::model::DiskConfiguration&
ResourcesConfiguration::_Internal::disk(const ResourcesConfiguration* msg) {
  return *msg->disk_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
ResourcesConfiguration::_Internal::stream_throttle_hz(const ResourcesConfiguration* msg) {
  return *msg->stream_throttle_hz_;
}
void ResourcesConfiguration::clear_stream_throttle_hz() {
  if (GetArenaForAllocation() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
}
ResourcesConfiguration::ResourcesConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ResourcesConfiguration)
}
ResourcesConfiguration::ResourcesConfiguration(const ResourcesConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_disk()) {
    disk_ = new ::v1::model::DiskConfiguration(*from.disk_);
  } else {
    disk_ = nullptr;
  }
  if (from._internal_has_stream_throttle_hz()) {
    stream_throttle_hz_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.stream_throttle_hz_);
  } else {
    stream_throttle_hz_ = nullptr;
  }
  ::memcpy(&datapoint_batch_size_, &from.datapoint_batch_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&low_bandwidth_agent_) -
    reinterpret_cast<char*>(&datapoint_batch_size_)) + sizeof(low_bandwidth_agent_));
  // @@protoc_insertion_point(copy_constructor:v1.model.ResourcesConfiguration)
}

void ResourcesConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disk_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&low_bandwidth_agent_) -
    reinterpret_cast<char*>(&disk_)) + sizeof(low_bandwidth_agent_));
}

ResourcesConfiguration::~ResourcesConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ResourcesConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ResourcesConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete disk_;
  if (this != internal_default_instance()) delete stream_throttle_hz_;
}

void ResourcesConfiguration::ArenaDtor(void* object) {
  ResourcesConfiguration* _this = reinterpret_cast< ResourcesConfiguration* >(object);
  (void)_this;
}
void ResourcesConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourcesConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourcesConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ResourcesConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && disk_ != nullptr) {
    delete disk_;
  }
  disk_ = nullptr;
  if (GetArenaForAllocation() == nullptr && stream_throttle_hz_ != nullptr) {
    delete stream_throttle_hz_;
  }
  stream_throttle_hz_ = nullptr;
  ::memset(&datapoint_batch_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&low_bandwidth_agent_) -
      reinterpret_cast<char*>(&datapoint_batch_size_)) + sizeof(low_bandwidth_agent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_disk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_throttle_hz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool low_bandwidth_agent = 3 [json_name = "lowBandwidthAgent"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          low_bandwidth_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 datapoint_batch_size = 4 [json_name = "datapointBatchSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          datapoint_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 datapoint_batchLifetime_ms = 5 [json_name = "datapointBatchLifetimeMs"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          datapoint_batchlifetime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 asset_batch_size = 6 [json_name = "assetBatchSize"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          asset_batch_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 asset_batch_lifetime_ms = 7 [json_name = "assetBatchLifetimeMs"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          asset_batch_lifetime_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcesConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ResourcesConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
  if (this->has_disk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::disk(this), target, stream);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
  if (this->has_stream_throttle_hz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream_throttle_hz(this), target, stream);
  }

  // bool low_bandwidth_agent = 3 [json_name = "lowBandwidthAgent"];
  if (this->low_bandwidth_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_low_bandwidth_agent(), target);
  }

  // uint64 datapoint_batch_size = 4 [json_name = "datapointBatchSize"];
  if (this->datapoint_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_datapoint_batch_size(), target);
  }

  // uint64 datapoint_batchLifetime_ms = 5 [json_name = "datapointBatchLifetimeMs"];
  if (this->datapoint_batchlifetime_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_datapoint_batchlifetime_ms(), target);
  }

  // uint64 asset_batch_size = 6 [json_name = "assetBatchSize"];
  if (this->asset_batch_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(6, this->_internal_asset_batch_size(), target);
  }

  // uint64 asset_batch_lifetime_ms = 7 [json_name = "assetBatchLifetimeMs"];
  if (this->asset_batch_lifetime_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_asset_batch_lifetime_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ResourcesConfiguration)
  return target;
}

size_t ResourcesConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ResourcesConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.DiskConfiguration disk = 1 [json_name = "disk"];
  if (this->has_disk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disk_);
  }

  // .google.protobuf.DoubleValue stream_throttle_hz = 2 [json_name = "streamThrottleHz"];
  if (this->has_stream_throttle_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_throttle_hz_);
  }

  // uint64 datapoint_batch_size = 4 [json_name = "datapointBatchSize"];
  if (this->datapoint_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datapoint_batch_size());
  }

  // uint64 datapoint_batchLifetime_ms = 5 [json_name = "datapointBatchLifetimeMs"];
  if (this->datapoint_batchlifetime_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_datapoint_batchlifetime_ms());
  }

  // uint64 asset_batch_size = 6 [json_name = "assetBatchSize"];
  if (this->asset_batch_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_asset_batch_size());
  }

  // uint64 asset_batch_lifetime_ms = 7 [json_name = "assetBatchLifetimeMs"];
  if (this->asset_batch_lifetime_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_asset_batch_lifetime_ms());
  }

  // bool low_bandwidth_agent = 3 [json_name = "lowBandwidthAgent"];
  if (this->low_bandwidth_agent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResourcesConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ResourcesConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ResourcesConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ResourcesConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ResourcesConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ResourcesConfiguration)
    MergeFrom(*source);
  }
}

void ResourcesConfiguration::MergeFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ResourcesConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_disk()) {
    _internal_mutable_disk()->::v1::model::DiskConfiguration::MergeFrom(from._internal_disk());
  }
  if (from.has_stream_throttle_hz()) {
    _internal_mutable_stream_throttle_hz()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_stream_throttle_hz());
  }
  if (from.datapoint_batch_size() != 0) {
    _internal_set_datapoint_batch_size(from._internal_datapoint_batch_size());
  }
  if (from.datapoint_batchlifetime_ms() != 0) {
    _internal_set_datapoint_batchlifetime_ms(from._internal_datapoint_batchlifetime_ms());
  }
  if (from.asset_batch_size() != 0) {
    _internal_set_asset_batch_size(from._internal_asset_batch_size());
  }
  if (from.asset_batch_lifetime_ms() != 0) {
    _internal_set_asset_batch_lifetime_ms(from._internal_asset_batch_lifetime_ms());
  }
  if (from.low_bandwidth_agent() != 0) {
    _internal_set_low_bandwidth_agent(from._internal_low_bandwidth_agent());
  }
}

void ResourcesConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ResourcesConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResourcesConfiguration::CopyFrom(const ResourcesConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ResourcesConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesConfiguration::IsInitialized() const {
  return true;
}

void ResourcesConfiguration::InternalSwap(ResourcesConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourcesConfiguration, low_bandwidth_agent_)
      + sizeof(ResourcesConfiguration::low_bandwidth_agent_)
      - PROTOBUF_FIELD_OFFSET(ResourcesConfiguration, disk_)>(
          reinterpret_cast<char*>(&disk_),
          reinterpret_cast<char*>(&other->disk_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[14]);
}

// ===================================================================

class DiskConfiguration::_Internal {
 public:
};

DiskConfiguration::DiskConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.DiskConfiguration)
}
DiskConfiguration::DiskConfiguration(const DiskConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&buffer_size_, &from.buffer_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&on_demand_buffer_size_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
  // @@protoc_insertion_point(copy_constructor:v1.model.DiskConfiguration)
}

void DiskConfiguration::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&buffer_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&on_demand_buffer_size_) -
    reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
}

DiskConfiguration::~DiskConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.DiskConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DiskConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DiskConfiguration::ArenaDtor(void* object) {
  DiskConfiguration* _this = reinterpret_cast< DiskConfiguration* >(object);
  (void)_this;
}
void DiskConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DiskConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DiskConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DiskConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&buffer_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&on_demand_buffer_size_) -
      reinterpret_cast<char*>(&buffer_size_)) + sizeof(on_demand_buffer_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DiskConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 buffer_size = 1 [json_name = "bufferSize"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          on_demand_buffer_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DiskConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DiskConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 buffer_size = 1 [json_name = "bufferSize"];
  if (this->buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_buffer_size(), target);
  }

  // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
  if (this->on_demand_buffer_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_on_demand_buffer_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DiskConfiguration)
  return target;
}

size_t DiskConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DiskConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 buffer_size = 1 [json_name = "bufferSize"];
  if (this->buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_buffer_size());
  }

  // int64 on_demand_buffer_size = 2 [json_name = "onDemandBufferSize"];
  if (this->on_demand_buffer_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_on_demand_buffer_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DiskConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.DiskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const DiskConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DiskConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.DiskConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.DiskConfiguration)
    MergeFrom(*source);
  }
}

void DiskConfiguration::MergeFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DiskConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.buffer_size() != 0) {
    _internal_set_buffer_size(from._internal_buffer_size());
  }
  if (from.on_demand_buffer_size() != 0) {
    _internal_set_on_demand_buffer_size(from._internal_on_demand_buffer_size());
  }
}

void DiskConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.DiskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DiskConfiguration::CopyFrom(const DiskConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DiskConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DiskConfiguration::IsInitialized() const {
  return true;
}

void DiskConfiguration::InternalSwap(DiskConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DiskConfiguration, on_demand_buffer_size_)
      + sizeof(DiskConfiguration::on_demand_buffer_size_)
      - PROTOBUF_FIELD_OFFSET(DiskConfiguration, buffer_size_)>(
          reinterpret_cast<char*>(&buffer_size_),
          reinterpret_cast<char*>(&other->buffer_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DiskConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[15]);
}

// ===================================================================

class ROSConfiguration::_Internal {
 public:
};

ROSConfiguration::ROSConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSConfiguration)
}
ROSConfiguration::ROSConfiguration(const ROSConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  world_reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_reference_frame_id().empty()) {
    world_reference_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world_reference_frame_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSConfiguration)
}

void ROSConfiguration::SharedCtor() {
world_reference_frame_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ROSConfiguration::~ROSConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ROSConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ROSConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  world_reference_frame_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ROSConfiguration::ArenaDtor(void* object) {
  ROSConfiguration* _this = reinterpret_cast< ROSConfiguration* >(object);
  (void)_this;
}
void ROSConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ROSConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  world_reference_frame_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_world_reference_frame_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ROSConfiguration.world_reference_frame_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ROSConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
  if (!this->world_reference_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_world_reference_frame_id().data(), static_cast<int>(this->_internal_world_reference_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSConfiguration.world_reference_frame_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_world_reference_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSConfiguration)
  return target;
}

size_t ROSConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string world_reference_frame_id = 1 [json_name = "worldReferenceFrameId"];
  if (!this->world_reference_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_world_reference_frame_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ROSConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ROSConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ROSConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ROSConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ROSConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ROSConfiguration)
    MergeFrom(*source);
  }
}

void ROSConfiguration::MergeFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.world_reference_frame_id().empty()) {
    _internal_set_world_reference_frame_id(from._internal_world_reference_frame_id());
  }
}

void ROSConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ROSConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ROSConfiguration::CopyFrom(const ROSConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSConfiguration::IsInitialized() const {
  return true;
}

void ROSConfiguration::InternalSwap(ROSConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_reference_frame_id_, GetArenaForAllocation(),
      &other->world_reference_frame_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[16]);
}

// ===================================================================

StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse() {}
StreamConfiguration_TagsEntry_DoNotUse::StreamConfiguration_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void StreamConfiguration_TagsEntry_DoNotUse::MergeFrom(const StreamConfiguration_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[17]);
}
void StreamConfiguration_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class StreamConfiguration::_Internal {
 public:
  static const ::v1::model::ROSTopic& ros_topic(const StreamConfiguration* msg);
  static const ::v1::model::ROSLocalization& ros_localization(const StreamConfiguration* msg);
  static const ::v1::model::DirectoryWatch& directory_watch(const StreamConfiguration* msg);
  static const ::v1::model::FileTail& file_tail(const StreamConfiguration* msg);
  static const ::v1::model::ROSTransformTree& ros_transform_tree(const StreamConfiguration* msg);
  static const ::v1::model::Custom& custom(const StreamConfiguration* msg);
  static const ::v1::model::Hardware& hardware(const StreamConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::DoubleValue& throttle_hz(const StreamConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& disabled(const StreamConfiguration* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& on_demand(const StreamConfiguration* msg);
  static const ::v1::model::StreamTransformConfiguration& transform(const StreamConfiguration* msg);
};

const ::v1::model::ROSTopic&
StreamConfiguration::_Internal::ros_topic(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_topic_;
}
const ::v1::model::ROSLocalization&
StreamConfiguration::_Internal::ros_localization(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_localization_;
}
const ::v1::model::DirectoryWatch&
StreamConfiguration::_Internal::directory_watch(const StreamConfiguration* msg) {
  return *msg->configuration_.directory_watch_;
}
const ::v1::model::FileTail&
StreamConfiguration::_Internal::file_tail(const StreamConfiguration* msg) {
  return *msg->configuration_.file_tail_;
}
const ::v1::model::ROSTransformTree&
StreamConfiguration::_Internal::ros_transform_tree(const StreamConfiguration* msg) {
  return *msg->configuration_.ros_transform_tree_;
}
const ::v1::model::Custom&
StreamConfiguration::_Internal::custom(const StreamConfiguration* msg) {
  return *msg->configuration_.custom_;
}
const ::v1::model::Hardware&
StreamConfiguration::_Internal::hardware(const StreamConfiguration* msg) {
  return *msg->configuration_.hardware_;
}
const PROTOBUF_NAMESPACE_ID::DoubleValue&
StreamConfiguration::_Internal::throttle_hz(const StreamConfiguration* msg) {
  return *msg->throttle_hz_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
StreamConfiguration::_Internal::disabled(const StreamConfiguration* msg) {
  return *msg->disabled_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
StreamConfiguration::_Internal::on_demand(const StreamConfiguration* msg) {
  return *msg->on_demand_;
}
const ::v1::model::StreamTransformConfiguration&
StreamConfiguration::_Internal::transform(const StreamConfiguration* msg) {
  return *msg->transform_;
}
void StreamConfiguration::set_allocated_ros_topic(::v1::model::ROSTopic* ros_topic) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_topic) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_topic));
    if (message_arena != submessage_arena) {
      ros_topic = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_topic, submessage_arena);
    }
    set_has_ros_topic();
    configuration_.ros_topic_ = ros_topic;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_topic)
}
void StreamConfiguration::clear_ros_topic() {
  if (_internal_has_ros_topic()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_topic_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_ros_localization(::v1::model::ROSLocalization* ros_localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_localization));
    if (message_arena != submessage_arena) {
      ros_localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_localization, submessage_arena);
    }
    set_has_ros_localization();
    configuration_.ros_localization_ = ros_localization;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_localization)
}
void StreamConfiguration::clear_ros_localization() {
  if (_internal_has_ros_localization()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_localization_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_directory_watch(::v1::model::DirectoryWatch* directory_watch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (directory_watch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::DirectoryWatch>::GetOwningArena(directory_watch);
    if (message_arena != submessage_arena) {
      directory_watch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, directory_watch, submessage_arena);
    }
    set_has_directory_watch();
    configuration_.directory_watch_ = directory_watch;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.directory_watch)
}
void StreamConfiguration::set_allocated_file_tail(::v1::model::FileTail* file_tail) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (file_tail) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::FileTail>::GetOwningArena(file_tail);
    if (message_arena != submessage_arena) {
      file_tail = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_tail, submessage_arena);
    }
    set_has_file_tail();
    configuration_.file_tail_ = file_tail;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.file_tail)
}
void StreamConfiguration::set_allocated_ros_transform_tree(::v1::model::ROSTransformTree* ros_transform_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (ros_transform_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ros_transform_tree));
    if (message_arena != submessage_arena) {
      ros_transform_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ros_transform_tree, submessage_arena);
    }
    set_has_ros_transform_tree();
    configuration_.ros_transform_tree_ = ros_transform_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.ros_transform_tree)
}
void StreamConfiguration::clear_ros_transform_tree() {
  if (_internal_has_ros_transform_tree()) {
    if (GetArenaForAllocation() == nullptr) {
      delete configuration_.ros_transform_tree_;
    }
    clear_has_configuration();
  }
}
void StreamConfiguration::set_allocated_custom(::v1::model::Custom* custom) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (custom) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Custom>::GetOwningArena(custom);
    if (message_arena != submessage_arena) {
      custom = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, custom, submessage_arena);
    }
    set_has_custom();
    configuration_.custom_ = custom;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.custom)
}
void StreamConfiguration::set_allocated_hardware(::v1::model::Hardware* hardware) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_configuration();
  if (hardware) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::v1::model::Hardware>::GetOwningArena(hardware);
    if (message_arena != submessage_arena) {
      hardware = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hardware, submessage_arena);
    }
    set_has_hardware();
    configuration_.hardware_ = hardware;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.StreamConfiguration.hardware)
}
void StreamConfiguration::clear_throttle_hz() {
  if (GetArenaForAllocation() == nullptr && throttle_hz_ != nullptr) {
    delete throttle_hz_;
  }
  throttle_hz_ = nullptr;
}
void StreamConfiguration::clear_disabled() {
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
}
void StreamConfiguration::clear_on_demand() {
  if (GetArenaForAllocation() == nullptr && on_demand_ != nullptr) {
    delete on_demand_;
  }
  on_demand_ = nullptr;
}
StreamConfiguration::StreamConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.StreamConfiguration)
}
StreamConfiguration::StreamConfiguration(const StreamConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_quality().empty()) {
    quality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_quality(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_throttle_hz()) {
    throttle_hz_ = new PROTOBUF_NAMESPACE_ID::DoubleValue(*from.throttle_hz_);
  } else {
    throttle_hz_ = nullptr;
  }
  if (from._internal_has_disabled()) {
    disabled_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.disabled_);
  } else {
    disabled_ = nullptr;
  }
  if (from._internal_has_on_demand()) {
    on_demand_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.on_demand_);
  } else {
    on_demand_ = nullptr;
  }
  if (from._internal_has_transform()) {
    transform_ = new ::v1::model::StreamTransformConfiguration(*from.transform_);
  } else {
    transform_ = nullptr;
  }
  clear_has_configuration();
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::v1::model::Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kHardware: {
      _internal_mutable_hardware()->::v1::model::Hardware::MergeFrom(from._internal_hardware());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.StreamConfiguration)
}

void StreamConfiguration::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quality_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&throttle_hz_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transform_) -
    reinterpret_cast<char*>(&throttle_hz_)) + sizeof(transform_));
clear_has_configuration();
}

StreamConfiguration::~StreamConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.StreamConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quality_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete throttle_hz_;
  if (this != internal_default_instance()) delete disabled_;
  if (this != internal_default_instance()) delete on_demand_;
  if (this != internal_default_instance()) delete transform_;
  if (has_configuration()) {
    clear_configuration();
  }
}

void StreamConfiguration::ArenaDtor(void* object) {
  StreamConfiguration* _this = reinterpret_cast< StreamConfiguration* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void StreamConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &StreamConfiguration::ArenaDtor);
  }
}
void StreamConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamConfiguration::clear_configuration() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.StreamConfiguration)
  switch (configuration_case()) {
    case kRosTopic: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_topic_;
      }
      break;
    }
    case kRosLocalization: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_localization_;
      }
      break;
    }
    case kDirectoryWatch: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.directory_watch_;
      }
      break;
    }
    case kFileTail: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.file_tail_;
      }
      break;
    }
    case kRosTransformTree: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.ros_transform_tree_;
      }
      break;
    }
    case kCustom: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.custom_;
      }
      break;
    }
    case kHardware: {
      if (GetArenaForAllocation() == nullptr) {
        delete configuration_.hardware_;
      }
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONFIGURATION_NOT_SET;
}


void StreamConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.StreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  name_.ClearToEmpty();
  quality_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && throttle_hz_ != nullptr) {
    delete throttle_hz_;
  }
  throttle_hz_ = nullptr;
  if (GetArenaForAllocation() == nullptr && disabled_ != nullptr) {
    delete disabled_;
  }
  disabled_ = nullptr;
  if (GetArenaForAllocation() == nullptr && on_demand_ != nullptr) {
    delete on_demand_;
  }
  on_demand_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transform_ != nullptr) {
    delete transform_;
  }
  transform_ = nullptr;
  clear_configuration();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.StreamConfiguration.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_topic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_directory_watch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_tail(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ros_transform_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_throttle_hz(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Custom custom = 9 [json_name = "custom"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_hardware(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_disabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_on_demand(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string quality = 22 [json_name = "quality"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_quality();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.StreamConfiguration.quality"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.StreamConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.StreamConfiguration.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> tags = 2 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.StreamConfiguration.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.StreamConfiguration.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = StreamConfiguration_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = StreamConfiguration_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
  if (_internal_has_ros_topic()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ros_topic(this), target, stream);
  }

  // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
  if (_internal_has_ros_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ros_localization(this), target, stream);
  }

  // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
  if (_internal_has_directory_watch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::directory_watch(this), target, stream);
  }

  // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
  if (_internal_has_file_tail()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::file_tail(this), target, stream);
  }

  // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
  if (_internal_has_ros_transform_tree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::ros_transform_tree(this), target, stream);
  }

  // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
  if (this->has_throttle_hz()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::throttle_hz(this), target, stream);
  }

  // .v1.model.Custom custom = 9 [json_name = "custom"];
  if (_internal_has_custom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::custom(this), target, stream);
  }

  // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
  if (_internal_has_hardware()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::hardware(this), target, stream);
  }

  // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
  if (this->has_disabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::disabled(this), target, stream);
  }

  // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
  if (this->has_on_demand()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::on_demand(this), target, stream);
  }

  // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
  if (this->has_transform()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::transform(this), target, stream);
  }

  // string quality = 22 [json_name = "quality"];
  if (!this->quality().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quality().data(), static_cast<int>(this->_internal_quality().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.StreamConfiguration.quality");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.StreamConfiguration)
  return target;
}

size_t StreamConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.StreamConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += StreamConfiguration_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string quality = 22 [json_name = "quality"];
  if (!this->quality().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quality());
  }

  // .google.protobuf.DoubleValue throttle_hz = 8 [json_name = "throttleHz"];
  if (this->has_throttle_hz()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *throttle_hz_);
  }

  // .google.protobuf.BoolValue disabled = 19 [json_name = "disabled"];
  if (this->has_disabled()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *disabled_);
  }

  // .google.protobuf.BoolValue on_demand = 20 [json_name = "onDemand"];
  if (this->has_on_demand()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *on_demand_);
  }

  // .v1.model.StreamTransformConfiguration transform = 21 [json_name = "transform"];
  if (this->has_transform()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transform_);
  }

  switch (configuration_case()) {
    // .v1.model.ROSTopic ros_topic = 3 [json_name = "rosTopic"];
    case kRosTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_topic_);
      break;
    }
    // .v1.model.ROSLocalization ros_localization = 4 [json_name = "rosLocalization"];
    case kRosLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_localization_);
      break;
    }
    // .v1.model.DirectoryWatch directory_watch = 5 [json_name = "directoryWatch"];
    case kDirectoryWatch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.directory_watch_);
      break;
    }
    // .v1.model.FileTail file_tail = 6 [json_name = "fileTail"];
    case kFileTail: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.file_tail_);
      break;
    }
    // .v1.model.ROSTransformTree ros_transform_tree = 7 [json_name = "rosTransformTree"];
    case kRosTransformTree: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.ros_transform_tree_);
      break;
    }
    // .v1.model.Custom custom = 9 [json_name = "custom"];
    case kCustom: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.custom_);
      break;
    }
    // .v1.model.Hardware hardware = 10 [json_name = "hardware"];
    case kHardware: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *configuration_.hardware_);
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.StreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.StreamConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.StreamConfiguration)
    MergeFrom(*source);
  }
}

void StreamConfiguration::MergeFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.StreamConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.quality().empty()) {
    _internal_set_quality(from._internal_quality());
  }
  if (from.has_throttle_hz()) {
    _internal_mutable_throttle_hz()->PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(from._internal_throttle_hz());
  }
  if (from.has_disabled()) {
    _internal_mutable_disabled()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_disabled());
  }
  if (from.has_on_demand()) {
    _internal_mutable_on_demand()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_on_demand());
  }
  if (from.has_transform()) {
    _internal_mutable_transform()->::v1::model::StreamTransformConfiguration::MergeFrom(from._internal_transform());
  }
  switch (from.configuration_case()) {
    case kRosTopic: {
      _internal_mutable_ros_topic()->::v1::model::ROSTopic::MergeFrom(from._internal_ros_topic());
      break;
    }
    case kRosLocalization: {
      _internal_mutable_ros_localization()->::v1::model::ROSLocalization::MergeFrom(from._internal_ros_localization());
      break;
    }
    case kDirectoryWatch: {
      _internal_mutable_directory_watch()->::v1::model::DirectoryWatch::MergeFrom(from._internal_directory_watch());
      break;
    }
    case kFileTail: {
      _internal_mutable_file_tail()->::v1::model::FileTail::MergeFrom(from._internal_file_tail());
      break;
    }
    case kRosTransformTree: {
      _internal_mutable_ros_transform_tree()->::v1::model::ROSTransformTree::MergeFrom(from._internal_ros_transform_tree());
      break;
    }
    case kCustom: {
      _internal_mutable_custom()->::v1::model::Custom::MergeFrom(from._internal_custom());
      break;
    }
    case kHardware: {
      _internal_mutable_hardware()->::v1::model::Hardware::MergeFrom(from._internal_hardware());
      break;
    }
    case CONFIGURATION_NOT_SET: {
      break;
    }
  }
}

void StreamConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.StreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamConfiguration::CopyFrom(const StreamConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.StreamConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamConfiguration::IsInitialized() const {
  return true;
}

void StreamConfiguration::InternalSwap(StreamConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &quality_, GetArenaForAllocation(),
      &other->quality_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StreamConfiguration, transform_)
      + sizeof(StreamConfiguration::transform_)
      - PROTOBUF_FIELD_OFFSET(StreamConfiguration, throttle_hz_)>(
          reinterpret_cast<char*>(&throttle_hz_),
          reinterpret_cast<char*>(&other->throttle_hz_));
  swap(configuration_, other->configuration_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[18]);
}

// ===================================================================

class StreamTransformConfiguration::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& video_encoding_enabled(const StreamTransformConfiguration* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
StreamTransformConfiguration::_Internal::video_encoding_enabled(const StreamTransformConfiguration* msg) {
  return *msg->video_encoding_enabled_;
}
void StreamTransformConfiguration::clear_video_encoding_enabled() {
  if (GetArenaForAllocation() == nullptr && video_encoding_enabled_ != nullptr) {
    delete video_encoding_enabled_;
  }
  video_encoding_enabled_ = nullptr;
}
StreamTransformConfiguration::StreamTransformConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.StreamTransformConfiguration)
}
StreamTransformConfiguration::StreamTransformConfiguration(const StreamTransformConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_video_encoding_enabled()) {
    video_encoding_enabled_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.video_encoding_enabled_);
  } else {
    video_encoding_enabled_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.StreamTransformConfiguration)
}

void StreamTransformConfiguration::SharedCtor() {
video_encoding_enabled_ = nullptr;
}

StreamTransformConfiguration::~StreamTransformConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.StreamTransformConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamTransformConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete video_encoding_enabled_;
}

void StreamTransformConfiguration::ArenaDtor(void* object) {
  StreamTransformConfiguration* _this = reinterpret_cast< StreamTransformConfiguration* >(object);
  (void)_this;
}
void StreamTransformConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamTransformConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamTransformConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.StreamTransformConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && video_encoding_enabled_ != nullptr) {
    delete video_encoding_enabled_;
  }
  video_encoding_enabled_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamTransformConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_video_encoding_enabled(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamTransformConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.StreamTransformConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
  if (this->has_video_encoding_enabled()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::video_encoding_enabled(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.StreamTransformConfiguration)
  return target;
}

size_t StreamTransformConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.StreamTransformConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue video_encoding_enabled = 1 [json_name = "videoEncodingEnabled"];
  if (this->has_video_encoding_enabled()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *video_encoding_enabled_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamTransformConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.StreamTransformConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamTransformConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamTransformConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.StreamTransformConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.StreamTransformConfiguration)
    MergeFrom(*source);
  }
}

void StreamTransformConfiguration::MergeFrom(const StreamTransformConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.StreamTransformConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_video_encoding_enabled()) {
    _internal_mutable_video_encoding_enabled()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_video_encoding_enabled());
  }
}

void StreamTransformConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.StreamTransformConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamTransformConfiguration::CopyFrom(const StreamTransformConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.StreamTransformConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamTransformConfiguration::IsInitialized() const {
  return true;
}

void StreamTransformConfiguration::InternalSwap(StreamTransformConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(video_encoding_enabled_, other->video_encoding_enabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamTransformConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[19]);
}

// ===================================================================

class BlobData::_Internal {
 public:
};

BlobData::BlobData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.BlobData)
}
BlobData::BlobData(const BlobData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.BlobData)
}

void BlobData::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

BlobData::~BlobData() {
  // @@protoc_insertion_point(destructor:v1.model.BlobData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlobData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BlobData::ArenaDtor(void* object) {
  BlobData* _this = reinterpret_cast< BlobData* >(object);
  (void)_this;
}
void BlobData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlobData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BlobData::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.BlobData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlobData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.BlobData.data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlobData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.BlobData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.BlobData.data");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.BlobData)
  return target;
}

size_t BlobData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.BlobData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 1 [json_name = "data"];
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlobData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.BlobData)
  GOOGLE_DCHECK_NE(&from, this);
  const BlobData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlobData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.BlobData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.BlobData)
    MergeFrom(*source);
  }
}

void BlobData::MergeFrom(const BlobData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.BlobData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
}

void BlobData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.BlobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobData::CopyFrom(const BlobData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.BlobData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobData::IsInitialized() const {
  return true;
}

void BlobData::InternalSwap(BlobData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BlobData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[20]);
}

// ===================================================================

class Diagnostics::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::BoolValue& report_logs(const Diagnostics* msg);
  static const PROTOBUF_NAMESPACE_ID::BoolValue& report_metrics(const Diagnostics* msg);
};

const PROTOBUF_NAMESPACE_ID::BoolValue&
Diagnostics::_Internal::report_logs(const Diagnostics* msg) {
  return *msg->report_logs_;
}
const PROTOBUF_NAMESPACE_ID::BoolValue&
Diagnostics::_Internal::report_metrics(const Diagnostics* msg) {
  return *msg->report_metrics_;
}
void Diagnostics::clear_report_logs() {
  if (GetArenaForAllocation() == nullptr && report_logs_ != nullptr) {
    delete report_logs_;
  }
  report_logs_ = nullptr;
}
void Diagnostics::clear_report_metrics() {
  if (GetArenaForAllocation() == nullptr && report_metrics_ != nullptr) {
    delete report_metrics_;
  }
  report_metrics_ = nullptr;
}
Diagnostics::Diagnostics(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Diagnostics)
}
Diagnostics::Diagnostics(const Diagnostics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_report_logs()) {
    report_logs_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.report_logs_);
  } else {
    report_logs_ = nullptr;
  }
  if (from._internal_has_report_metrics()) {
    report_metrics_ = new PROTOBUF_NAMESPACE_ID::BoolValue(*from.report_metrics_);
  } else {
    report_metrics_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Diagnostics)
}

void Diagnostics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&report_logs_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_metrics_) -
    reinterpret_cast<char*>(&report_logs_)) + sizeof(report_metrics_));
}

Diagnostics::~Diagnostics() {
  // @@protoc_insertion_point(destructor:v1.model.Diagnostics)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Diagnostics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete report_logs_;
  if (this != internal_default_instance()) delete report_metrics_;
}

void Diagnostics::ArenaDtor(void* object) {
  Diagnostics* _this = reinterpret_cast< Diagnostics* >(object);
  (void)_this;
}
void Diagnostics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Diagnostics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Diagnostics::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && report_logs_ != nullptr) {
    delete report_logs_;
  }
  report_logs_ = nullptr;
  if (GetArenaForAllocation() == nullptr && report_metrics_ != nullptr) {
    delete report_metrics_;
  }
  report_metrics_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Diagnostics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_report_logs(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_report_metrics(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Diagnostics::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Diagnostics)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
  if (this->has_report_logs()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::report_logs(this), target, stream);
  }

  // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
  if (this->has_report_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::report_metrics(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Diagnostics)
  return target;
}

size_t Diagnostics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Diagnostics)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.BoolValue report_logs = 1 [json_name = "reportLogs"];
  if (this->has_report_logs()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_logs_);
  }

  // .google.protobuf.BoolValue report_metrics = 2 [json_name = "reportMetrics"];
  if (this->has_report_metrics()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *report_metrics_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Diagnostics::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  const Diagnostics* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Diagnostics>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Diagnostics)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Diagnostics)
    MergeFrom(*source);
  }
}

void Diagnostics::MergeFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Diagnostics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_report_logs()) {
    _internal_mutable_report_logs()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_report_logs());
  }
  if (from.has_report_metrics()) {
    _internal_mutable_report_metrics()->PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(from._internal_report_metrics());
  }
}

void Diagnostics::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Diagnostics::CopyFrom(const Diagnostics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Diagnostics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Diagnostics::IsInitialized() const {
  return true;
}

void Diagnostics::InternalSwap(Diagnostics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Diagnostics, report_metrics_)
      + sizeof(Diagnostics::report_metrics_)
      - PROTOBUF_FIELD_OFFSET(Diagnostics, report_logs_)>(
          reinterpret_cast<char*>(&report_logs_),
          reinterpret_cast<char*>(&other->report_logs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Diagnostics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[21]);
}

// ===================================================================

class Custom::_Internal {
 public:
};

Custom::Custom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Custom)
}
Custom::Custom(const Custom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.Custom)
}

void Custom::SharedCtor() {
}

Custom::~Custom() {
  // @@protoc_insertion_point(destructor:v1.model.Custom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Custom::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Custom::ArenaDtor(void* object) {
  Custom* _this = reinterpret_cast< Custom* >(object);
  (void)_this;
}
void Custom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Custom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Custom::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Custom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Custom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Custom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Custom)
  return target;
}

size_t Custom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Custom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Custom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  const Custom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Custom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Custom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Custom)
    MergeFrom(*source);
  }
}

void Custom::MergeFrom(const Custom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Custom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Custom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Custom::CopyFrom(const Custom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Custom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Custom::IsInitialized() const {
  return true;
}

void Custom::InternalSwap(Custom* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Custom::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[22]);
}

// ===================================================================

class Hardware::_Internal {
 public:
};

Hardware::Hardware(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Hardware)
}
Hardware::Hardware(const Hardware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hw_descriptor().empty()) {
    hw_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hw_descriptor(), 
      GetArenaForAllocation());
  }
  audio_hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audio_hw_descriptor().empty()) {
    audio_hw_descriptor_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_audio_hw_descriptor(), 
      GetArenaForAllocation());
  }
  hardware_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hardware_type().empty()) {
    hardware_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_hardware_type(), 
      GetArenaForAllocation());
  }
  ip_cam_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_cam_username().empty()) {
    ip_cam_username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_cam_username(), 
      GetArenaForAllocation());
  }
  ip_cam_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip_cam_password().empty()) {
    ip_cam_password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip_cam_password(), 
      GetArenaForAllocation());
  }
  ::memcpy(&bitrate_, &from.bitrate_,
    static_cast<size_t>(reinterpret_cast<char*>(&disable_adaptive_quality_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(disable_adaptive_quality_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Hardware)
}

void Hardware::SharedCtor() {
hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
audio_hw_descriptor_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
hardware_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_cam_username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_cam_password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&bitrate_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&disable_adaptive_quality_) -
    reinterpret_cast<char*>(&bitrate_)) + sizeof(disable_adaptive_quality_));
}

Hardware::~Hardware() {
  // @@protoc_insertion_point(destructor:v1.model.Hardware)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Hardware::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  hw_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audio_hw_descriptor_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hardware_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_cam_username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_cam_password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Hardware::ArenaDtor(void* object) {
  Hardware* _this = reinterpret_cast< Hardware* >(object);
  (void)_this;
}
void Hardware::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Hardware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Hardware::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hw_descriptor_.ClearToEmpty();
  audio_hw_descriptor_.ClearToEmpty();
  hardware_type_.ClearToEmpty();
  ip_cam_username_.ClearToEmpty();
  ip_cam_password_.ClearToEmpty();
  ::memset(&bitrate_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disable_adaptive_quality_) -
      reinterpret_cast<char*>(&bitrate_)) + sizeof(disable_adaptive_quality_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Hardware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hw_descriptor = 1 [json_name = "hwDescriptor"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hw_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Hardware.hw_descriptor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_audio_hw_descriptor();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Hardware.audio_hw_descriptor"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string hardware_type = 4 [json_name = "hardwareType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_hardware_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Hardware.hardware_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rtsp_encoding_needed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_onvif = 6 [json_name = "isOnvif"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_onvif_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_cam_username = 7 [json_name = "ipCamUsername"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_ip_cam_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Hardware.ip_cam_username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ip_cam_password = 8 [json_name = "ipCamPassword"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ip_cam_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Hardware.ip_cam_password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool overlay_clock = 9 [json_name = "overlayClock"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          overlay_clock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 bitrate = 10 [json_name = "bitrate"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          bitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          disable_adaptive_quality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Hardware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Hardware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hw_descriptor = 1 [json_name = "hwDescriptor"];
  if (!this->hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hw_descriptor().data(), static_cast<int>(this->_internal_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hw_descriptor(), target);
  }

  // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
  if (!this->audio_hw_descriptor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audio_hw_descriptor().data(), static_cast<int>(this->_internal_audio_hw_descriptor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.audio_hw_descriptor");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_audio_hw_descriptor(), target);
  }

  // string hardware_type = 4 [json_name = "hardwareType"];
  if (!this->hardware_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hardware_type().data(), static_cast<int>(this->_internal_hardware_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.hardware_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_hardware_type(), target);
  }

  // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
  if (this->rtsp_encoding_needed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_rtsp_encoding_needed(), target);
  }

  // bool is_onvif = 6 [json_name = "isOnvif"];
  if (this->is_onvif() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_is_onvif(), target);
  }

  // string ip_cam_username = 7 [json_name = "ipCamUsername"];
  if (!this->ip_cam_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_username().data(), static_cast<int>(this->_internal_ip_cam_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.ip_cam_username");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_ip_cam_username(), target);
  }

  // string ip_cam_password = 8 [json_name = "ipCamPassword"];
  if (!this->ip_cam_password().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_cam_password().data(), static_cast<int>(this->_internal_ip_cam_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Hardware.ip_cam_password");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ip_cam_password(), target);
  }

  // bool overlay_clock = 9 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_overlay_clock(), target);
  }

  // int64 bitrate = 10 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_bitrate(), target);
  }

  // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_disable_adaptive_quality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Hardware)
  return target;
}

size_t Hardware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Hardware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hw_descriptor = 1 [json_name = "hwDescriptor"];
  if (!this->hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hw_descriptor());
  }

  // string audio_hw_descriptor = 3 [json_name = "audioHwDescriptor"];
  if (!this->audio_hw_descriptor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audio_hw_descriptor());
  }

  // string hardware_type = 4 [json_name = "hardwareType"];
  if (!this->hardware_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hardware_type());
  }

  // string ip_cam_username = 7 [json_name = "ipCamUsername"];
  if (!this->ip_cam_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_username());
  }

  // string ip_cam_password = 8 [json_name = "ipCamPassword"];
  if (!this->ip_cam_password().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_cam_password());
  }

  // int64 bitrate = 10 [json_name = "bitrate"];
  if (this->bitrate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_bitrate());
  }

  // bool rtsp_encoding_needed = 5 [json_name = "rtspEncodingNeeded"];
  if (this->rtsp_encoding_needed() != 0) {
    total_size += 1 + 1;
  }

  // bool is_onvif = 6 [json_name = "isOnvif"];
  if (this->is_onvif() != 0) {
    total_size += 1 + 1;
  }

  // bool overlay_clock = 9 [json_name = "overlayClock"];
  if (this->overlay_clock() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_adaptive_quality = 11 [json_name = "disableAdaptiveQuality"];
  if (this->disable_adaptive_quality() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Hardware::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  const Hardware* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Hardware>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Hardware)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Hardware)
    MergeFrom(*source);
  }
}

void Hardware::MergeFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Hardware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.hw_descriptor().empty()) {
    _internal_set_hw_descriptor(from._internal_hw_descriptor());
  }
  if (!from.audio_hw_descriptor().empty()) {
    _internal_set_audio_hw_descriptor(from._internal_audio_hw_descriptor());
  }
  if (!from.hardware_type().empty()) {
    _internal_set_hardware_type(from._internal_hardware_type());
  }
  if (!from.ip_cam_username().empty()) {
    _internal_set_ip_cam_username(from._internal_ip_cam_username());
  }
  if (!from.ip_cam_password().empty()) {
    _internal_set_ip_cam_password(from._internal_ip_cam_password());
  }
  if (from.bitrate() != 0) {
    _internal_set_bitrate(from._internal_bitrate());
  }
  if (from.rtsp_encoding_needed() != 0) {
    _internal_set_rtsp_encoding_needed(from._internal_rtsp_encoding_needed());
  }
  if (from.is_onvif() != 0) {
    _internal_set_is_onvif(from._internal_is_onvif());
  }
  if (from.overlay_clock() != 0) {
    _internal_set_overlay_clock(from._internal_overlay_clock());
  }
  if (from.disable_adaptive_quality() != 0) {
    _internal_set_disable_adaptive_quality(from._internal_disable_adaptive_quality());
  }
}

void Hardware::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Hardware::CopyFrom(const Hardware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Hardware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Hardware::IsInitialized() const {
  return true;
}

void Hardware::InternalSwap(Hardware* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hw_descriptor_, GetArenaForAllocation(),
      &other->hw_descriptor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &audio_hw_descriptor_, GetArenaForAllocation(),
      &other->audio_hw_descriptor_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &hardware_type_, GetArenaForAllocation(),
      &other->hardware_type_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_cam_username_, GetArenaForAllocation(),
      &other->ip_cam_username_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_cam_password_, GetArenaForAllocation(),
      &other->ip_cam_password_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Hardware, disable_adaptive_quality_)
      + sizeof(Hardware::disable_adaptive_quality_)
      - PROTOBUF_FIELD_OFFSET(Hardware, bitrate_)>(
          reinterpret_cast<char*>(&bitrate_),
          reinterpret_cast<char*>(&other->bitrate_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Hardware::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[23]);
}

// ===================================================================

class DirectoryWatch::_Internal {
 public:
};

DirectoryWatch::DirectoryWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.DirectoryWatch)
}
DirectoryWatch::DirectoryWatch(const DirectoryWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_directory().empty()) {
    directory_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_directory(), 
      GetArenaForAllocation());
  }
  extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_extension().empty()) {
    extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_extension(), 
      GetArenaForAllocation());
  }
  ::memcpy(&file_type_, &from.file_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&remote_agent_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  // @@protoc_insertion_point(copy_constructor:v1.model.DirectoryWatch)
}

void DirectoryWatch::SharedCtor() {
directory_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
extension_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&file_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&remote_agent_) -
    reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
}

DirectoryWatch::~DirectoryWatch() {
  // @@protoc_insertion_point(destructor:v1.model.DirectoryWatch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DirectoryWatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  directory_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  extension_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DirectoryWatch::ArenaDtor(void* object) {
  DirectoryWatch* _this = reinterpret_cast< DirectoryWatch* >(object);
  (void)_this;
}
void DirectoryWatch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DirectoryWatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DirectoryWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.DirectoryWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  directory_.ClearToEmpty();
  extension_.ClearToEmpty();
  ::memset(&file_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&remote_agent_) -
      reinterpret_cast<char*>(&file_type_)) + sizeof(remote_agent_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DirectoryWatch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string directory = 1 [json_name = "directory"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_directory();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.DirectoryWatch.directory"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string extension = 2 [json_name = "extension"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_extension();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.DirectoryWatch.extension"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileType file_type = 3 [json_name = "fileType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_type(static_cast<::v1::model::FileType>(val));
        } else goto handle_unusual;
        continue;
      // bool remote_agent = 4 [json_name = "remoteAgent"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          remote_agent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DirectoryWatch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.DirectoryWatch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory = 1 [json_name = "directory"];
  if (!this->directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory().data(), static_cast<int>(this->_internal_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.directory");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory(), target);
  }

  // string extension = 2 [json_name = "extension"];
  if (!this->extension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extension().data(), static_cast<int>(this->_internal_extension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.DirectoryWatch.extension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extension(), target);
  }

  // .v1.model.FileType file_type = 3 [json_name = "fileType"];
  if (this->file_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_file_type(), target);
  }

  // bool remote_agent = 4 [json_name = "remoteAgent"];
  if (this->remote_agent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_remote_agent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.DirectoryWatch)
  return target;
}

size_t DirectoryWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.DirectoryWatch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory = 1 [json_name = "directory"];
  if (!this->directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory());
  }

  // string extension = 2 [json_name = "extension"];
  if (!this->extension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extension());
  }

  // .v1.model.FileType file_type = 3 [json_name = "fileType"];
  if (this->file_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_type());
  }

  // bool remote_agent = 4 [json_name = "remoteAgent"];
  if (this->remote_agent() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DirectoryWatch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.DirectoryWatch)
  GOOGLE_DCHECK_NE(&from, this);
  const DirectoryWatch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DirectoryWatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.DirectoryWatch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.DirectoryWatch)
    MergeFrom(*source);
  }
}

void DirectoryWatch::MergeFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.DirectoryWatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.directory().empty()) {
    _internal_set_directory(from._internal_directory());
  }
  if (!from.extension().empty()) {
    _internal_set_extension(from._internal_extension());
  }
  if (from.file_type() != 0) {
    _internal_set_file_type(from._internal_file_type());
  }
  if (from.remote_agent() != 0) {
    _internal_set_remote_agent(from._internal_remote_agent());
  }
}

void DirectoryWatch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.DirectoryWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DirectoryWatch::CopyFrom(const DirectoryWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.DirectoryWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DirectoryWatch::IsInitialized() const {
  return true;
}

void DirectoryWatch::InternalSwap(DirectoryWatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &directory_, GetArenaForAllocation(),
      &other->directory_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &extension_, GetArenaForAllocation(),
      &other->extension_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DirectoryWatch, remote_agent_)
      + sizeof(DirectoryWatch::remote_agent_)
      - PROTOBUF_FIELD_OFFSET(DirectoryWatch, file_type_)>(
          reinterpret_cast<char*>(&file_type_),
          reinterpret_cast<char*>(&other->file_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DirectoryWatch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[24]);
}

// ===================================================================

class FileTail::_Internal {
 public:
};

FileTail::FileTail(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.FileTail)
}
FileTail::FileTail(const FileTail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArenaForAllocation());
  }
  time_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_key().empty()) {
    time_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_key(), 
      GetArenaForAllocation());
  }
  time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_time_format().empty()) {
    time_format_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_time_format(), 
      GetArenaForAllocation());
  }
  regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_regex().empty()) {
    regex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_regex(), 
      GetArenaForAllocation());
  }
  file_format_ = from.file_format_;
  // @@protoc_insertion_point(copy_constructor:v1.model.FileTail)
}

void FileTail::SharedCtor() {
filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
time_format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
file_format_ = 0;
}

FileTail::~FileTail() {
  // @@protoc_insertion_point(destructor:v1.model.FileTail)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileTail::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileTail::ArenaDtor(void* object) {
  FileTail* _this = reinterpret_cast< FileTail* >(object);
  (void)_this;
}
void FileTail::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileTail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileTail::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.FileTail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  time_key_.ClearToEmpty();
  time_format_.ClearToEmpty();
  regex_.ClearToEmpty();
  file_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileTail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename = 1 [json_name = "filename"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_file_format(static_cast<::v1::model::FileFormat>(val));
        } else goto handle_unusual;
        continue;
      // string time_key = 3 [json_name = "timeKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.time_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string time_format = 4 [json_name = "timeFormat"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_time_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.time_format"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 5 [json_name = "regex"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileTail.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileTail::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.FileTail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1 [json_name = "filename"];
  if (!this->filename().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
  if (this->file_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_file_format(), target);
  }

  // string time_key = 3 [json_name = "timeKey"];
  if (!this->time_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_key().data(), static_cast<int>(this->_internal_time_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time_key(), target);
  }

  // string time_format = 4 [json_name = "timeFormat"];
  if (!this->time_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time_format().data(), static_cast<int>(this->_internal_time_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.time_format");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_time_format(), target);
  }

  // string regex = 5 [json_name = "regex"];
  if (!this->regex().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileTail.regex");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_regex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.FileTail)
  return target;
}

size_t FileTail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.FileTail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1 [json_name = "filename"];
  if (!this->filename().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // string time_key = 3 [json_name = "timeKey"];
  if (!this->time_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_key());
  }

  // string time_format = 4 [json_name = "timeFormat"];
  if (!this->time_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time_format());
  }

  // string regex = 5 [json_name = "regex"];
  if (!this->regex().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_regex());
  }

  // .v1.model.FileFormat file_format = 2 [json_name = "fileFormat"];
  if (this->file_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_file_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.FileTail)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileTail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.FileTail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.FileTail)
    MergeFrom(*source);
  }
}

void FileTail::MergeFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.FileTail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.filename().empty()) {
    _internal_set_filename(from._internal_filename());
  }
  if (!from.time_key().empty()) {
    _internal_set_time_key(from._internal_time_key());
  }
  if (!from.time_format().empty()) {
    _internal_set_time_format(from._internal_time_format());
  }
  if (!from.regex().empty()) {
    _internal_set_regex(from._internal_regex());
  }
  if (from.file_format() != 0) {
    _internal_set_file_format(from._internal_file_format());
  }
}

void FileTail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.FileTail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTail::CopyFrom(const FileTail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.FileTail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTail::IsInitialized() const {
  return true;
}

void FileTail::InternalSwap(FileTail* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &filename_, GetArenaForAllocation(),
      &other->filename_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_key_, GetArenaForAllocation(),
      &other->time_key_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &time_format_, GetArenaForAllocation(),
      &other->time_format_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &regex_, GetArenaForAllocation(),
      &other->regex_, other->GetArenaForAllocation()
  );
  swap(file_format_, other->file_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FileTail::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[25]);
}

// ===================================================================

class RtcInfo::_Internal {
 public:
};

RtcInfo::RtcInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rtc_ice_transport_policies_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.RtcInfo)
}
RtcInfo::RtcInfo(const RtcInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rtc_ice_transport_policies_(from.rtc_ice_transport_policies_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rtc_ice_server_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_rtc_ice_server_protocol().empty()) {
    rtc_ice_server_protocol_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_rtc_ice_server_protocol(), 
      GetArenaForAllocation());
  }
  use_all_servers_ = from.use_all_servers_;
  // @@protoc_insertion_point(copy_constructor:v1.model.RtcInfo)
}

void RtcInfo::SharedCtor() {
rtc_ice_server_protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
use_all_servers_ = false;
}

RtcInfo::~RtcInfo() {
  // @@protoc_insertion_point(destructor:v1.model.RtcInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RtcInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  rtc_ice_server_protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RtcInfo::ArenaDtor(void* object) {
  RtcInfo* _this = reinterpret_cast< RtcInfo* >(object);
  (void)_this;
}
void RtcInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RtcInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RtcInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.RtcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rtc_ice_transport_policies_.Clear();
  rtc_ice_server_protocol_.ClearToEmpty();
  use_all_servers_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RtcInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string rtc_ice_transport_policies = 1 [json_name = "rtcIceTransportPolicies"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_rtc_ice_transport_policies();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.RtcInfo.rtc_ice_transport_policies"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string rtc_ice_server_protocol = 2 [json_name = "rtcIceServerProtocol"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_rtc_ice_server_protocol();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.RtcInfo.rtc_ice_server_protocol"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_all_servers = 3 [json_name = "useAllServers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_all_servers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RtcInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.RtcInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string rtc_ice_transport_policies = 1 [json_name = "rtcIceTransportPolicies"];
  for (int i = 0, n = this->_internal_rtc_ice_transport_policies_size(); i < n; i++) {
    const auto& s = this->_internal_rtc_ice_transport_policies(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.RtcInfo.rtc_ice_transport_policies");
    target = stream->WriteString(1, s, target);
  }

  // string rtc_ice_server_protocol = 2 [json_name = "rtcIceServerProtocol"];
  if (!this->rtc_ice_server_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_rtc_ice_server_protocol().data(), static_cast<int>(this->_internal_rtc_ice_server_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.RtcInfo.rtc_ice_server_protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_rtc_ice_server_protocol(), target);
  }

  // bool use_all_servers = 3 [json_name = "useAllServers"];
  if (this->use_all_servers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_all_servers(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.RtcInfo)
  return target;
}

size_t RtcInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.RtcInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string rtc_ice_transport_policies = 1 [json_name = "rtcIceTransportPolicies"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(rtc_ice_transport_policies_.size());
  for (int i = 0, n = rtc_ice_transport_policies_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      rtc_ice_transport_policies_.Get(i));
  }

  // string rtc_ice_server_protocol = 2 [json_name = "rtcIceServerProtocol"];
  if (!this->rtc_ice_server_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_rtc_ice_server_protocol());
  }

  // bool use_all_servers = 3 [json_name = "useAllServers"];
  if (this->use_all_servers() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RtcInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.RtcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RtcInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RtcInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.RtcInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.RtcInfo)
    MergeFrom(*source);
  }
}

void RtcInfo::MergeFrom(const RtcInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.RtcInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rtc_ice_transport_policies_.MergeFrom(from.rtc_ice_transport_policies_);
  if (!from.rtc_ice_server_protocol().empty()) {
    _internal_set_rtc_ice_server_protocol(from._internal_rtc_ice_server_protocol());
  }
  if (from.use_all_servers() != 0) {
    _internal_set_use_all_servers(from._internal_use_all_servers());
  }
}

void RtcInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.RtcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RtcInfo::CopyFrom(const RtcInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.RtcInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RtcInfo::IsInitialized() const {
  return true;
}

void RtcInfo::InternalSwap(RtcInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rtc_ice_transport_policies_.InternalSwap(&other->rtc_ice_transport_policies_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &rtc_ice_server_protocol_, GetArenaForAllocation(),
      &other->rtc_ice_server_protocol_, other->GetArenaForAllocation()
  );
  swap(use_all_servers_, other->use_all_servers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RtcInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fconfig_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fconfig_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationStore* Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationStore >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationStore >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentFeatureSet* Arena::CreateMaybeMessage< ::v1::model::AgentFeatureSet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentFeatureSet >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfiguration* Arena::CreateMaybeMessage< ::v1::model::AgentConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationDocument_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AgentConfigurationDocument* Arena::CreateMaybeMessage< ::v1::model::AgentConfigurationDocument >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AgentConfigurationDocument >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::AdapterConfiguration* Arena::CreateMaybeMessage< ::v1::model::AdapterConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::AdapterConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::PortForwardingConfiguration* Arena::CreateMaybeMessage< ::v1::model::PortForwardingConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::PortForwardingConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopRosStreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopRosStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopRosStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopHardwareStreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopHardwareStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopHardwareStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopCustomStreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::TeleopCustomStreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopCustomStreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TelemetryConfiguration* Arena::CreateMaybeMessage< ::v1::model::TelemetryConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TelemetryConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ApplicationConfiguration_ConfigurationMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ApplicationConfiguration* Arena::CreateMaybeMessage< ::v1::model::ApplicationConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ApplicationConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ResourcesConfiguration* Arena::CreateMaybeMessage< ::v1::model::ResourcesConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ResourcesConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DiskConfiguration* Arena::CreateMaybeMessage< ::v1::model::DiskConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::DiskConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSConfiguration* Arena::CreateMaybeMessage< ::v1::model::ROSConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamConfiguration_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamConfiguration* Arena::CreateMaybeMessage< ::v1::model::StreamConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::StreamTransformConfiguration* Arena::CreateMaybeMessage< ::v1::model::StreamTransformConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::StreamTransformConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::BlobData* Arena::CreateMaybeMessage< ::v1::model::BlobData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::BlobData >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Diagnostics* Arena::CreateMaybeMessage< ::v1::model::Diagnostics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Diagnostics >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Custom* Arena::CreateMaybeMessage< ::v1::model::Custom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Custom >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Hardware* Arena::CreateMaybeMessage< ::v1::model::Hardware >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Hardware >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::DirectoryWatch* Arena::CreateMaybeMessage< ::v1::model::DirectoryWatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::DirectoryWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::FileTail* Arena::CreateMaybeMessage< ::v1::model::FileTail >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::FileTail >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::RtcInfo* Arena::CreateMaybeMessage< ::v1::model::RtcInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::RtcInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

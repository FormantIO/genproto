// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/commands.proto

#include "protos/model/v1/commands.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v1 {
namespace model {
constexpr CommandRequest::CommandRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : files_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scrubber_time_(nullptr)
  , created_at_(nullptr)
  , _oneof_case_{}{}
struct CommandRequestDefaultTypeInternal {
  constexpr CommandRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandRequestDefaultTypeInternal() {}
  union {
    CommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
constexpr CommandResponse::CommandResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : request_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false)
  , _oneof_case_{}{}
struct CommandResponseDefaultTypeInternal {
  constexpr CommandResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandResponseDefaultTypeInternal() {}
  union {
    CommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
constexpr FileInfo::FileInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FileInfoDefaultTypeInternal {
  constexpr FileInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FileInfoDefaultTypeInternal() {}
  union {
    FileInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FileInfoDefaultTypeInternal _FileInfo_default_instance_;
constexpr CommandsMetadata::CommandsMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : commands_(){}
struct CommandsMetadataDefaultTypeInternal {
  constexpr CommandsMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandsMetadataDefaultTypeInternal() {}
  union {
    CommandsMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandsMetadataDefaultTypeInternal _CommandsMetadata_default_instance_;
constexpr CommandMetadata_ParameterMetaEntry_DoNotUse::CommandMetadata_ParameterMetaEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal {
  constexpr CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CommandMetadata_ParameterMetaEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal _CommandMetadata_ParameterMetaEntry_DoNotUse_default_instance_;
constexpr CommandMetadata_TagsEntry_DoNotUse::CommandMetadata_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CommandMetadata_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal _CommandMetadata_TagsEntry_DoNotUse_default_instance_;
constexpr CommandMetadata::CommandMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : parameter_meta_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , command_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameter_value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , parameter_enabled_(false)
  , enabled_(false){}
struct CommandMetadataDefaultTypeInternal {
  constexpr CommandMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandMetadataDefaultTypeInternal() {}
  union {
    CommandMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandMetadataDefaultTypeInternal _CommandMetadata_default_instance_;
}  // namespace model
}  // namespace v1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fcommands_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fcommands_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, command_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, scrubber_time_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, files_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, created_at_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandRequest, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandResponse, success_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandResponse, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::FileInfo, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileInfo, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::FileInfo, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandsMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandsMetadata, commands_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, command_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, parameter_enabled_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, parameter_value_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, parameter_meta_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, enabled_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::CommandMetadata, tags_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::CommandRequest)},
  { 12, -1, sizeof(::v1::model::CommandResponse)},
  { 21, -1, sizeof(::v1::model::FileInfo)},
  { 29, -1, sizeof(::v1::model::CommandsMetadata)},
  { 35, 42, sizeof(::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse)},
  { 44, 51, sizeof(::v1::model::CommandMetadata_TagsEntry_DoNotUse)},
  { 53, -1, sizeof(::v1::model::CommandMetadata)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_FileInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandsMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandMetadata_ParameterMetaEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandMetadata_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_CommandMetadata_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fcommands_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036protos/model/v1/commands.proto\022\010v1.mod"
  "el\032\037google/protobuf/timestamp.proto\032\037pro"
  "tos/model/v1/datapoint.proto\"\203\002\n\016Command"
  "Request\022\016\n\002id\030\001 \001(\tR\002id\022\030\n\007command\030\002 \001(\t"
  "R\007command\022\024\n\004text\030\003 \001(\tH\000R\004text\022\?\n\rscrub"
  "ber_time\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mpR\014scrubberTime\022(\n\005files\030\005 \003(\0132\022.v1.mod"
  "el.FileInfoR\005files\0229\n\ncreated_at\030\006 \001(\0132\032"
  ".google.protobuf.TimestampR\tcreatedAtB\013\n"
  "\tparameter\"\211\001\n\017CommandResponse\022\035\n\nreques"
  "t_id\030\001 \001(\tR\trequestId\022\030\n\007success\030\002 \001(\010R\007"
  "success\0223\n\tdatapoint\030\003 \001(\0132\023.v1.model.Da"
  "tapointH\000R\tdatapointB\010\n\006result\"@\n\010FileIn"
  "fo\022\016\n\002id\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022\020"
  "\n\003url\030\003 \001(\tR\003url\"I\n\020CommandsMetadata\0225\n\010"
  "commands\030\001 \003(\0132\031.v1.model.CommandMetadat"
  "aR\010commands\"\352\003\n\017CommandMetadata\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\030\n\007command\030\002 \001(\tR\007command\022 \n"
  "\013description\030\003 \001(\tR\013description\022+\n\021param"
  "eter_enabled\030\004 \001(\010R\020parameterEnabled\022\'\n\017"
  "parameter_value\030\005 \001(\tR\016parameterValue\022S\n"
  "\016parameter_meta\030\006 \003(\0132,.v1.model.Command"
  "Metadata.ParameterMetaEntryR\rparameterMe"
  "ta\022\030\n\007enabled\030\007 \001(\010R\007enabled\022\016\n\002id\030\010 \001(\t"
  "R\002id\0227\n\004tags\030\t \003(\0132#.v1.model.CommandMet"
  "adata.TagsEntryR\004tags\032@\n\022ParameterMetaEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005va"
  "lue:\0028\001\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024"
  "\n\005value\030\002 \001(\tR\005value:\0028\001B+Z)github.com/F"
  "ormantIO/genproto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto = {
  false, false, 1197, descriptor_table_protodef_protos_2fmodel_2fv1_2fcommands_2eproto, "protos/model/v1/commands.proto", 
  &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_deps, 2, 7,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fcommands_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fcommands_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fcommands_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto);
namespace v1 {
namespace model {

// ===================================================================

class CommandRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& scrubber_time(const CommandRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const CommandRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
CommandRequest::_Internal::scrubber_time(const CommandRequest* msg) {
  return *msg->scrubber_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CommandRequest::_Internal::created_at(const CommandRequest* msg) {
  return *msg->created_at_;
}
void CommandRequest::clear_scrubber_time() {
  if (GetArenaForAllocation() == nullptr && scrubber_time_ != nullptr) {
    delete scrubber_time_;
  }
  scrubber_time_ = nullptr;
}
void CommandRequest::clear_created_at() {
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
CommandRequest::CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  files_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.CommandRequest)
}
CommandRequest::CommandRequest(const CommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_scrubber_time()) {
    scrubber_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.scrubber_time_);
  } else {
    scrubber_time_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  clear_has_parameter();
  switch (from.parameter_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.CommandRequest)
}

void CommandRequest::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scrubber_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
    reinterpret_cast<char*>(&scrubber_time_)) + sizeof(created_at_));
clear_has_parameter();
}

CommandRequest::~CommandRequest() {
  // @@protoc_insertion_point(destructor:v1.model.CommandRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete scrubber_time_;
  if (this != internal_default_instance()) delete created_at_;
  if (has_parameter()) {
    clear_parameter();
  }
}

void CommandRequest::ArenaDtor(void* object) {
  CommandRequest* _this = reinterpret_cast< CommandRequest* >(object);
  (void)_this;
}
void CommandRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandRequest::clear_parameter() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.CommandRequest)
  switch (parameter_case()) {
    case kText: {
      parameter_.text_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PARAMETER_NOT_SET;
}


void CommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  id_.ClearToEmpty();
  command_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && scrubber_time_ != nullptr) {
    delete scrubber_time_;
  }
  scrubber_time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  clear_parameter();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandRequest.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 2 [json_name = "command"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandRequest.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3 [json_name = "text"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandRequest.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp scrubber_time = 4 [json_name = "scrubberTime"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_scrubber_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.FileInfo files = 5 [json_name = "files"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.CommandRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string command = 2 [json_name = "command"];
  if (!this->command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandRequest.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // string text = 3 [json_name = "text"];
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandRequest.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  // .google.protobuf.Timestamp scrubber_time = 4 [json_name = "scrubberTime"];
  if (this->has_scrubber_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::scrubber_time(this), target, stream);
  }

  // repeated .v1.model.FileInfo files = 5 [json_name = "files"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_files_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_files(i), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt"];
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::created_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.CommandRequest)
  return target;
}

size_t CommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.CommandRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.FileInfo files = 5 [json_name = "files"];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string command = 2 [json_name = "command"];
  if (!this->command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // .google.protobuf.Timestamp scrubber_time = 4 [json_name = "scrubberTime"];
  if (this->has_scrubber_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scrubber_time_);
  }

  // .google.protobuf.Timestamp created_at = 6 [json_name = "createdAt"];
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  switch (parameter_case()) {
    // string text = 3 [json_name = "text"];
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.CommandRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.CommandRequest)
    MergeFrom(*source);
  }
}

void CommandRequest::MergeFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.CommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (from.has_scrubber_time()) {
    _internal_mutable_scrubber_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_scrubber_time());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  switch (from.parameter_case()) {
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case PARAMETER_NOT_SET: {
      break;
    }
  }
}

void CommandRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandRequest::CopyFrom(const CommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.CommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandRequest::IsInitialized() const {
  return true;
}

void CommandRequest::InternalSwap(CommandRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, GetArenaForAllocation(),
      &other->command_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandRequest, created_at_)
      + sizeof(CommandRequest::created_at_)
      - PROTOBUF_FIELD_OFFSET(CommandRequest, scrubber_time_)>(
          reinterpret_cast<char*>(&scrubber_time_),
          reinterpret_cast<char*>(&other->scrubber_time_));
  swap(parameter_, other->parameter_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[0]);
}

// ===================================================================

class CommandResponse::_Internal {
 public:
  static const ::v1::model::Datapoint& datapoint(const CommandResponse* msg);
};

const ::v1::model::Datapoint&
CommandResponse::_Internal::datapoint(const CommandResponse* msg) {
  return *msg->result_.datapoint_;
}
void CommandResponse::set_allocated_datapoint(::v1::model::Datapoint* datapoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_result();
  if (datapoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datapoint));
    if (message_arena != submessage_arena) {
      datapoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datapoint, submessage_arena);
    }
    set_has_datapoint();
    result_.datapoint_ = datapoint;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandResponse.datapoint)
}
void CommandResponse::clear_datapoint() {
  if (_internal_has_datapoint()) {
    if (GetArenaForAllocation() == nullptr) {
      delete result_.datapoint_;
    }
    clear_has_result();
  }
}
CommandResponse::CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.CommandResponse)
}
CommandResponse::CommandResponse(const CommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_id().empty()) {
    request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_request_id(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  clear_has_result();
  switch (from.result_case()) {
    case kDatapoint: {
      _internal_mutable_datapoint()->::v1::model::Datapoint::MergeFrom(from._internal_datapoint());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.CommandResponse)
}

void CommandResponse::SharedCtor() {
request_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
success_ = false;
clear_has_result();
}

CommandResponse::~CommandResponse() {
  // @@protoc_insertion_point(destructor:v1.model.CommandResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  request_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_result()) {
    clear_result();
  }
}

void CommandResponse::ArenaDtor(void* object) {
  CommandResponse* _this = reinterpret_cast< CommandResponse* >(object);
  (void)_this;
}
void CommandResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandResponse::clear_result() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.CommandResponse)
  switch (result_case()) {
    case kDatapoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete result_.datapoint_;
      }
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESULT_NOT_SET;
}


void CommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_id_.ClearToEmpty();
  success_ = false;
  clear_result();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string request_id = 1 [json_name = "requestId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_request_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandResponse.request_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool success = 2 [json_name = "success"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Datapoint datapoint = 3 [json_name = "datapoint"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_datapoint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.CommandResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_id = 1 [json_name = "requestId"];
  if (!this->request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_id(), target);
  }

  // bool success = 2 [json_name = "success"];
  if (this->success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_success(), target);
  }

  // .v1.model.Datapoint datapoint = 3 [json_name = "datapoint"];
  if (_internal_has_datapoint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::datapoint(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.CommandResponse)
  return target;
}

size_t CommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.CommandResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_id = 1 [json_name = "requestId"];
  if (!this->request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // bool success = 2 [json_name = "success"];
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  switch (result_case()) {
    // .v1.model.Datapoint datapoint = 3 [json_name = "datapoint"];
    case kDatapoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *result_.datapoint_);
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.CommandResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.CommandResponse)
    MergeFrom(*source);
  }
}

void CommandResponse::MergeFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.CommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from.success() != 0) {
    _internal_set_success(from._internal_success());
  }
  switch (from.result_case()) {
    case kDatapoint: {
      _internal_mutable_datapoint()->::v1::model::Datapoint::MergeFrom(from._internal_datapoint());
      break;
    }
    case RESULT_NOT_SET: {
      break;
    }
  }
}

void CommandResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandResponse::CopyFrom(const CommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.CommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandResponse::IsInitialized() const {
  return true;
}

void CommandResponse::InternalSwap(CommandResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &request_id_, GetArenaForAllocation(),
      &other->request_id_, other->GetArenaForAllocation()
  );
  swap(success_, other->success_);
  swap(result_, other->result_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[1]);
}

// ===================================================================

class FileInfo::_Internal {
 public:
};

FileInfo::FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.FileInfo)
}
FileInfo::FileInfo(const FileInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.FileInfo)
}

void FileInfo::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FileInfo::~FileInfo() {
  // @@protoc_insertion_point(destructor:v1.model.FileInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FileInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FileInfo::ArenaDtor(void* object) {
  FileInfo* _this = reinterpret_cast< FileInfo* >(object);
  (void)_this;
}
void FileInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FileInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileInfo.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileInfo.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.FileInfo.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FileInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.FileInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.FileInfo.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.FileInfo)
  return target;
}

size_t FileInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.FileInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string url = 3 [json_name = "url"];
  if (!this->url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FileInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FileInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.FileInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.FileInfo)
    MergeFrom(*source);
  }
}

void FileInfo::MergeFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.FileInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.url().empty()) {
    _internal_set_url(from._internal_url());
  }
}

void FileInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileInfo::CopyFrom(const FileInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.FileInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileInfo::IsInitialized() const {
  return true;
}

void FileInfo::InternalSwap(FileInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[2]);
}

// ===================================================================

class CommandsMetadata::_Internal {
 public:
};

CommandsMetadata::CommandsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  commands_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.CommandsMetadata)
}
CommandsMetadata::CommandsMetadata(const CommandsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.CommandsMetadata)
}

void CommandsMetadata::SharedCtor() {
}

CommandsMetadata::~CommandsMetadata() {
  // @@protoc_insertion_point(destructor:v1.model.CommandsMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandsMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CommandsMetadata::ArenaDtor(void* object) {
  CommandsMetadata* _this = reinterpret_cast< CommandsMetadata* >(object);
  (void)_this;
}
void CommandsMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CommandsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.CommandsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  commands_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandsMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.CommandMetadata commands = 1 [json_name = "commands"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandsMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.CommandsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.CommandMetadata commands = 1 [json_name = "commands"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_commands(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.CommandsMetadata)
  return target;
}

size_t CommandsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.CommandsMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.CommandMetadata commands = 1 [json_name = "commands"];
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandsMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.CommandsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandsMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandsMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.CommandsMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.CommandsMetadata)
    MergeFrom(*source);
  }
}

void CommandsMetadata::MergeFrom(const CommandsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.CommandsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  commands_.MergeFrom(from.commands_);
}

void CommandsMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.CommandsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandsMetadata::CopyFrom(const CommandsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.CommandsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandsMetadata::IsInitialized() const {
  return true;
}

void CommandsMetadata::InternalSwap(CommandsMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  commands_.InternalSwap(&other->commands_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandsMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[3]);
}

// ===================================================================

CommandMetadata_ParameterMetaEntry_DoNotUse::CommandMetadata_ParameterMetaEntry_DoNotUse() {}
CommandMetadata_ParameterMetaEntry_DoNotUse::CommandMetadata_ParameterMetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CommandMetadata_ParameterMetaEntry_DoNotUse::MergeFrom(const CommandMetadata_ParameterMetaEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CommandMetadata_ParameterMetaEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[4]);
}
void CommandMetadata_ParameterMetaEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CommandMetadata_TagsEntry_DoNotUse::CommandMetadata_TagsEntry_DoNotUse() {}
CommandMetadata_TagsEntry_DoNotUse::CommandMetadata_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CommandMetadata_TagsEntry_DoNotUse::MergeFrom(const CommandMetadata_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CommandMetadata_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[5]);
}
void CommandMetadata_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class CommandMetadata::_Internal {
 public:
};

CommandMetadata::CommandMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parameter_meta_(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.CommandMetadata)
}
CommandMetadata::CommandMetadata(const CommandMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  parameter_meta_.MergeFrom(from.parameter_meta_);
  tags_.MergeFrom(from.tags_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_command().empty()) {
    command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_command(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  parameter_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parameter_value().empty()) {
    parameter_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_parameter_value(), 
      GetArenaForAllocation());
  }
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&parameter_enabled_, &from.parameter_enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&parameter_enabled_)) + sizeof(enabled_));
  // @@protoc_insertion_point(copy_constructor:v1.model.CommandMetadata)
}

void CommandMetadata::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
command_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
parameter_value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&parameter_enabled_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&enabled_) -
    reinterpret_cast<char*>(&parameter_enabled_)) + sizeof(enabled_));
}

CommandMetadata::~CommandMetadata() {
  // @@protoc_insertion_point(destructor:v1.model.CommandMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CommandMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  command_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  parameter_value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CommandMetadata::ArenaDtor(void* object) {
  CommandMetadata* _this = reinterpret_cast< CommandMetadata* >(object);
  (void)_this;
  _this->parameter_meta_. ~MapField();
  _this->tags_. ~MapField();
}
inline void CommandMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &CommandMetadata::ArenaDtor);
  }
}
void CommandMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CommandMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.CommandMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_meta_.Clear();
  tags_.Clear();
  name_.ClearToEmpty();
  command_.ClearToEmpty();
  description_.ClearToEmpty();
  parameter_value_.ClearToEmpty();
  id_.ClearToEmpty();
  ::memset(&parameter_enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enabled_) -
      reinterpret_cast<char*>(&parameter_enabled_)) + sizeof(enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommandMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string command = 2 [json_name = "command"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_command();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandMetadata.command"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandMetadata.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool parameter_enabled = 4 [json_name = "parameterEnabled"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          parameter_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string parameter_value = 5 [json_name = "parameterValue"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_parameter_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandMetadata.parameter_value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> parameter_meta = 6 [json_name = "parameterMeta"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&parameter_meta_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // bool enabled = 7 [json_name = "enabled"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 8 [json_name = "id"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.CommandMetadata.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 9 [json_name = "tags"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CommandMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.CommandMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandMetadata.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string command = 2 [json_name = "command"];
  if (!this->command().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_command().data(), static_cast<int>(this->_internal_command().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandMetadata.command");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_command(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandMetadata.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool parameter_enabled = 4 [json_name = "parameterEnabled"];
  if (this->parameter_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_parameter_enabled(), target);
  }

  // string parameter_value = 5 [json_name = "parameterValue"];
  if (!this->parameter_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parameter_value().data(), static_cast<int>(this->_internal_parameter_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandMetadata.parameter_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_parameter_value(), target);
  }

  // map<string, string> parameter_meta = 6 [json_name = "parameterMeta"];
  if (!this->_internal_parameter_meta().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.CommandMetadata.ParameterMetaEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.CommandMetadata.ParameterMetaEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_parameter_meta().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_parameter_meta().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameter_meta().begin();
          it != this->_internal_parameter_meta().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CommandMetadata_ParameterMetaEntry_DoNotUse::Funcs::InternalSerialize(6, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_parameter_meta().begin();
          it != this->_internal_parameter_meta().end(); ++it) {
        target = CommandMetadata_ParameterMetaEntry_DoNotUse::Funcs::InternalSerialize(6, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool enabled = 7 [json_name = "enabled"];
  if (this->enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_enabled(), target);
  }

  // string id = 8 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.CommandMetadata.id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_id(), target);
  }

  // map<string, string> tags = 9 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.CommandMetadata.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.CommandMetadata.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CommandMetadata_TagsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = CommandMetadata_TagsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.CommandMetadata)
  return target;
}

size_t CommandMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.CommandMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> parameter_meta = 6 [json_name = "parameterMeta"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_parameter_meta_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_parameter_meta().begin();
      it != this->_internal_parameter_meta().end(); ++it) {
    total_size += CommandMetadata_ParameterMetaEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> tags = 9 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += CommandMetadata_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string command = 2 [json_name = "command"];
  if (!this->command().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_command());
  }

  // string description = 3 [json_name = "description"];
  if (!this->description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string parameter_value = 5 [json_name = "parameterValue"];
  if (!this->parameter_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parameter_value());
  }

  // string id = 8 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool parameter_enabled = 4 [json_name = "parameterEnabled"];
  if (this->parameter_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool enabled = 7 [json_name = "enabled"];
  if (this->enabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CommandMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.CommandMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const CommandMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CommandMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.CommandMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.CommandMetadata)
    MergeFrom(*source);
  }
}

void CommandMetadata::MergeFrom(const CommandMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.CommandMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_meta_.MergeFrom(from.parameter_meta_);
  tags_.MergeFrom(from.tags_);
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.command().empty()) {
    _internal_set_command(from._internal_command());
  }
  if (!from.description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from.parameter_value().empty()) {
    _internal_set_parameter_value(from._internal_parameter_value());
  }
  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from.parameter_enabled() != 0) {
    _internal_set_parameter_enabled(from._internal_parameter_enabled());
  }
  if (from.enabled() != 0) {
    _internal_set_enabled(from._internal_enabled());
  }
}

void CommandMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.CommandMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommandMetadata::CopyFrom(const CommandMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.CommandMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommandMetadata::IsInitialized() const {
  return true;
}

void CommandMetadata::InternalSwap(CommandMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameter_meta_.InternalSwap(&other->parameter_meta_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &command_, GetArenaForAllocation(),
      &other->command_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &parameter_value_, GetArenaForAllocation(),
      &other->parameter_value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommandMetadata, enabled_)
      + sizeof(CommandMetadata::enabled_)
      - PROTOBUF_FIELD_OFFSET(CommandMetadata, parameter_enabled_)>(
          reinterpret_cast<char*>(&parameter_enabled_),
          reinterpret_cast<char*>(&other->parameter_enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CommandMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fcommands_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::CommandRequest* Arena::CreateMaybeMessage< ::v1::model::CommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::CommandResponse* Arena::CreateMaybeMessage< ::v1::model::CommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::FileInfo* Arena::CreateMaybeMessage< ::v1::model::FileInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::FileInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::CommandsMetadata* Arena::CreateMaybeMessage< ::v1::model::CommandsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::CommandMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::CommandMetadata_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandMetadata_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::CommandMetadata* Arena::CreateMaybeMessage< ::v1::model::CommandMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::CommandMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

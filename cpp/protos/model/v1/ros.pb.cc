// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/ros.proto

#include "protos/model/v1/ros.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v1 {
namespace model {
PROTOBUF_CONSTEXPR ROSTopic::ROSTopic(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , encode_video_(false){}
struct ROSTopicDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROSTopicDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROSTopicDefaultTypeInternal() {}
  union {
    ROSTopic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROSTopicDefaultTypeInternal _ROSTopic_default_instance_;
PROTOBUF_CONSTEXPR ROSLocalization::ROSLocalization(
    ::_pbi::ConstantInitialized)
  : point_cloud_topics_()
  , map_topic_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , odom_topic_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , path_topic_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , goal_topic_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , base_reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ROSLocalizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROSLocalizationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROSLocalizationDefaultTypeInternal() {}
  union {
    ROSLocalization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROSLocalizationDefaultTypeInternal _ROSLocalization_default_instance_;
PROTOBUF_CONSTEXPR ROSTransformTree::ROSTransformTree(
    ::_pbi::ConstantInitialized)
  : base_reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ROSTransformTreeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROSTransformTreeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROSTransformTreeDefaultTypeInternal() {}
  union {
    ROSTransformTree _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROSTransformTreeDefaultTypeInternal _ROSTransformTree_default_instance_;
PROTOBUF_CONSTEXPR ROSMessageToPublish::ROSMessageToPublish(
    ::_pbi::ConstantInitialized)
  : stream_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(uint64_t{0u})
  , _oneof_case_{}{}
struct ROSMessageToPublishDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ROSMessageToPublishDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ROSMessageToPublishDefaultTypeInternal() {}
  union {
    ROSMessageToPublish _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ROSMessageToPublishDefaultTypeInternal _ROSMessageToPublish_default_instance_;
}  // namespace model
}  // namespace v1
static ::_pb::Metadata file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fros_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fros_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmodel_2fv1_2fros_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTopic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTopic, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTopic, path_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTopic, encode_video_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, map_topic_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, odom_topic_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, point_cloud_topics_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, path_topic_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, goal_topic_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSLocalization, base_reference_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTransformTree, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSTransformTree, base_reference_frame_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, stream_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, frame_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::ROSMessageToPublish, data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::v1::model::ROSTopic)},
  { 9, -1, -1, sizeof(::v1::model::ROSLocalization)},
  { 21, -1, -1, sizeof(::v1::model::ROSTransformTree)},
  { 28, -1, -1, sizeof(::v1::model::ROSMessageToPublish)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v1::model::_ROSTopic_default_instance_._instance,
  &::v1::model::_ROSLocalization_default_instance_._instance,
  &::v1::model::_ROSTransformTree_default_instance_._instance,
  &::v1::model::_ROSMessageToPublish_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fros_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\031protos/model/v1/ros.proto\022\010v1.model\032\032p"
  "rotos/model/v1/math.proto\032 protos/model/"
  "v1/navigation.proto\"U\n\010ROSTopic\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\022\n\004path\030\002 \001(\tR\004path\022!\n\014encod"
  "e_video\030\003 \001(\010R\013encodeVideo\"\353\001\n\017ROSLocali"
  "zation\022\033\n\tmap_topic\030\001 \001(\tR\010mapTopic\022\035\n\no"
  "dom_topic\030\002 \001(\tR\todomTopic\022,\n\022point_clou"
  "d_topics\030\003 \003(\tR\020pointCloudTopics\022\035\n\npath"
  "_topic\030\004 \001(\tR\tpathTopic\022\035\n\ngoal_topic\030\005 "
  "\001(\tR\tgoalTopic\0220\n\024base_reference_frame\030\006"
  " \001(\tR\022baseReferenceFrame\"D\n\020ROSTransform"
  "Tree\0220\n\024base_reference_frame\030\001 \001(\tR\022base"
  "ReferenceFrame\"\361\003\n\023ROSMessageToPublish\022\026"
  "\n\006stream\030\001 \001(\tR\006stream\022\031\n\010frame_id\030\007 \001(\t"
  "R\007frameId\022\034\n\ttimestamp\030\010 \001(\004R\ttimestamp\022"
  "\'\n\005twist\030\002 \001(\0132\017.v1.model.TwistH\000R\005twist"
  "\022\024\n\004bool\030\003 \001(\010H\000R\004bool\022+\n\020compressed_ima"
  "ge\030\004 \001(\014H\000R\017compressedImage\022\024\n\004text\030\005 \001("
  "\tH\000R\004text\022)\n\004pose\030\006 \001(\0132\023.v1.model.Trans"
  "formH\000R\004pose\022*\n\006goalID\030\t \001(\0132\020.v1.model."
  "GoalIDH\000R\006goalID\022-\n\007numeric\030\n \001(\0132\021.v1.m"
  "odel.NumericH\000R\007numeric\022P\n\024pose_with_cov"
  "ariance\030\013 \001(\0132\034.v1.model.PoseWithCovaria"
  "nceH\000R\022poseWithCovariance\022\'\n\005point\030\014 \001(\013"
  "2\017.v1.model.PointH\000R\005pointB\006\n\004data*\253\003\n\014R"
  "OSTopicType\022\013\n\007UNKNOWN\020\000\022\021\n\rSTD_MSGS_BOO"
  "L\020\001\022 \n\034SENSOR_MSGS_COMPRESSED_IMAGE\020\002\022\023\n"
  "\017STD_MSGS_STRING\020\003\022\026\n\022GEOMETRY_MSGS_POSE"
  "\020\004\022\031\n\025ACTIONLIB_MSGS_GOALID\020\005\022\027\n\023GEOMETR"
  "Y_MSGS_TWIST\020\006\022\024\n\020H264_VIDEO_FRAME\020\007\022\017\n\013"
  "AUDIO_CHUNK\020\010\022\024\n\020STD_MSGS_FLOAT64\020\t\022\033\n\027S"
  "ENSOR_MSGS_JOINT_STATE\020\n\022&\n\"GEOMETRY_MSG"
  "S_POSE_WITH_COVARIANCE\020\013\022\034\n\030SENSOR_MSGS_"
  "POINT_CLOUD2\020\014\022\032\n\026SENSOR_MSGS_LASER_SCAN"
  "\020\r\022\027\n\023GEOMETRY_MSGS_POINT\020\016\022#\n\037VISUALIZA"
  "TION_MSGS_MARKER_ARRAY\020\017B+Z)github.com/F"
  "ormantIO/genproto/go/v1/modelb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_deps[2] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fros_2eproto = {
    false, false, 1477, descriptor_table_protodef_protos_2fmodel_2fv1_2fros_2eproto,
    "protos/model/v1/ros.proto",
    &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fros_2eproto::offsets,
    file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fros_2eproto,
    file_level_service_descriptors_protos_2fmodel_2fv1_2fros_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fros_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ROSTopicType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fros_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fros_2eproto[0];
}
bool ROSTopicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ROSTopic::_Internal {
 public:
};

ROSTopic::ROSTopic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSTopic)
}
ROSTopic::ROSTopic(const ROSTopic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(from._internal_path(), 
      GetArenaForAllocation());
  }
  encode_video_ = from.encode_video_;
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSTopic)
}

inline void ROSTopic::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
encode_video_ = false;
}

ROSTopic::~ROSTopic() {
  // @@protoc_insertion_point(destructor:v1.model.ROSTopic)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROSTopic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  path_.Destroy();
}

void ROSTopic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSTopic::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSTopic)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  path_.ClearToEmpty();
  encode_video_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSTopic::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSTopic.name"));
        } else
          goto handle_unusual;
        continue;
      // string path = 2 [json_name = "path"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSTopic.path"));
        } else
          goto handle_unusual;
        continue;
      // bool encode_video = 3 [json_name = "encodeVideo"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          encode_video_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROSTopic::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSTopic)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSTopic.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string path = 2 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSTopic.path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_path(), target);
  }

  // bool encode_video = 3 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_encode_video(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSTopic)
  return target;
}

size_t ROSTopic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSTopic)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string path = 2 [json_name = "path"];
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  // bool encode_video = 3 [json_name = "encodeVideo"];
  if (this->_internal_encode_video() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROSTopic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROSTopic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROSTopic::GetClassData() const { return &_class_data_; }

void ROSTopic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROSTopic *>(to)->MergeFrom(
      static_cast<const ROSTopic &>(from));
}


void ROSTopic::MergeFrom(const ROSTopic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSTopic)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  if (from._internal_encode_video() != 0) {
    _internal_set_encode_video(from._internal_encode_video());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROSTopic::CopyFrom(const ROSTopic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSTopic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSTopic::IsInitialized() const {
  return true;
}

void ROSTopic::InternalSwap(ROSTopic* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
  swap(encode_video_, other->encode_video_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSTopic::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto[0]);
}

// ===================================================================

class ROSLocalization::_Internal {
 public:
};

ROSLocalization::ROSLocalization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  point_cloud_topics_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSLocalization)
}
ROSLocalization::ROSLocalization(const ROSLocalization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_cloud_topics_(from.point_cloud_topics_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  map_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    map_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_map_topic().empty()) {
    map_topic_.Set(from._internal_map_topic(), 
      GetArenaForAllocation());
  }
  odom_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    odom_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_odom_topic().empty()) {
    odom_topic_.Set(from._internal_odom_topic(), 
      GetArenaForAllocation());
  }
  path_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path_topic().empty()) {
    path_topic_.Set(from._internal_path_topic(), 
      GetArenaForAllocation());
  }
  goal_topic_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    goal_topic_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_goal_topic().empty()) {
    goal_topic_.Set(from._internal_goal_topic(), 
      GetArenaForAllocation());
  }
  base_reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_reference_frame().empty()) {
    base_reference_frame_.Set(from._internal_base_reference_frame(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSLocalization)
}

inline void ROSLocalization::SharedCtor() {
map_topic_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  map_topic_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
odom_topic_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  odom_topic_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
path_topic_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_topic_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
goal_topic_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  goal_topic_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
base_reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ROSLocalization::~ROSLocalization() {
  // @@protoc_insertion_point(destructor:v1.model.ROSLocalization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROSLocalization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  map_topic_.Destroy();
  odom_topic_.Destroy();
  path_topic_.Destroy();
  goal_topic_.Destroy();
  base_reference_frame_.Destroy();
}

void ROSLocalization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSLocalization::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSLocalization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_cloud_topics_.Clear();
  map_topic_.ClearToEmpty();
  odom_topic_.ClearToEmpty();
  path_topic_.ClearToEmpty();
  goal_topic_.ClearToEmpty();
  base_reference_frame_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSLocalization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string map_topic = 1 [json_name = "mapTopic"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_map_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.map_topic"));
        } else
          goto handle_unusual;
        continue;
      // string odom_topic = 2 [json_name = "odomTopic"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_odom_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.odom_topic"));
        } else
          goto handle_unusual;
        continue;
      // repeated string point_cloud_topics = 3 [json_name = "pointCloudTopics"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_point_cloud_topics();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.point_cloud_topics"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string path_topic = 4 [json_name = "pathTopic"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_path_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.path_topic"));
        } else
          goto handle_unusual;
        continue;
      // string goal_topic = 5 [json_name = "goalTopic"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_goal_topic();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.goal_topic"));
        } else
          goto handle_unusual;
        continue;
      // string base_reference_frame = 6 [json_name = "baseReferenceFrame"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_base_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSLocalization.base_reference_frame"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROSLocalization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSLocalization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string map_topic = 1 [json_name = "mapTopic"];
  if (!this->_internal_map_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_map_topic().data(), static_cast<int>(this->_internal_map_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.map_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_map_topic(), target);
  }

  // string odom_topic = 2 [json_name = "odomTopic"];
  if (!this->_internal_odom_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_odom_topic().data(), static_cast<int>(this->_internal_odom_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.odom_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_odom_topic(), target);
  }

  // repeated string point_cloud_topics = 3 [json_name = "pointCloudTopics"];
  for (int i = 0, n = this->_internal_point_cloud_topics_size(); i < n; i++) {
    const auto& s = this->_internal_point_cloud_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.point_cloud_topics");
    target = stream->WriteString(3, s, target);
  }

  // string path_topic = 4 [json_name = "pathTopic"];
  if (!this->_internal_path_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path_topic().data(), static_cast<int>(this->_internal_path_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.path_topic");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_path_topic(), target);
  }

  // string goal_topic = 5 [json_name = "goalTopic"];
  if (!this->_internal_goal_topic().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_goal_topic().data(), static_cast<int>(this->_internal_goal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.goal_topic");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_goal_topic(), target);
  }

  // string base_reference_frame = 6 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_reference_frame().data(), static_cast<int>(this->_internal_base_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSLocalization.base_reference_frame");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_base_reference_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSLocalization)
  return target;
}

size_t ROSLocalization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSLocalization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string point_cloud_topics = 3 [json_name = "pointCloudTopics"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(point_cloud_topics_.size());
  for (int i = 0, n = point_cloud_topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      point_cloud_topics_.Get(i));
  }

  // string map_topic = 1 [json_name = "mapTopic"];
  if (!this->_internal_map_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_map_topic());
  }

  // string odom_topic = 2 [json_name = "odomTopic"];
  if (!this->_internal_odom_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_odom_topic());
  }

  // string path_topic = 4 [json_name = "pathTopic"];
  if (!this->_internal_path_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path_topic());
  }

  // string goal_topic = 5 [json_name = "goalTopic"];
  if (!this->_internal_goal_topic().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_goal_topic());
  }

  // string base_reference_frame = 6 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_reference_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROSLocalization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROSLocalization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROSLocalization::GetClassData() const { return &_class_data_; }

void ROSLocalization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROSLocalization *>(to)->MergeFrom(
      static_cast<const ROSLocalization &>(from));
}


void ROSLocalization::MergeFrom(const ROSLocalization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSLocalization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  point_cloud_topics_.MergeFrom(from.point_cloud_topics_);
  if (!from._internal_map_topic().empty()) {
    _internal_set_map_topic(from._internal_map_topic());
  }
  if (!from._internal_odom_topic().empty()) {
    _internal_set_odom_topic(from._internal_odom_topic());
  }
  if (!from._internal_path_topic().empty()) {
    _internal_set_path_topic(from._internal_path_topic());
  }
  if (!from._internal_goal_topic().empty()) {
    _internal_set_goal_topic(from._internal_goal_topic());
  }
  if (!from._internal_base_reference_frame().empty()) {
    _internal_set_base_reference_frame(from._internal_base_reference_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROSLocalization::CopyFrom(const ROSLocalization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSLocalization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSLocalization::IsInitialized() const {
  return true;
}

void ROSLocalization::InternalSwap(ROSLocalization* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_cloud_topics_.InternalSwap(&other->point_cloud_topics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &map_topic_, lhs_arena,
      &other->map_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &odom_topic_, lhs_arena,
      &other->odom_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &path_topic_, lhs_arena,
      &other->path_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &goal_topic_, lhs_arena,
      &other->goal_topic_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &base_reference_frame_, lhs_arena,
      &other->base_reference_frame_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSLocalization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto[1]);
}

// ===================================================================

class ROSTransformTree::_Internal {
 public:
};

ROSTransformTree::ROSTransformTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSTransformTree)
}
ROSTransformTree::ROSTransformTree(const ROSTransformTree& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  base_reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    base_reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_base_reference_frame().empty()) {
    base_reference_frame_.Set(from._internal_base_reference_frame(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSTransformTree)
}

inline void ROSTransformTree::SharedCtor() {
base_reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  base_reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ROSTransformTree::~ROSTransformTree() {
  // @@protoc_insertion_point(destructor:v1.model.ROSTransformTree)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROSTransformTree::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  base_reference_frame_.Destroy();
}

void ROSTransformTree::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSTransformTree::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSTransformTree)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  base_reference_frame_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSTransformTree::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string base_reference_frame = 1 [json_name = "baseReferenceFrame"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_base_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSTransformTree.base_reference_frame"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROSTransformTree::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSTransformTree)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string base_reference_frame = 1 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_base_reference_frame().data(), static_cast<int>(this->_internal_base_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSTransformTree.base_reference_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_base_reference_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSTransformTree)
  return target;
}

size_t ROSTransformTree::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSTransformTree)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string base_reference_frame = 1 [json_name = "baseReferenceFrame"];
  if (!this->_internal_base_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_base_reference_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROSTransformTree::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROSTransformTree::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROSTransformTree::GetClassData() const { return &_class_data_; }

void ROSTransformTree::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROSTransformTree *>(to)->MergeFrom(
      static_cast<const ROSTransformTree &>(from));
}


void ROSTransformTree::MergeFrom(const ROSTransformTree& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSTransformTree)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_reference_frame().empty()) {
    _internal_set_base_reference_frame(from._internal_base_reference_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROSTransformTree::CopyFrom(const ROSTransformTree& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSTransformTree)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSTransformTree::IsInitialized() const {
  return true;
}

void ROSTransformTree::InternalSwap(ROSTransformTree* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &base_reference_frame_, lhs_arena,
      &other->base_reference_frame_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSTransformTree::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto[2]);
}

// ===================================================================

class ROSMessageToPublish::_Internal {
 public:
  static const ::v1::model::Twist& twist(const ROSMessageToPublish* msg);
  static const ::v1::model::Transform& pose(const ROSMessageToPublish* msg);
  static const ::v1::model::GoalID& goalid(const ROSMessageToPublish* msg);
  static const ::v1::model::Numeric& numeric(const ROSMessageToPublish* msg);
  static const ::v1::model::PoseWithCovariance& pose_with_covariance(const ROSMessageToPublish* msg);
  static const ::v1::model::Point& point(const ROSMessageToPublish* msg);
};

const ::v1::model::Twist&
ROSMessageToPublish::_Internal::twist(const ROSMessageToPublish* msg) {
  return *msg->data_.twist_;
}
const ::v1::model::Transform&
ROSMessageToPublish::_Internal::pose(const ROSMessageToPublish* msg) {
  return *msg->data_.pose_;
}
const ::v1::model::GoalID&
ROSMessageToPublish::_Internal::goalid(const ROSMessageToPublish* msg) {
  return *msg->data_.goalid_;
}
const ::v1::model::Numeric&
ROSMessageToPublish::_Internal::numeric(const ROSMessageToPublish* msg) {
  return *msg->data_.numeric_;
}
const ::v1::model::PoseWithCovariance&
ROSMessageToPublish::_Internal::pose_with_covariance(const ROSMessageToPublish* msg) {
  return *msg->data_.pose_with_covariance_;
}
const ::v1::model::Point&
ROSMessageToPublish::_Internal::point(const ROSMessageToPublish* msg) {
  return *msg->data_.point_;
}
void ROSMessageToPublish::set_allocated_twist(::v1::model::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    set_has_twist();
    data_.twist_ = twist;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.twist)
}
void ROSMessageToPublish::clear_twist() {
  if (_internal_has_twist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.twist_;
    }
    clear_has_data();
  }
}
void ROSMessageToPublish::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
    data_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.pose)
}
void ROSMessageToPublish::clear_pose() {
  if (_internal_has_pose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.pose_;
    }
    clear_has_data();
  }
}
void ROSMessageToPublish::set_allocated_goalid(::v1::model::GoalID* goalid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (goalid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goalid));
    if (message_arena != submessage_arena) {
      goalid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goalid, submessage_arena);
    }
    set_has_goalid();
    data_.goalid_ = goalid;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.goalID)
}
void ROSMessageToPublish::clear_goalid() {
  if (_internal_has_goalid()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.goalid_;
    }
    clear_has_data();
  }
}
void ROSMessageToPublish::set_allocated_numeric(::v1::model::Numeric* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numeric));
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    set_has_numeric();
    data_.numeric_ = numeric;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.numeric)
}
void ROSMessageToPublish::clear_numeric() {
  if (_internal_has_numeric()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.numeric_;
    }
    clear_has_data();
  }
}
void ROSMessageToPublish::set_allocated_pose_with_covariance(::v1::model::PoseWithCovariance* pose_with_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pose_with_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_with_covariance));
    if (message_arena != submessage_arena) {
      pose_with_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_with_covariance, submessage_arena);
    }
    set_has_pose_with_covariance();
    data_.pose_with_covariance_ = pose_with_covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.pose_with_covariance)
}
void ROSMessageToPublish::clear_pose_with_covariance() {
  if (_internal_has_pose_with_covariance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.pose_with_covariance_;
    }
    clear_has_data();
  }
}
void ROSMessageToPublish::set_allocated_point(::v1::model::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point));
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    data_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ROSMessageToPublish.point)
}
void ROSMessageToPublish::clear_point() {
  if (_internal_has_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.point_;
    }
    clear_has_data();
  }
}
ROSMessageToPublish::ROSMessageToPublish(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ROSMessageToPublish)
}
ROSMessageToPublish::ROSMessageToPublish(const ROSMessageToPublish& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    stream_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_stream().empty()) {
    stream_.Set(from._internal_stream(), 
      GetArenaForAllocation());
  }
  frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kCompressedImage: {
      _internal_set_compressed_image(from._internal_compressed_image());
      break;
    }
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
      break;
    }
    case kGoalID: {
      _internal_mutable_goalid()->::v1::model::GoalID::MergeFrom(from._internal_goalid());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kPoseWithCovariance: {
      _internal_mutable_pose_with_covariance()->::v1::model::PoseWithCovariance::MergeFrom(from._internal_pose_with_covariance());
      break;
    }
    case kPoint: {
      _internal_mutable_point()->::v1::model::Point::MergeFrom(from._internal_point());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ROSMessageToPublish)
}

inline void ROSMessageToPublish::SharedCtor() {
stream_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  stream_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = uint64_t{0u};
clear_has_data();
}

ROSMessageToPublish::~ROSMessageToPublish() {
  // @@protoc_insertion_point(destructor:v1.model.ROSMessageToPublish)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ROSMessageToPublish::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stream_.Destroy();
  frame_id_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void ROSMessageToPublish::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ROSMessageToPublish::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.ROSMessageToPublish)
  switch (data_case()) {
    case kTwist: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.twist_;
      }
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kCompressedImage: {
      data_.compressed_image_.Destroy();
      break;
    }
    case kText: {
      data_.text_.Destroy();
      break;
    }
    case kPose: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.pose_;
      }
      break;
    }
    case kGoalID: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.goalid_;
      }
      break;
    }
    case kNumeric: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.numeric_;
      }
      break;
    }
    case kPoseWithCovariance: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.pose_with_covariance_;
      }
      break;
    }
    case kPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.point_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ROSMessageToPublish::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ROSMessageToPublish)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.ClearToEmpty();
  frame_id_.ClearToEmpty();
  timestamp_ = uint64_t{0u};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ROSMessageToPublish::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream = 1 [json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_stream();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSMessageToPublish.stream"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Twist twist = 2 [json_name = "twist"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool bool = 3 [json_name = "bool"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes compressed_image = 4 [json_name = "compressedImage"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_compressed_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5 [json_name = "text"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSMessageToPublish.text"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform pose = 6 [json_name = "pose"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 7 [json_name = "frameId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.ROSMessageToPublish.frame_id"));
        } else
          goto handle_unusual;
        continue;
      // uint64 timestamp = 8 [json_name = "timestamp"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.GoalID goalID = 9 [json_name = "goalID"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_goalid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Numeric numeric = 10 [json_name = "numeric"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.PoseWithCovariance pose_with_covariance = 11 [json_name = "poseWithCovariance"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_with_covariance(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Point point = 12 [json_name = "point"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ROSMessageToPublish::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ROSMessageToPublish)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream = 1 [json_name = "stream"];
  if (!this->_internal_stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSMessageToPublish.stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream(), target);
  }

  // .v1.model.Twist twist = 2 [json_name = "twist"];
  if (_internal_has_twist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  // bool bool = 3 [json_name = "bool"];
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_bool_(), target);
  }

  // bytes compressed_image = 4 [json_name = "compressedImage"];
  if (_internal_has_compressed_image()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_compressed_image(), target);
  }

  // string text = 5 [json_name = "text"];
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSMessageToPublish.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  // .v1.model.Transform pose = 6 [json_name = "pose"];
  if (_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // string frame_id = 7 [json_name = "frameId"];
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ROSMessageToPublish.frame_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_frame_id(), target);
  }

  // uint64 timestamp = 8 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_timestamp(), target);
  }

  // .v1.model.GoalID goalID = 9 [json_name = "goalID"];
  if (_internal_has_goalid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::goalid(this),
        _Internal::goalid(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Numeric numeric = 10 [json_name = "numeric"];
  if (_internal_has_numeric()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::numeric(this),
        _Internal::numeric(this).GetCachedSize(), target, stream);
  }

  // .v1.model.PoseWithCovariance pose_with_covariance = 11 [json_name = "poseWithCovariance"];
  if (_internal_has_pose_with_covariance()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::pose_with_covariance(this),
        _Internal::pose_with_covariance(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Point point = 12 [json_name = "point"];
  if (_internal_has_point()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::point(this),
        _Internal::point(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ROSMessageToPublish)
  return target;
}

size_t ROSMessageToPublish::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ROSMessageToPublish)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream = 1 [json_name = "stream"];
  if (!this->_internal_stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // string frame_id = 7 [json_name = "frameId"];
  if (!this->_internal_frame_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // uint64 timestamp = 8 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.Twist twist = 2 [json_name = "twist"];
    case kTwist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.twist_);
      break;
    }
    // bool bool = 3 [json_name = "bool"];
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // bytes compressed_image = 4 [json_name = "compressedImage"];
    case kCompressedImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_compressed_image());
      break;
    }
    // string text = 5 [json_name = "text"];
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    // .v1.model.Transform pose = 6 [json_name = "pose"];
    case kPose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.pose_);
      break;
    }
    // .v1.model.GoalID goalID = 9 [json_name = "goalID"];
    case kGoalID: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.goalid_);
      break;
    }
    // .v1.model.Numeric numeric = 10 [json_name = "numeric"];
    case kNumeric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.numeric_);
      break;
    }
    // .v1.model.PoseWithCovariance pose_with_covariance = 11 [json_name = "poseWithCovariance"];
    case kPoseWithCovariance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.pose_with_covariance_);
      break;
    }
    // .v1.model.Point point = 12 [json_name = "point"];
    case kPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.point_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ROSMessageToPublish::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ROSMessageToPublish::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ROSMessageToPublish::GetClassData() const { return &_class_data_; }

void ROSMessageToPublish::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ROSMessageToPublish *>(to)->MergeFrom(
      static_cast<const ROSMessageToPublish &>(from));
}


void ROSMessageToPublish::MergeFrom(const ROSMessageToPublish& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ROSMessageToPublish)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_stream().empty()) {
    _internal_set_stream(from._internal_stream());
  }
  if (!from._internal_frame_id().empty()) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kCompressedImage: {
      _internal_set_compressed_image(from._internal_compressed_image());
      break;
    }
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
      break;
    }
    case kGoalID: {
      _internal_mutable_goalid()->::v1::model::GoalID::MergeFrom(from._internal_goalid());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kPoseWithCovariance: {
      _internal_mutable_pose_with_covariance()->::v1::model::PoseWithCovariance::MergeFrom(from._internal_pose_with_covariance());
      break;
    }
    case kPoint: {
      _internal_mutable_point()->::v1::model::Point::MergeFrom(from._internal_point());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ROSMessageToPublish::CopyFrom(const ROSMessageToPublish& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ROSMessageToPublish)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ROSMessageToPublish::IsInitialized() const {
  return true;
}

void ROSMessageToPublish::InternalSwap(ROSMessageToPublish* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &stream_, lhs_arena,
      &other->stream_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_id_, lhs_arena,
      &other->frame_id_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ROSMessageToPublish::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fros_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fros_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::ROSTopic*
Arena::CreateMaybeMessage< ::v1::model::ROSTopic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSTopic >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSLocalization*
Arena::CreateMaybeMessage< ::v1::model::ROSLocalization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSLocalization >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSTransformTree*
Arena::CreateMaybeMessage< ::v1::model::ROSTransformTree >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSTransformTree >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ROSMessageToPublish*
Arena::CreateMaybeMessage< ::v1::model::ROSMessageToPublish >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ROSMessageToPublish >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/views.proto

#include "protos/model/v1/views.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v1 {
namespace model {
constexpr ViewsMetadata::ViewsMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : views_(){}
struct ViewsMetadataDefaultTypeInternal {
  constexpr ViewsMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewsMetadataDefaultTypeInternal() {}
  union {
    ViewsMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewsMetadataDefaultTypeInternal _ViewsMetadata_default_instance_;
constexpr ViewMetadata_TagsEntry_DoNotUse::ViewMetadata_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ViewMetadata_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewMetadata_TagsEntry_DoNotUseDefaultTypeInternal _ViewMetadata_TagsEntry_DoNotUse_default_instance_;
constexpr ViewMetadata::ViewMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , configuration_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organizationid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , layouttype_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , smartfleetid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , filter_(nullptr)
  , layout_(nullptr)
  , showonsingledevice_(false)
  , showonmultidevice_(false)
  , showonteleop_(false)
  , showonanalytics_(false)
  , showtimeline_(false)
  , index_(int64_t{0}){}
struct ViewMetadataDefaultTypeInternal {
  constexpr ViewMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewMetadataDefaultTypeInternal() {}
  union {
    ViewMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewMetadataDefaultTypeInternal _ViewMetadata_default_instance_;
constexpr Filter_TagsEntry_DoNotUse::Filter_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Filter_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr Filter_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Filter_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Filter_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Filter_TagsEntry_DoNotUseDefaultTypeInternal _Filter_TagsEntry_DoNotUse_default_instance_;
constexpr Filter_NotTagsEntry_DoNotUse::Filter_NotTagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Filter_NotTagsEntry_DoNotUseDefaultTypeInternal {
  constexpr Filter_NotTagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Filter_NotTagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Filter_NotTagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Filter_NotTagsEntry_DoNotUseDefaultTypeInternal _Filter_NotTagsEntry_DoNotUse_default_instance_;
constexpr Filter::Filter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , names_()
  , types_()
  , deviceids_()
  , nottags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , notnames_()
  , agentids_(){}
struct FilterDefaultTypeInternal {
  constexpr FilterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FilterDefaultTypeInternal() {}
  union {
    Filter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FilterDefaultTypeInternal _Filter_default_instance_;
constexpr ViewConfiguration::ViewConfiguration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : streamname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr){}
struct ViewConfigurationDefaultTypeInternal {
  constexpr ViewConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ViewConfigurationDefaultTypeInternal() {}
  union {
    ViewConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ViewConfigurationDefaultTypeInternal _ViewConfiguration_default_instance_;
}  // namespace model
}  // namespace v1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_protos_2fmodel_2fv1_2fviews_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fviews_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fviews_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewsMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewsMetadata, views_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, organizationid_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, description_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, url_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, showonsingledevice_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, showonmultidevice_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, showonteleop_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, showonanalytics_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, showtimeline_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, filter_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, layout_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, layouttype_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, configuration_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, smartfleetid_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewMetadata, index_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_TagsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_NotTagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_NotTagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_NotTagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter_NotTagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, names_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, types_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, deviceids_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, nottags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, notnames_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Filter, agentids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewConfiguration, streamname_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewConfiguration, type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ViewConfiguration, configuration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::v1::model::ViewsMetadata)},
  { 6, 13, sizeof(::v1::model::ViewMetadata_TagsEntry_DoNotUse)},
  { 15, -1, sizeof(::v1::model::ViewMetadata)},
  { 37, 44, sizeof(::v1::model::Filter_TagsEntry_DoNotUse)},
  { 46, 53, sizeof(::v1::model::Filter_NotTagsEntry_DoNotUse)},
  { 55, -1, sizeof(::v1::model::Filter)},
  { 67, -1, sizeof(::v1::model::ViewConfiguration)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ViewsMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ViewMetadata_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ViewMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Filter_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Filter_NotTagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Filter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ViewConfiguration_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fviews_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033protos/model/v1/views.proto\022\010v1.model\032"
  "\037google/protobuf/timestamp.proto\032\037protos"
  "/model/v1/datapoint.proto\032\034google/protob"
  "uf/struct.proto\"=\n\rViewsMetadata\022,\n\005view"
  "s\030\001 \003(\0132\026.v1.model.ViewMetadataR\005views\"\232"
  "\006\n\014ViewMetadata\022\016\n\002id\030\001 \001(\tR\002id\0224\n\004tags\030"
  "\002 \003(\0132 .v1.model.ViewMetadata.TagsEntryR"
  "\004tags\022&\n\016organizationId\030\003 \001(\tR\016organizat"
  "ionId\022\022\n\004name\030\004 \001(\tR\004name\022 \n\013description"
  "\030\005 \001(\tR\013description\022\020\n\003url\030\006 \001(\tR\003url\022.\n"
  "\022showOnSingleDevice\030\007 \001(\010R\022showOnSingleD"
  "evice\022,\n\021showOnMultiDevice\030\010 \001(\010R\021showOn"
  "MultiDevice\022\"\n\014showOnTeleop\030\t \001(\010R\014showO"
  "nTeleop\022(\n\017showOnAnalytics\030\n \001(\010R\017showOn"
  "Analytics\022\"\n\014showTimeline\030\013 \001(\010R\014showTim"
  "eline\022(\n\006filter\030\014 \001(\0132\020.v1.model.FilterR"
  "\006filter\022/\n\006layout\030\r \001(\0132\027.google.protobu"
  "f.StructR\006layout\022\036\n\nlayoutType\030\016 \001(\tR\nla"
  "youtType\022A\n\rconfiguration\030\017 \003(\0132\033.v1.mod"
  "el.ViewConfigurationR\rconfiguration\022\"\n\014s"
  "martFleetId\030\020 \001(\tR\014smartFleetId\022\024\n\005index"
  "\030\021 \001(\003R\005index\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR"
  "\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"S\n\nLayout"
  "Type\022\r\n\tDASHBOARD\020\000\022\013\n\007OBSERVE\020\001\022\016\n\nFULL"
  "SCREEN\020\002\022\r\n\tANALYTICS\020\003\022\n\n\006TELEOP\020\004\"\350\002\n\006"
  "Filter\022.\n\004tags\030\001 \003(\0132\032.v1.model.Filter.T"
  "agsEntryR\004tags\022\024\n\005names\030\002 \003(\tR\005names\022\024\n\005"
  "types\030\003 \003(\tR\005types\022\034\n\tdeviceIds\030\004 \003(\tR\td"
  "eviceIds\0227\n\007notTags\030\005 \003(\0132\035.v1.model.Fil"
  "ter.NotTagsEntryR\007notTags\022\032\n\010notNames\030\006 "
  "\003(\tR\010notNames\022\032\n\010agentIds\030\007 \003(\tR\010agentId"
  "s\0327\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005valu"
  "e\030\002 \001(\tR\005value:\0028\001\032:\n\014NotTagsEntry\022\020\n\003ke"
  "y\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001\"\206"
  "\001\n\021ViewConfiguration\022\036\n\nstreamName\030\001 \001(\t"
  "R\nstreamName\022\022\n\004type\030\002 \001(\tR\004type\022=\n\rconf"
  "iguration\030\003 \001(\0132\027.google.protobuf.Struct"
  "R\rconfigurationB+Z)github.com/FormantIO/"
  "genproto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto = {
  false, false, 1548, descriptor_table_protodef_protos_2fmodel_2fv1_2fviews_2eproto, "protos/model/v1/views.proto", 
  &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_deps, 3, 7,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fviews_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fviews_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fviews_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fviews_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto);
namespace v1 {
namespace model {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ViewMetadata_LayoutType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto);
  return file_level_enum_descriptors_protos_2fmodel_2fv1_2fviews_2eproto[0];
}
bool ViewMetadata_LayoutType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ViewMetadata_LayoutType ViewMetadata::DASHBOARD;
constexpr ViewMetadata_LayoutType ViewMetadata::OBSERVE;
constexpr ViewMetadata_LayoutType ViewMetadata::FULLSCREEN;
constexpr ViewMetadata_LayoutType ViewMetadata::ANALYTICS;
constexpr ViewMetadata_LayoutType ViewMetadata::TELEOP;
constexpr ViewMetadata_LayoutType ViewMetadata::LayoutType_MIN;
constexpr ViewMetadata_LayoutType ViewMetadata::LayoutType_MAX;
constexpr int ViewMetadata::LayoutType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ViewsMetadata::_Internal {
 public:
};

ViewsMetadata::ViewsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  views_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ViewsMetadata)
}
ViewsMetadata::ViewsMetadata(const ViewsMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      views_(from.views_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.ViewsMetadata)
}

void ViewsMetadata::SharedCtor() {
}

ViewsMetadata::~ViewsMetadata() {
  // @@protoc_insertion_point(destructor:v1.model.ViewsMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewsMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ViewsMetadata::ArenaDtor(void* object) {
  ViewsMetadata* _this = reinterpret_cast< ViewsMetadata* >(object);
  (void)_this;
}
void ViewsMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewsMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewsMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ViewsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  views_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewsMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.ViewMetadata views = 1 [json_name = "views"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_views(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewsMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ViewsMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.ViewMetadata views = 1 [json_name = "views"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_views_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_views(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ViewsMetadata)
  return target;
}

size_t ViewsMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ViewsMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.ViewMetadata views = 1 [json_name = "views"];
  total_size += 1UL * this->_internal_views_size();
  for (const auto& msg : this->views_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewsMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ViewsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewsMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewsMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ViewsMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ViewsMetadata)
    MergeFrom(*source);
  }
}

void ViewsMetadata::MergeFrom(const ViewsMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ViewsMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  views_.MergeFrom(from.views_);
}

void ViewsMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ViewsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewsMetadata::CopyFrom(const ViewsMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ViewsMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewsMetadata::IsInitialized() const {
  return true;
}

void ViewsMetadata::InternalSwap(ViewsMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  views_.InternalSwap(&other->views_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewsMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[0]);
}

// ===================================================================

ViewMetadata_TagsEntry_DoNotUse::ViewMetadata_TagsEntry_DoNotUse() {}
ViewMetadata_TagsEntry_DoNotUse::ViewMetadata_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ViewMetadata_TagsEntry_DoNotUse::MergeFrom(const ViewMetadata_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ViewMetadata_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[1]);
}
void ViewMetadata_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class ViewMetadata::_Internal {
 public:
  static const ::v1::model::Filter& filter(const ViewMetadata* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& layout(const ViewMetadata* msg);
};

const ::v1::model::Filter&
ViewMetadata::_Internal::filter(const ViewMetadata* msg) {
  return *msg->filter_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
ViewMetadata::_Internal::layout(const ViewMetadata* msg) {
  return *msg->layout_;
}
void ViewMetadata::clear_layout() {
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
}
ViewMetadata::ViewMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  configuration_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ViewMetadata)
}
ViewMetadata::ViewMetadata(const ViewMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      configuration_(from.configuration_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  organizationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organizationid().empty()) {
    organizationid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organizationid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  layouttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_layouttype().empty()) {
    layouttype_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_layouttype(), 
      GetArenaForAllocation());
  }
  smartfleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_smartfleetid().empty()) {
    smartfleetid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_smartfleetid(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_filter()) {
    filter_ = new ::v1::model::Filter(*from.filter_);
  } else {
    filter_ = nullptr;
  }
  if (from._internal_has_layout()) {
    layout_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.layout_);
  } else {
    layout_ = nullptr;
  }
  ::memcpy(&showonsingledevice_, &from.showonsingledevice_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&showonsingledevice_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:v1.model.ViewMetadata)
}

void ViewMetadata::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organizationid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
layouttype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
smartfleetid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&filter_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&filter_)) + sizeof(index_));
}

ViewMetadata::~ViewMetadata() {
  // @@protoc_insertion_point(destructor:v1.model.ViewMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organizationid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  layouttype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  smartfleetid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete filter_;
  if (this != internal_default_instance()) delete layout_;
}

void ViewMetadata::ArenaDtor(void* object) {
  ViewMetadata* _this = reinterpret_cast< ViewMetadata* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void ViewMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ViewMetadata::ArenaDtor);
  }
}
void ViewMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ViewMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  configuration_.Clear();
  id_.ClearToEmpty();
  organizationid_.ClearToEmpty();
  name_.ClearToEmpty();
  description_.ClearToEmpty();
  url_.ClearToEmpty();
  layouttype_.ClearToEmpty();
  smartfleetid_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && filter_ != nullptr) {
    delete filter_;
  }
  filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && layout_ != nullptr) {
    delete layout_;
  }
  layout_ = nullptr;
  ::memset(&showonsingledevice_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&showonsingledevice_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 2 [json_name = "tags"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string organizationId = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_organizationid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.organizationId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 4 [json_name = "name"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 5 [json_name = "description"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 6 [json_name = "url"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showOnSingleDevice = 7 [json_name = "showOnSingleDevice"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          showonsingledevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showOnMultiDevice = 8 [json_name = "showOnMultiDevice"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          showonmultidevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showOnTeleop = 9 [json_name = "showOnTeleop"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          showonteleop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showOnAnalytics = 10 [json_name = "showOnAnalytics"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          showonanalytics_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool showTimeline = 11 [json_name = "showTimeline"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          showtimeline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Filter filter = 12 [json_name = "filter"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct layout = 13 [json_name = "layout"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_layout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string layoutType = 14 [json_name = "layoutType"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_layouttype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.layoutType"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .v1.model.ViewConfiguration configuration = 15 [json_name = "configuration"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_configuration(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // string smartFleetId = 16 [json_name = "smartFleetId"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_smartfleetid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewMetadata.smartFleetId"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 index = 17 [json_name = "index"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ViewMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // map<string, string> tags = 2 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ViewMetadata.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.ViewMetadata.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ViewMetadata_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = ViewMetadata_TagsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string organizationId = 3 [json_name = "organizationId"];
  if (!this->organizationid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organizationid().data(), static_cast<int>(this->_internal_organizationid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.organizationId");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_organizationid(), target);
  }

  // string name = 4 [json_name = "name"];
  if (!this->name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  // string description = 5 [json_name = "description"];
  if (!this->description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.description");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_description(), target);
  }

  // string url = 6 [json_name = "url"];
  if (!this->url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.url");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_url(), target);
  }

  // bool showOnSingleDevice = 7 [json_name = "showOnSingleDevice"];
  if (this->showonsingledevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_showonsingledevice(), target);
  }

  // bool showOnMultiDevice = 8 [json_name = "showOnMultiDevice"];
  if (this->showonmultidevice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_showonmultidevice(), target);
  }

  // bool showOnTeleop = 9 [json_name = "showOnTeleop"];
  if (this->showonteleop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_showonteleop(), target);
  }

  // bool showOnAnalytics = 10 [json_name = "showOnAnalytics"];
  if (this->showonanalytics() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_showonanalytics(), target);
  }

  // bool showTimeline = 11 [json_name = "showTimeline"];
  if (this->showtimeline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_showtimeline(), target);
  }

  // .v1.model.Filter filter = 12 [json_name = "filter"];
  if (this->has_filter()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::filter(this), target, stream);
  }

  // .google.protobuf.Struct layout = 13 [json_name = "layout"];
  if (this->has_layout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::layout(this), target, stream);
  }

  // string layoutType = 14 [json_name = "layoutType"];
  if (!this->layouttype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_layouttype().data(), static_cast<int>(this->_internal_layouttype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.layoutType");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_layouttype(), target);
  }

  // repeated .v1.model.ViewConfiguration configuration = 15 [json_name = "configuration"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_configuration_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_configuration(i), target, stream);
  }

  // string smartFleetId = 16 [json_name = "smartFleetId"];
  if (!this->smartfleetid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_smartfleetid().data(), static_cast<int>(this->_internal_smartfleetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewMetadata.smartFleetId");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_smartfleetid(), target);
  }

  // int64 index = 17 [json_name = "index"];
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(17, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ViewMetadata)
  return target;
}

size_t ViewMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ViewMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 2 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += ViewMetadata_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .v1.model.ViewConfiguration configuration = 15 [json_name = "configuration"];
  total_size += 1UL * this->_internal_configuration_size();
  for (const auto& msg : this->configuration_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string organizationId = 3 [json_name = "organizationId"];
  if (!this->organizationid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organizationid());
  }

  // string name = 4 [json_name = "name"];
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 5 [json_name = "description"];
  if (!this->description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string url = 6 [json_name = "url"];
  if (!this->url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  // string layoutType = 14 [json_name = "layoutType"];
  if (!this->layouttype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_layouttype());
  }

  // string smartFleetId = 16 [json_name = "smartFleetId"];
  if (!this->smartfleetid().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_smartfleetid());
  }

  // .v1.model.Filter filter = 12 [json_name = "filter"];
  if (this->has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *filter_);
  }

  // .google.protobuf.Struct layout = 13 [json_name = "layout"];
  if (this->has_layout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *layout_);
  }

  // bool showOnSingleDevice = 7 [json_name = "showOnSingleDevice"];
  if (this->showonsingledevice() != 0) {
    total_size += 1 + 1;
  }

  // bool showOnMultiDevice = 8 [json_name = "showOnMultiDevice"];
  if (this->showonmultidevice() != 0) {
    total_size += 1 + 1;
  }

  // bool showOnTeleop = 9 [json_name = "showOnTeleop"];
  if (this->showonteleop() != 0) {
    total_size += 1 + 1;
  }

  // bool showOnAnalytics = 10 [json_name = "showOnAnalytics"];
  if (this->showonanalytics() != 0) {
    total_size += 1 + 1;
  }

  // bool showTimeline = 11 [json_name = "showTimeline"];
  if (this->showtimeline() != 0) {
    total_size += 1 + 1;
  }

  // int64 index = 17 [json_name = "index"];
  if (this->index() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ViewMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ViewMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ViewMetadata)
    MergeFrom(*source);
  }
}

void ViewMetadata::MergeFrom(const ViewMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ViewMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  configuration_.MergeFrom(from.configuration_);
  if (!from.id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from.organizationid().empty()) {
    _internal_set_organizationid(from._internal_organizationid());
  }
  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from.description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from.url().empty()) {
    _internal_set_url(from._internal_url());
  }
  if (!from.layouttype().empty()) {
    _internal_set_layouttype(from._internal_layouttype());
  }
  if (!from.smartfleetid().empty()) {
    _internal_set_smartfleetid(from._internal_smartfleetid());
  }
  if (from.has_filter()) {
    _internal_mutable_filter()->::v1::model::Filter::MergeFrom(from._internal_filter());
  }
  if (from.has_layout()) {
    _internal_mutable_layout()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_layout());
  }
  if (from.showonsingledevice() != 0) {
    _internal_set_showonsingledevice(from._internal_showonsingledevice());
  }
  if (from.showonmultidevice() != 0) {
    _internal_set_showonmultidevice(from._internal_showonmultidevice());
  }
  if (from.showonteleop() != 0) {
    _internal_set_showonteleop(from._internal_showonteleop());
  }
  if (from.showonanalytics() != 0) {
    _internal_set_showonanalytics(from._internal_showonanalytics());
  }
  if (from.showtimeline() != 0) {
    _internal_set_showtimeline(from._internal_showtimeline());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void ViewMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ViewMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewMetadata::CopyFrom(const ViewMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ViewMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewMetadata::IsInitialized() const {
  return true;
}

void ViewMetadata::InternalSwap(ViewMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  configuration_.InternalSwap(&other->configuration_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organizationid_, GetArenaForAllocation(),
      &other->organizationid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &layouttype_, GetArenaForAllocation(),
      &other->layouttype_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &smartfleetid_, GetArenaForAllocation(),
      &other->smartfleetid_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ViewMetadata, index_)
      + sizeof(ViewMetadata::index_)
      - PROTOBUF_FIELD_OFFSET(ViewMetadata, filter_)>(
          reinterpret_cast<char*>(&filter_),
          reinterpret_cast<char*>(&other->filter_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[2]);
}

// ===================================================================

Filter_TagsEntry_DoNotUse::Filter_TagsEntry_DoNotUse() {}
Filter_TagsEntry_DoNotUse::Filter_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Filter_TagsEntry_DoNotUse::MergeFrom(const Filter_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Filter_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[3]);
}
void Filter_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

Filter_NotTagsEntry_DoNotUse::Filter_NotTagsEntry_DoNotUse() {}
Filter_NotTagsEntry_DoNotUse::Filter_NotTagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Filter_NotTagsEntry_DoNotUse::MergeFrom(const Filter_NotTagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Filter_NotTagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[4]);
}
void Filter_NotTagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Filter::_Internal {
 public:
};

Filter::Filter(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena),
  names_(arena),
  types_(arena),
  deviceids_(arena),
  nottags_(arena),
  notnames_(arena),
  agentids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Filter)
}
Filter::Filter(const Filter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      names_(from.names_),
      types_(from.types_),
      deviceids_(from.deviceids_),
      notnames_(from.notnames_),
      agentids_(from.agentids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  nottags_.MergeFrom(from.nottags_);
  // @@protoc_insertion_point(copy_constructor:v1.model.Filter)
}

void Filter::SharedCtor() {
}

Filter::~Filter() {
  // @@protoc_insertion_point(destructor:v1.model.Filter)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Filter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Filter::ArenaDtor(void* object) {
  Filter* _this = reinterpret_cast< Filter* >(object);
  (void)_this;
  _this->tags_. ~MapField();
  _this->nottags_. ~MapField();
}
inline void Filter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Filter::ArenaDtor);
  }
}
void Filter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Filter::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  names_.Clear();
  types_.Clear();
  deviceids_.Clear();
  nottags_.Clear();
  notnames_.Clear();
  agentids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Filter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> tags = 1 [json_name = "tags"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string names = 2 [json_name = "names"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Filter.names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string types = 3 [json_name = "types"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Filter.types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string deviceIds = 4 [json_name = "deviceIds"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deviceids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Filter.deviceIds"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> notTags = 5 [json_name = "notTags"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&nottags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string notNames = 6 [json_name = "notNames"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_notnames();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Filter.notNames"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string agentIds = 7 [json_name = "agentIds"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_agentids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Filter.agentIds"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Filter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Filter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> tags = 1 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Filter.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Filter.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Filter_TagsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Filter_TagsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string names = 2 [json_name = "names"];
  for (int i = 0, n = this->_internal_names_size(); i < n; i++) {
    const auto& s = this->_internal_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Filter.names");
    target = stream->WriteString(2, s, target);
  }

  // repeated string types = 3 [json_name = "types"];
  for (int i = 0, n = this->_internal_types_size(); i < n; i++) {
    const auto& s = this->_internal_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Filter.types");
    target = stream->WriteString(3, s, target);
  }

  // repeated string deviceIds = 4 [json_name = "deviceIds"];
  for (int i = 0, n = this->_internal_deviceids_size(); i < n; i++) {
    const auto& s = this->_internal_deviceids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Filter.deviceIds");
    target = stream->WriteString(4, s, target);
  }

  // map<string, string> notTags = 5 [json_name = "notTags"];
  if (!this->_internal_nottags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Filter.NotTagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Filter.NotTagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_nottags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_nottags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_nottags().begin();
          it != this->_internal_nottags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Filter_NotTagsEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_nottags().begin();
          it != this->_internal_nottags().end(); ++it) {
        target = Filter_NotTagsEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated string notNames = 6 [json_name = "notNames"];
  for (int i = 0, n = this->_internal_notnames_size(); i < n; i++) {
    const auto& s = this->_internal_notnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Filter.notNames");
    target = stream->WriteString(6, s, target);
  }

  // repeated string agentIds = 7 [json_name = "agentIds"];
  for (int i = 0, n = this->_internal_agentids_size(); i < n; i++) {
    const auto& s = this->_internal_agentids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Filter.agentIds");
    target = stream->WriteString(7, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Filter)
  return target;
}

size_t Filter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Filter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 1 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Filter_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string names = 2 [json_name = "names"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(names_.size());
  for (int i = 0, n = names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      names_.Get(i));
  }

  // repeated string types = 3 [json_name = "types"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(types_.size());
  for (int i = 0, n = types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      types_.Get(i));
  }

  // repeated string deviceIds = 4 [json_name = "deviceIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deviceids_.size());
  for (int i = 0, n = deviceids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deviceids_.Get(i));
  }

  // map<string, string> notTags = 5 [json_name = "notTags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_nottags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_nottags().begin();
      it != this->_internal_nottags().end(); ++it) {
    total_size += Filter_NotTagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string notNames = 6 [json_name = "notNames"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(notnames_.size());
  for (int i = 0, n = notnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      notnames_.Get(i));
  }

  // repeated string agentIds = 7 [json_name = "agentIds"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(agentids_.size());
  for (int i = 0, n = agentids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      agentids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Filter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  const Filter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Filter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Filter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Filter)
    MergeFrom(*source);
  }
}

void Filter::MergeFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Filter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  names_.MergeFrom(from.names_);
  types_.MergeFrom(from.types_);
  deviceids_.MergeFrom(from.deviceids_);
  nottags_.MergeFrom(from.nottags_);
  notnames_.MergeFrom(from.notnames_);
  agentids_.MergeFrom(from.agentids_);
}

void Filter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Filter::CopyFrom(const Filter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Filter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Filter::IsInitialized() const {
  return true;
}

void Filter::InternalSwap(Filter* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  names_.InternalSwap(&other->names_);
  types_.InternalSwap(&other->types_);
  deviceids_.InternalSwap(&other->deviceids_);
  nottags_.InternalSwap(&other->nottags_);
  notnames_.InternalSwap(&other->notnames_);
  agentids_.InternalSwap(&other->agentids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Filter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[5]);
}

// ===================================================================

class ViewConfiguration::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Struct& configuration(const ViewConfiguration* msg);
};

const PROTOBUF_NAMESPACE_ID::Struct&
ViewConfiguration::_Internal::configuration(const ViewConfiguration* msg) {
  return *msg->configuration_;
}
void ViewConfiguration::clear_configuration() {
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
ViewConfiguration::ViewConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ViewConfiguration)
}
ViewConfiguration::ViewConfiguration(const ViewConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_streamname().empty()) {
    streamname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_streamname(), 
      GetArenaForAllocation());
  }
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new PROTOBUF_NAMESPACE_ID::Struct(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ViewConfiguration)
}

void ViewConfiguration::SharedCtor() {
streamname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
configuration_ = nullptr;
}

ViewConfiguration::~ViewConfiguration() {
  // @@protoc_insertion_point(destructor:v1.model.ViewConfiguration)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ViewConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  streamname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
}

void ViewConfiguration::ArenaDtor(void* object) {
  ViewConfiguration* _this = reinterpret_cast< ViewConfiguration* >(object);
  (void)_this;
}
void ViewConfiguration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ViewConfiguration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ViewConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  streamname_.ClearToEmpty();
  type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ViewConfiguration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string streamName = 1 [json_name = "streamName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_streamname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewConfiguration.streamName"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ViewConfiguration.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct configuration = 3 [json_name = "configuration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ViewConfiguration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ViewConfiguration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string streamName = 1 [json_name = "streamName"];
  if (!this->streamname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_streamname().data(), static_cast<int>(this->_internal_streamname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewConfiguration.streamName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_streamname(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ViewConfiguration.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .google.protobuf.Struct configuration = 3 [json_name = "configuration"];
  if (this->has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::configuration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ViewConfiguration)
  return target;
}

size_t ViewConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ViewConfiguration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string streamName = 1 [json_name = "streamName"];
  if (!this->streamname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_streamname());
  }

  // string type = 2 [json_name = "type"];
  if (!this->type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .google.protobuf.Struct configuration = 3 [json_name = "configuration"];
  if (this->has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ViewConfiguration::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  const ViewConfiguration* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ViewConfiguration>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ViewConfiguration)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ViewConfiguration)
    MergeFrom(*source);
  }
}

void ViewConfiguration::MergeFrom(const ViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ViewConfiguration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.streamname().empty()) {
    _internal_set_streamname(from._internal_streamname());
  }
  if (!from.type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from.has_configuration()) {
    _internal_mutable_configuration()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_configuration());
  }
}

void ViewConfiguration::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ViewConfiguration::CopyFrom(const ViewConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ViewConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ViewConfiguration::IsInitialized() const {
  return true;
}

void ViewConfiguration::InternalSwap(ViewConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &streamname_, GetArenaForAllocation(),
      &other->streamname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, GetArenaForAllocation(),
      &other->type_, other->GetArenaForAllocation()
  );
  swap(configuration_, other->configuration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ViewConfiguration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fviews_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fviews_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::ViewsMetadata* Arena::CreateMaybeMessage< ::v1::model::ViewsMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ViewsMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ViewMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::ViewMetadata_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ViewMetadata_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ViewMetadata* Arena::CreateMaybeMessage< ::v1::model::ViewMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ViewMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Filter_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::Filter_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Filter_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Filter_NotTagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::Filter_NotTagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Filter_NotTagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Filter* Arena::CreateMaybeMessage< ::v1::model::Filter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Filter >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ViewConfiguration* Arena::CreateMaybeMessage< ::v1::model::ViewConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ViewConfiguration >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/commands.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include "protos/model/v1/datapoint.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fcommands_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fcommands_2eproto;
namespace v1 {
namespace model {
class CommandMetadata;
struct CommandMetadataDefaultTypeInternal;
extern CommandMetadataDefaultTypeInternal _CommandMetadata_default_instance_;
class CommandMetadata_ParameterMetaEntry_DoNotUse;
struct CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal;
extern CommandMetadata_ParameterMetaEntry_DoNotUseDefaultTypeInternal _CommandMetadata_ParameterMetaEntry_DoNotUse_default_instance_;
class CommandMetadata_TagsEntry_DoNotUse;
struct CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal;
extern CommandMetadata_TagsEntry_DoNotUseDefaultTypeInternal _CommandMetadata_TagsEntry_DoNotUse_default_instance_;
class CommandRequest;
struct CommandRequestDefaultTypeInternal;
extern CommandRequestDefaultTypeInternal _CommandRequest_default_instance_;
class CommandResponse;
struct CommandResponseDefaultTypeInternal;
extern CommandResponseDefaultTypeInternal _CommandResponse_default_instance_;
class CommandsMetadata;
struct CommandsMetadataDefaultTypeInternal;
extern CommandsMetadataDefaultTypeInternal _CommandsMetadata_default_instance_;
class FileInfo;
struct FileInfoDefaultTypeInternal;
extern FileInfoDefaultTypeInternal _FileInfo_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::CommandMetadata* Arena::CreateMaybeMessage<::v1::model::CommandMetadata>(Arena*);
template<> ::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::CommandMetadata_ParameterMetaEntry_DoNotUse>(Arena*);
template<> ::v1::model::CommandMetadata_TagsEntry_DoNotUse* Arena::CreateMaybeMessage<::v1::model::CommandMetadata_TagsEntry_DoNotUse>(Arena*);
template<> ::v1::model::CommandRequest* Arena::CreateMaybeMessage<::v1::model::CommandRequest>(Arena*);
template<> ::v1::model::CommandResponse* Arena::CreateMaybeMessage<::v1::model::CommandResponse>(Arena*);
template<> ::v1::model::CommandsMetadata* Arena::CreateMaybeMessage<::v1::model::CommandsMetadata>(Arena*);
template<> ::v1::model::FileInfo* Arena::CreateMaybeMessage<::v1::model::FileInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class CommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandRequest) */ {
 public:
  inline CommandRequest() : CommandRequest(nullptr) {}
  ~CommandRequest() override;
  explicit constexpr CommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandRequest(const CommandRequest& from);
  CommandRequest(CommandRequest&& from) noexcept
    : CommandRequest() {
    *this = ::std::move(from);
  }

  inline CommandRequest& operator=(const CommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandRequest& operator=(CommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandRequest& default_instance() {
    return *internal_default_instance();
  }
  enum ParameterCase {
    kText = 3,
    PARAMETER_NOT_SET = 0,
  };

  static inline const CommandRequest* internal_default_instance() {
    return reinterpret_cast<const CommandRequest*>(
               &_CommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CommandRequest& a, CommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandRequest* New() const final {
    return new CommandRequest();
  }

  CommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandRequest& from);
  void MergeFrom(const CommandRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandRequest";
  }
  protected:
  explicit CommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilesFieldNumber = 5,
    kIdFieldNumber = 1,
    kCommandFieldNumber = 2,
    kScrubberTimeFieldNumber = 4,
    kTextFieldNumber = 3,
  };
  // repeated .v1.model.FileInfo files = 5 [json_name = "files"];
  int files_size() const;
  private:
  int _internal_files_size() const;
  public:
  void clear_files();
  ::v1::model::FileInfo* mutable_files(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::FileInfo >*
      mutable_files();
  private:
  const ::v1::model::FileInfo& _internal_files(int index) const;
  ::v1::model::FileInfo* _internal_add_files();
  public:
  const ::v1::model::FileInfo& files(int index) const;
  ::v1::model::FileInfo* add_files();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::FileInfo >&
      files() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string command = 2 [json_name = "command"];
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // .google.protobuf.Timestamp scrubber_time = 4 [json_name = "scrubberTime"];
  bool has_scrubber_time() const;
  private:
  bool _internal_has_scrubber_time() const;
  public:
  void clear_scrubber_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& scrubber_time() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT PROTOBUF_NAMESPACE_ID::Timestamp* release_scrubber_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_scrubber_time();
  void set_allocated_scrubber_time(PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_scrubber_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_scrubber_time();
  public:
  void unsafe_arena_set_allocated_scrubber_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_scrubber_time();

  // string text = 3 [json_name = "text"];
  bool has_text() const;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  void clear_parameter();
  ParameterCase parameter_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.CommandRequest)
 private:
  class _Internal;
  void set_has_text();

  inline bool has_parameter() const;
  inline void clear_has_parameter();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::FileInfo > files_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time_;
  union ParameterUnion {
    constexpr ParameterUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandResponse) */ {
 public:
  inline CommandResponse() : CommandResponse(nullptr) {}
  ~CommandResponse() override;
  explicit constexpr CommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandResponse(const CommandResponse& from);
  CommandResponse(CommandResponse&& from) noexcept
    : CommandResponse() {
    *this = ::std::move(from);
  }

  inline CommandResponse& operator=(const CommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandResponse& operator=(CommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandResponse& default_instance() {
    return *internal_default_instance();
  }
  enum ResultCase {
    kDatapoint = 3,
    RESULT_NOT_SET = 0,
  };

  static inline const CommandResponse* internal_default_instance() {
    return reinterpret_cast<const CommandResponse*>(
               &_CommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CommandResponse& a, CommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandResponse* New() const final {
    return new CommandResponse();
  }

  CommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandResponse& from);
  void MergeFrom(const CommandResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandResponse";
  }
  protected:
  explicit CommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kSuccessFieldNumber = 2,
    kDatapointFieldNumber = 3,
  };
  // string request_id = 1 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // bool success = 2 [json_name = "success"];
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .v1.model.Datapoint datapoint = 3 [json_name = "datapoint"];
  bool has_datapoint() const;
  private:
  bool _internal_has_datapoint() const;
  public:
  void clear_datapoint();
  const ::v1::model::Datapoint& datapoint() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Datapoint* release_datapoint();
  ::v1::model::Datapoint* mutable_datapoint();
  void set_allocated_datapoint(::v1::model::Datapoint* datapoint);
  private:
  const ::v1::model::Datapoint& _internal_datapoint() const;
  ::v1::model::Datapoint* _internal_mutable_datapoint();
  public:
  void unsafe_arena_set_allocated_datapoint(
      ::v1::model::Datapoint* datapoint);
  ::v1::model::Datapoint* unsafe_arena_release_datapoint();

  void clear_result();
  ResultCase result_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.CommandResponse)
 private:
  class _Internal;
  void set_has_datapoint();

  inline bool has_result() const;
  inline void clear_has_result();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  bool success_;
  union ResultUnion {
    constexpr ResultUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::v1::model::Datapoint* datapoint_;
  } result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class FileInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.FileInfo) */ {
 public:
  inline FileInfo() : FileInfo(nullptr) {}
  ~FileInfo() override;
  explicit constexpr FileInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FileInfo(const FileInfo& from);
  FileInfo(FileInfo&& from) noexcept
    : FileInfo() {
    *this = ::std::move(from);
  }

  inline FileInfo& operator=(const FileInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FileInfo& operator=(FileInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FileInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FileInfo* internal_default_instance() {
    return reinterpret_cast<const FileInfo*>(
               &_FileInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FileInfo& a, FileInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FileInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FileInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FileInfo* New() const final {
    return new FileInfo();
  }

  FileInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FileInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FileInfo& from);
  void MergeFrom(const FileInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.FileInfo";
  }
  protected:
  explicit FileInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kUrlFieldNumber = 3,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string url = 3 [json_name = "url"];
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // @@protoc_insertion_point(class_scope:v1.model.FileInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CommandsMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandsMetadata) */ {
 public:
  inline CommandsMetadata() : CommandsMetadata(nullptr) {}
  ~CommandsMetadata() override;
  explicit constexpr CommandsMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandsMetadata(const CommandsMetadata& from);
  CommandsMetadata(CommandsMetadata&& from) noexcept
    : CommandsMetadata() {
    *this = ::std::move(from);
  }

  inline CommandsMetadata& operator=(const CommandsMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandsMetadata& operator=(CommandsMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandsMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandsMetadata* internal_default_instance() {
    return reinterpret_cast<const CommandsMetadata*>(
               &_CommandsMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CommandsMetadata& a, CommandsMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandsMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandsMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandsMetadata* New() const final {
    return new CommandsMetadata();
  }

  CommandsMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandsMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandsMetadata& from);
  void MergeFrom(const CommandsMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandsMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandsMetadata";
  }
  protected:
  explicit CommandsMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandsFieldNumber = 1,
  };
  // repeated .v1.model.CommandMetadata commands = 1 [json_name = "commands"];
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  ::v1::model::CommandMetadata* mutable_commands(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::CommandMetadata >*
      mutable_commands();
  private:
  const ::v1::model::CommandMetadata& _internal_commands(int index) const;
  ::v1::model::CommandMetadata* _internal_add_commands();
  public:
  const ::v1::model::CommandMetadata& commands(int index) const;
  ::v1::model::CommandMetadata* add_commands();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::CommandMetadata >&
      commands() const;

  // @@protoc_insertion_point(class_scope:v1.model.CommandsMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::CommandMetadata > commands_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// -------------------------------------------------------------------

class CommandMetadata_ParameterMetaEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandMetadata_ParameterMetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandMetadata_ParameterMetaEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CommandMetadata_ParameterMetaEntry_DoNotUse();
  explicit constexpr CommandMetadata_ParameterMetaEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommandMetadata_ParameterMetaEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommandMetadata_ParameterMetaEntry_DoNotUse& other);
  static const CommandMetadata_ParameterMetaEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommandMetadata_ParameterMetaEntry_DoNotUse*>(&_CommandMetadata_ParameterMetaEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.CommandMetadata.ParameterMetaEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.CommandMetadata.ParameterMetaEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CommandMetadata_TagsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandMetadata_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommandMetadata_TagsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CommandMetadata_TagsEntry_DoNotUse();
  explicit constexpr CommandMetadata_TagsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommandMetadata_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommandMetadata_TagsEntry_DoNotUse& other);
  static const CommandMetadata_TagsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommandMetadata_TagsEntry_DoNotUse*>(&_CommandMetadata_TagsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.CommandMetadata.TagsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "v1.model.CommandMetadata.TagsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class CommandMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.CommandMetadata) */ {
 public:
  inline CommandMetadata() : CommandMetadata(nullptr) {}
  ~CommandMetadata() override;
  explicit constexpr CommandMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommandMetadata(const CommandMetadata& from);
  CommandMetadata(CommandMetadata&& from) noexcept
    : CommandMetadata() {
    *this = ::std::move(from);
  }

  inline CommandMetadata& operator=(const CommandMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommandMetadata& operator=(CommandMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommandMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommandMetadata* internal_default_instance() {
    return reinterpret_cast<const CommandMetadata*>(
               &_CommandMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CommandMetadata& a, CommandMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(CommandMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommandMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommandMetadata* New() const final {
    return new CommandMetadata();
  }

  CommandMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommandMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommandMetadata& from);
  void MergeFrom(const CommandMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommandMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.CommandMetadata";
  }
  protected:
  explicit CommandMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParameterMetaFieldNumber = 6,
    kTagsFieldNumber = 9,
    kNameFieldNumber = 1,
    kCommandFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kParameterValueFieldNumber = 5,
    kIdFieldNumber = 8,
    kParameterEnabledFieldNumber = 4,
    kEnabledFieldNumber = 7,
  };
  // map<string, string> parameter_meta = 6 [json_name = "parameterMeta"];
  int parameter_meta_size() const;
  private:
  int _internal_parameter_meta_size() const;
  public:
  void clear_parameter_meta();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_parameter_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_parameter_meta();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      parameter_meta() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_parameter_meta();

  // map<string, string> tags = 9 [json_name = "tags"];
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_tags();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      tags() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_tags();

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string command = 2 [json_name = "command"];
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // string description = 3 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string parameter_value = 5 [json_name = "parameterValue"];
  void clear_parameter_value();
  const std::string& parameter_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parameter_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parameter_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parameter_value();
  void set_allocated_parameter_value(std::string* parameter_value);
  private:
  const std::string& _internal_parameter_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parameter_value(const std::string& value);
  std::string* _internal_mutable_parameter_value();
  public:

  // string id = 8 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool parameter_enabled = 4 [json_name = "parameterEnabled"];
  void clear_parameter_enabled();
  bool parameter_enabled() const;
  void set_parameter_enabled(bool value);
  private:
  bool _internal_parameter_enabled() const;
  void _internal_set_parameter_enabled(bool value);
  public:

  // bool enabled = 7 [json_name = "enabled"];
  void clear_enabled();
  bool enabled() const;
  void set_enabled(bool value);
  private:
  bool _internal_enabled() const;
  void _internal_set_enabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.CommandMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommandMetadata_ParameterMetaEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> parameter_meta_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CommandMetadata_TagsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parameter_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool parameter_enabled_;
  bool enabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fcommands_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CommandRequest

// string id = 1 [json_name = "id"];
inline void CommandRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CommandRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.id)
}
inline std::string* CommandRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.id)
  return _internal_mutable_id();
}
inline const std::string& CommandRequest::_internal_id() const {
  return id_.Get();
}
inline void CommandRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.id)
}

// string command = 2 [json_name = "command"];
inline void CommandRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CommandRequest::command() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.command)
}
inline std::string* CommandRequest::mutable_command() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.command)
  return _internal_mutable_command();
}
inline const std::string& CommandRequest::_internal_command() const {
  return command_.Get();
}
inline void CommandRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandRequest::release_command() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.command)
}

// string text = 3 [json_name = "text"];
inline bool CommandRequest::_internal_has_text() const {
  return parameter_case() == kText;
}
inline bool CommandRequest::has_text() const {
  return _internal_has_text();
}
inline void CommandRequest::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void CommandRequest::clear_text() {
  if (_internal_has_text()) {
    parameter_.text_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_parameter();
  }
}
inline const std::string& CommandRequest::text() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline void CommandRequest::set_text(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandRequest.text)
}
inline std::string* CommandRequest::mutable_text() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.text)
  return _internal_mutable_text();
}
inline const std::string& CommandRequest::_internal_text() const {
  if (_internal_has_text()) {
    return parameter_.text_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CommandRequest::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  parameter_.text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandRequest::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_parameter();
    set_has_text();
    parameter_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return parameter_.text_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandRequest::release_text() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.text)
  if (_internal_has_text()) {
    clear_has_parameter();
    return parameter_.text_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void CommandRequest::set_allocated_text(std::string* text) {
  if (has_parameter()) {
    clear_parameter();
  }
  if (text != nullptr) {
    set_has_text();
    parameter_.text_.UnsafeSetDefault(text);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(text);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.text)
}

// .google.protobuf.Timestamp scrubber_time = 4 [json_name = "scrubberTime"];
inline bool CommandRequest::_internal_has_scrubber_time() const {
  return this != internal_default_instance() && scrubber_time_ != nullptr;
}
inline bool CommandRequest::has_scrubber_time() const {
  return _internal_has_scrubber_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommandRequest::_internal_scrubber_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = scrubber_time_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CommandRequest::scrubber_time() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.scrubber_time)
  return _internal_scrubber_time();
}
inline void CommandRequest::unsafe_arena_set_allocated_scrubber_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrubber_time_);
  }
  scrubber_time_ = scrubber_time;
  if (scrubber_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.CommandRequest.scrubber_time)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::release_scrubber_time() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = scrubber_time_;
  scrubber_time_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::unsafe_arena_release_scrubber_time() {
  // @@protoc_insertion_point(field_release:v1.model.CommandRequest.scrubber_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = scrubber_time_;
  scrubber_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::_internal_mutable_scrubber_time() {
  
  if (scrubber_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    scrubber_time_ = p;
  }
  return scrubber_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CommandRequest::mutable_scrubber_time() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.scrubber_time)
  return _internal_mutable_scrubber_time();
}
inline void CommandRequest::set_allocated_scrubber_time(PROTOBUF_NAMESPACE_ID::Timestamp* scrubber_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrubber_time_);
  }
  if (scrubber_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrubber_time));
    if (message_arena != submessage_arena) {
      scrubber_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scrubber_time, submessage_arena);
    }
    
  } else {
    
  }
  scrubber_time_ = scrubber_time;
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandRequest.scrubber_time)
}

// repeated .v1.model.FileInfo files = 5 [json_name = "files"];
inline int CommandRequest::_internal_files_size() const {
  return files_.size();
}
inline int CommandRequest::files_size() const {
  return _internal_files_size();
}
inline void CommandRequest::clear_files() {
  files_.Clear();
}
inline ::v1::model::FileInfo* CommandRequest::mutable_files(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandRequest.files)
  return files_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::FileInfo >*
CommandRequest::mutable_files() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.CommandRequest.files)
  return &files_;
}
inline const ::v1::model::FileInfo& CommandRequest::_internal_files(int index) const {
  return files_.Get(index);
}
inline const ::v1::model::FileInfo& CommandRequest::files(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.CommandRequest.files)
  return _internal_files(index);
}
inline ::v1::model::FileInfo* CommandRequest::_internal_add_files() {
  return files_.Add();
}
inline ::v1::model::FileInfo* CommandRequest::add_files() {
  // @@protoc_insertion_point(field_add:v1.model.CommandRequest.files)
  return _internal_add_files();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::FileInfo >&
CommandRequest::files() const {
  // @@protoc_insertion_point(field_list:v1.model.CommandRequest.files)
  return files_;
}

inline bool CommandRequest::has_parameter() const {
  return parameter_case() != PARAMETER_NOT_SET;
}
inline void CommandRequest::clear_has_parameter() {
  _oneof_case_[0] = PARAMETER_NOT_SET;
}
inline CommandRequest::ParameterCase CommandRequest::parameter_case() const {
  return CommandRequest::ParameterCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CommandResponse

// string request_id = 1 [json_name = "requestId"];
inline void CommandResponse::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& CommandResponse::request_id() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandResponse::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandResponse.request_id)
}
inline std::string* CommandResponse::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandResponse.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& CommandResponse::_internal_request_id() const {
  return request_id_.Get();
}
inline void CommandResponse::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandResponse::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandResponse::release_request_id() {
  // @@protoc_insertion_point(field_release:v1.model.CommandResponse.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandResponse::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandResponse.request_id)
}

// bool success = 2 [json_name = "success"];
inline void CommandResponse::clear_success() {
  success_ = false;
}
inline bool CommandResponse::_internal_success() const {
  return success_;
}
inline bool CommandResponse::success() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.success)
  return _internal_success();
}
inline void CommandResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void CommandResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandResponse.success)
}

// .v1.model.Datapoint datapoint = 3 [json_name = "datapoint"];
inline bool CommandResponse::_internal_has_datapoint() const {
  return result_case() == kDatapoint;
}
inline bool CommandResponse::has_datapoint() const {
  return _internal_has_datapoint();
}
inline void CommandResponse::set_has_datapoint() {
  _oneof_case_[0] = kDatapoint;
}
inline ::v1::model::Datapoint* CommandResponse::release_datapoint() {
  // @@protoc_insertion_point(field_release:v1.model.CommandResponse.datapoint)
  if (_internal_has_datapoint()) {
    clear_has_result();
      ::v1::model::Datapoint* temp = result_.datapoint_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    result_.datapoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::v1::model::Datapoint& CommandResponse::_internal_datapoint() const {
  return _internal_has_datapoint()
      ? *result_.datapoint_
      : reinterpret_cast< ::v1::model::Datapoint&>(::v1::model::_Datapoint_default_instance_);
}
inline const ::v1::model::Datapoint& CommandResponse::datapoint() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandResponse.datapoint)
  return _internal_datapoint();
}
inline ::v1::model::Datapoint* CommandResponse::unsafe_arena_release_datapoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:v1.model.CommandResponse.datapoint)
  if (_internal_has_datapoint()) {
    clear_has_result();
    ::v1::model::Datapoint* temp = result_.datapoint_;
    result_.datapoint_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CommandResponse::unsafe_arena_set_allocated_datapoint(::v1::model::Datapoint* datapoint) {
  clear_result();
  if (datapoint) {
    set_has_datapoint();
    result_.datapoint_ = datapoint;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.CommandResponse.datapoint)
}
inline ::v1::model::Datapoint* CommandResponse::_internal_mutable_datapoint() {
  if (!_internal_has_datapoint()) {
    clear_result();
    set_has_datapoint();
    result_.datapoint_ = CreateMaybeMessage< ::v1::model::Datapoint >(GetArenaForAllocation());
  }
  return result_.datapoint_;
}
inline ::v1::model::Datapoint* CommandResponse::mutable_datapoint() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandResponse.datapoint)
  return _internal_mutable_datapoint();
}

inline bool CommandResponse::has_result() const {
  return result_case() != RESULT_NOT_SET;
}
inline void CommandResponse::clear_has_result() {
  _oneof_case_[0] = RESULT_NOT_SET;
}
inline CommandResponse::ResultCase CommandResponse::result_case() const {
  return CommandResponse::ResultCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FileInfo

// string id = 1 [json_name = "id"];
inline void FileInfo::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& FileInfo::id() const {
  // @@protoc_insertion_point(field_get:v1.model.FileInfo.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.FileInfo.id)
}
inline std::string* FileInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileInfo.id)
  return _internal_mutable_id();
}
inline const std::string& FileInfo::_internal_id() const {
  return id_.Get();
}
inline void FileInfo::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.FileInfo.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileInfo.id)
}

// string name = 2 [json_name = "name"];
inline void FileInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FileInfo::name() const {
  // @@protoc_insertion_point(field_get:v1.model.FileInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.FileInfo.name)
}
inline std::string* FileInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileInfo.name)
  return _internal_mutable_name();
}
inline const std::string& FileInfo::_internal_name() const {
  return name_.Get();
}
inline void FileInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.FileInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileInfo.name)
}

// string url = 3 [json_name = "url"];
inline void FileInfo::clear_url() {
  url_.ClearToEmpty();
}
inline const std::string& FileInfo::url() const {
  // @@protoc_insertion_point(field_get:v1.model.FileInfo.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FileInfo::set_url(ArgT0&& arg0, ArgT... args) {
 
 url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.FileInfo.url)
}
inline std::string* FileInfo::mutable_url() {
  // @@protoc_insertion_point(field_mutable:v1.model.FileInfo.url)
  return _internal_mutable_url();
}
inline const std::string& FileInfo::_internal_url() const {
  return url_.Get();
}
inline void FileInfo::_internal_set_url(const std::string& value) {
  
  url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FileInfo::_internal_mutable_url() {
  
  return url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FileInfo::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.FileInfo.url)
  return url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FileInfo::set_allocated_url(std::string* url) {
  if (url != nullptr) {
    
  } else {
    
  }
  url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.FileInfo.url)
}

// -------------------------------------------------------------------

// CommandsMetadata

// repeated .v1.model.CommandMetadata commands = 1 [json_name = "commands"];
inline int CommandsMetadata::_internal_commands_size() const {
  return commands_.size();
}
inline int CommandsMetadata::commands_size() const {
  return _internal_commands_size();
}
inline void CommandsMetadata::clear_commands() {
  commands_.Clear();
}
inline ::v1::model::CommandMetadata* CommandsMetadata::mutable_commands(int index) {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandsMetadata.commands)
  return commands_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::CommandMetadata >*
CommandsMetadata::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_list:v1.model.CommandsMetadata.commands)
  return &commands_;
}
inline const ::v1::model::CommandMetadata& CommandsMetadata::_internal_commands(int index) const {
  return commands_.Get(index);
}
inline const ::v1::model::CommandMetadata& CommandsMetadata::commands(int index) const {
  // @@protoc_insertion_point(field_get:v1.model.CommandsMetadata.commands)
  return _internal_commands(index);
}
inline ::v1::model::CommandMetadata* CommandsMetadata::_internal_add_commands() {
  return commands_.Add();
}
inline ::v1::model::CommandMetadata* CommandsMetadata::add_commands() {
  // @@protoc_insertion_point(field_add:v1.model.CommandsMetadata.commands)
  return _internal_add_commands();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::CommandMetadata >&
CommandsMetadata::commands() const {
  // @@protoc_insertion_point(field_list:v1.model.CommandsMetadata.commands)
  return commands_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommandMetadata

// string name = 1 [json_name = "name"];
inline void CommandMetadata::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CommandMetadata::name() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMetadata::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.name)
}
inline std::string* CommandMetadata::mutable_name() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandMetadata.name)
  return _internal_mutable_name();
}
inline const std::string& CommandMetadata::_internal_name() const {
  return name_.Get();
}
inline void CommandMetadata::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandMetadata::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandMetadata::release_name() {
  // @@protoc_insertion_point(field_release:v1.model.CommandMetadata.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandMetadata::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandMetadata.name)
}

// string command = 2 [json_name = "command"];
inline void CommandMetadata::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& CommandMetadata::command() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMetadata::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.command)
}
inline std::string* CommandMetadata::mutable_command() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandMetadata.command)
  return _internal_mutable_command();
}
inline const std::string& CommandMetadata::_internal_command() const {
  return command_.Get();
}
inline void CommandMetadata::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandMetadata::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandMetadata::release_command() {
  // @@protoc_insertion_point(field_release:v1.model.CommandMetadata.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandMetadata::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandMetadata.command)
}

// string description = 3 [json_name = "description"];
inline void CommandMetadata::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CommandMetadata::description() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMetadata::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.description)
}
inline std::string* CommandMetadata::mutable_description() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandMetadata.description)
  return _internal_mutable_description();
}
inline const std::string& CommandMetadata::_internal_description() const {
  return description_.Get();
}
inline void CommandMetadata::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandMetadata::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandMetadata::release_description() {
  // @@protoc_insertion_point(field_release:v1.model.CommandMetadata.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandMetadata::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandMetadata.description)
}

// bool parameter_enabled = 4 [json_name = "parameterEnabled"];
inline void CommandMetadata::clear_parameter_enabled() {
  parameter_enabled_ = false;
}
inline bool CommandMetadata::_internal_parameter_enabled() const {
  return parameter_enabled_;
}
inline bool CommandMetadata::parameter_enabled() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.parameter_enabled)
  return _internal_parameter_enabled();
}
inline void CommandMetadata::_internal_set_parameter_enabled(bool value) {
  
  parameter_enabled_ = value;
}
inline void CommandMetadata::set_parameter_enabled(bool value) {
  _internal_set_parameter_enabled(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.parameter_enabled)
}

// string parameter_value = 5 [json_name = "parameterValue"];
inline void CommandMetadata::clear_parameter_value() {
  parameter_value_.ClearToEmpty();
}
inline const std::string& CommandMetadata::parameter_value() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.parameter_value)
  return _internal_parameter_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMetadata::set_parameter_value(ArgT0&& arg0, ArgT... args) {
 
 parameter_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.parameter_value)
}
inline std::string* CommandMetadata::mutable_parameter_value() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandMetadata.parameter_value)
  return _internal_mutable_parameter_value();
}
inline const std::string& CommandMetadata::_internal_parameter_value() const {
  return parameter_value_.Get();
}
inline void CommandMetadata::_internal_set_parameter_value(const std::string& value) {
  
  parameter_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandMetadata::_internal_mutable_parameter_value() {
  
  return parameter_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandMetadata::release_parameter_value() {
  // @@protoc_insertion_point(field_release:v1.model.CommandMetadata.parameter_value)
  return parameter_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandMetadata::set_allocated_parameter_value(std::string* parameter_value) {
  if (parameter_value != nullptr) {
    
  } else {
    
  }
  parameter_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parameter_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandMetadata.parameter_value)
}

// map<string, string> parameter_meta = 6 [json_name = "parameterMeta"];
inline int CommandMetadata::_internal_parameter_meta_size() const {
  return parameter_meta_.size();
}
inline int CommandMetadata::parameter_meta_size() const {
  return _internal_parameter_meta_size();
}
inline void CommandMetadata::clear_parameter_meta() {
  parameter_meta_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandMetadata::_internal_parameter_meta() const {
  return parameter_meta_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandMetadata::parameter_meta() const {
  // @@protoc_insertion_point(field_map:v1.model.CommandMetadata.parameter_meta)
  return _internal_parameter_meta();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandMetadata::_internal_mutable_parameter_meta() {
  return parameter_meta_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandMetadata::mutable_parameter_meta() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.CommandMetadata.parameter_meta)
  return _internal_mutable_parameter_meta();
}

// bool enabled = 7 [json_name = "enabled"];
inline void CommandMetadata::clear_enabled() {
  enabled_ = false;
}
inline bool CommandMetadata::_internal_enabled() const {
  return enabled_;
}
inline bool CommandMetadata::enabled() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.enabled)
  return _internal_enabled();
}
inline void CommandMetadata::_internal_set_enabled(bool value) {
  
  enabled_ = value;
}
inline void CommandMetadata::set_enabled(bool value) {
  _internal_set_enabled(value);
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.enabled)
}

// string id = 8 [json_name = "id"];
inline void CommandMetadata::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& CommandMetadata::id() const {
  // @@protoc_insertion_point(field_get:v1.model.CommandMetadata.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommandMetadata::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.CommandMetadata.id)
}
inline std::string* CommandMetadata::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.CommandMetadata.id)
  return _internal_mutable_id();
}
inline const std::string& CommandMetadata::_internal_id() const {
  return id_.Get();
}
inline void CommandMetadata::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommandMetadata::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommandMetadata::release_id() {
  // @@protoc_insertion_point(field_release:v1.model.CommandMetadata.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommandMetadata::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.CommandMetadata.id)
}

// map<string, string> tags = 9 [json_name = "tags"];
inline int CommandMetadata::_internal_tags_size() const {
  return tags_.size();
}
inline int CommandMetadata::tags_size() const {
  return _internal_tags_size();
}
inline void CommandMetadata::clear_tags() {
  tags_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandMetadata::_internal_tags() const {
  return tags_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CommandMetadata::tags() const {
  // @@protoc_insertion_point(field_map:v1.model.CommandMetadata.tags)
  return _internal_tags();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandMetadata::_internal_mutable_tags() {
  return tags_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CommandMetadata::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_map:v1.model.CommandMetadata.tags)
  return _internal_mutable_tags();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fcommands_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/intervention.proto

#include "protos/model/v1/intervention.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v1 {
namespace model {
PROTOBUF_CONSTEXPR InterventionRequest_TagsEntry_DoNotUse::InterventionRequest_TagsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    InterventionRequest_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterventionRequest_TagsEntry_DoNotUseDefaultTypeInternal _InterventionRequest_TagsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR InterventionRequest::InterventionRequest(
    ::_pbi::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , responses_()
  , id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(int64_t{0})
  , severity_(0)

  , _oneof_case_{}{}
struct InterventionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterventionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterventionRequestDefaultTypeInternal() {}
  union {
    InterventionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterventionRequestDefaultTypeInternal _InterventionRequest_default_instance_;
PROTOBUF_CONSTEXPR InterventionResponse::InterventionResponse(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , request_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , timestamp_(int64_t{0})
  , _oneof_case_{}{}
struct InterventionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterventionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterventionResponseDefaultTypeInternal() {}
  union {
    InterventionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterventionResponseDefaultTypeInternal _InterventionResponse_default_instance_;
PROTOBUF_CONSTEXPR Label::Label(
    ::_pbi::ConstantInitialized)
  : value_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , display_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct LabelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelDefaultTypeInternal() {}
  union {
    Label _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelDefaultTypeInternal _Label_default_instance_;
PROTOBUF_CONSTEXPR LabeledPolygon::LabeledPolygon(
    ::_pbi::ConstantInitialized)
  : vertices_()
  , labels_(){}
struct LabeledPolygonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabeledPolygonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabeledPolygonDefaultTypeInternal() {}
  union {
    LabeledPolygon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabeledPolygonDefaultTypeInternal _LabeledPolygon_default_instance_;
PROTOBUF_CONSTEXPR Vertex::Vertex(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct VertexDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VertexDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VertexDefaultTypeInternal() {}
  union {
    Vertex _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VertexDefaultTypeInternal _Vertex_default_instance_;
PROTOBUF_CONSTEXPR LabelingRequest::LabelingRequest(
    ::_pbi::ConstantInitialized)
  : labels_()
  , hint_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instruction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(nullptr){}
struct LabelingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelingRequestDefaultTypeInternal() {}
  union {
    LabelingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelingRequestDefaultTypeInternal _LabelingRequest_default_instance_;
PROTOBUF_CONSTEXPR LabelingResponse::LabelingResponse(
    ::_pbi::ConstantInitialized)
  : value_(){}
struct LabelingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LabelingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LabelingResponseDefaultTypeInternal() {}
  union {
    LabelingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LabelingResponseDefaultTypeInternal _LabelingResponse_default_instance_;
PROTOBUF_CONSTEXPR SelectionRequest::SelectionRequest(
    ::_pbi::ConstantInitialized)
  : options_()
  , title_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , instruction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , hint_(0u)
  , _oneof_case_{}{}
struct SelectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionRequestDefaultTypeInternal() {}
  union {
    SelectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionRequestDefaultTypeInternal _SelectionRequest_default_instance_;
PROTOBUF_CONSTEXPR SelectionResponse::SelectionResponse(
    ::_pbi::ConstantInitialized)
  : value_(0u){}
struct SelectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectionResponseDefaultTypeInternal() {}
  union {
    SelectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectionResponseDefaultTypeInternal _SelectionResponse_default_instance_;
PROTOBUF_CONSTEXPR TeleopRequest::TeleopRequest(
    ::_pbi::ConstantInitialized)
  : instruction_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TeleopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopRequestDefaultTypeInternal() {}
  union {
    TeleopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopRequestDefaultTypeInternal _TeleopRequest_default_instance_;
PROTOBUF_CONSTEXPR TeleopResponse::TeleopResponse(
    ::_pbi::ConstantInitialized)
  : state_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , notes_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct TeleopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TeleopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TeleopResponseDefaultTypeInternal() {}
  union {
    TeleopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TeleopResponseDefaultTypeInternal _TeleopResponse_default_instance_;
}  // namespace model
}  // namespace v1
static ::_pb::Metadata file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, timestamp_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, severity_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, tags_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, responses_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, request_id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, timestamp_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::InterventionResponse, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, value_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Label, display_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, vertices_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabeledPolygon, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, x_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Vertex, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, title_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, instruction_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, image_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, labels_),
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingRequest, hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::LabelingResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, title_),
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, instruction_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, options_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, hint_),
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionRequest, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::SelectionResponse, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopRequest, instruction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopResponse, state_),
  PROTOBUF_FIELD_OFFSET(::v1::model::TeleopResponse, notes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::v1::model::InterventionRequest_TagsEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::v1::model::InterventionRequest)},
  { 25, -1, -1, sizeof(::v1::model::InterventionResponse)},
  { 38, -1, -1, sizeof(::v1::model::Label)},
  { 46, -1, -1, sizeof(::v1::model::LabeledPolygon)},
  { 54, -1, -1, sizeof(::v1::model::Vertex)},
  { 62, -1, -1, sizeof(::v1::model::LabelingRequest)},
  { 73, -1, -1, sizeof(::v1::model::LabelingResponse)},
  { 80, -1, -1, sizeof(::v1::model::SelectionRequest)},
  { 92, -1, -1, sizeof(::v1::model::SelectionResponse)},
  { 99, -1, -1, sizeof(::v1::model::TeleopRequest)},
  { 106, -1, -1, sizeof(::v1::model::TeleopResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v1::model::_InterventionRequest_TagsEntry_DoNotUse_default_instance_._instance,
  &::v1::model::_InterventionRequest_default_instance_._instance,
  &::v1::model::_InterventionResponse_default_instance_._instance,
  &::v1::model::_Label_default_instance_._instance,
  &::v1::model::_LabeledPolygon_default_instance_._instance,
  &::v1::model::_Vertex_default_instance_._instance,
  &::v1::model::_LabelingRequest_default_instance_._instance,
  &::v1::model::_LabelingResponse_default_instance_._instance,
  &::v1::model::_SelectionRequest_default_instance_._instance,
  &::v1::model::_SelectionResponse_default_instance_._instance,
  &::v1::model::_TeleopRequest_default_instance_._instance,
  &::v1::model::_TeleopResponse_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fintervention_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"protos/model/v1/intervention.proto\022\010v1"
  ".model\032\033protos/model/v1/media.proto\032\033pro"
  "tos/model/v1/event.proto\"\204\004\n\023Interventio"
  "nRequest\022\016\n\002id\030\001 \001(\tR\002id\022\034\n\ttimestamp\030\002 "
  "\001(\003R\ttimestamp\022.\n\010severity\030\003 \001(\0162\022.v1.mo"
  "del.SeverityR\010severity\022I\n\021selection_requ"
  "est\030\004 \001(\0132\032.v1.model.SelectionRequestH\000R"
  "\020selectionRequest\022F\n\020labeling_request\030\005 "
  "\001(\0132\031.v1.model.LabelingRequestH\000R\017labeli"
  "ngRequest\022@\n\016teleop_request\030\010 \001(\0132\027.v1.m"
  "odel.TeleopRequestH\000R\rteleopRequest\022;\n\004t"
  "ags\030\006 \003(\0132\'.v1.model.InterventionRequest"
  ".TagsEntryR\004tags\022<\n\tresponses\030\007 \003(\0132\036.v1"
  ".model.InterventionResponseR\tresponses\0327"
  "\n\tTagsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002"
  " \001(\tR\005value:\0028\001B\006\n\004data\"\311\002\n\024Intervention"
  "Response\022\016\n\002id\030\001 \001(\tR\002id\022\035\n\nrequest_id\030\002"
  " \001(\tR\trequestId\022\034\n\ttimestamp\030\003 \001(\003R\ttime"
  "stamp\022L\n\022selection_response\030\004 \001(\0132\033.v1.m"
  "odel.SelectionResponseH\000R\021selectionRespo"
  "nse\022I\n\021labeling_response\030\005 \001(\0132\032.v1.mode"
  "l.LabelingResponseH\000R\020labelingResponse\022C"
  "\n\017teleop_response\030\006 \001(\0132\030.v1.model.Teleo"
  "pResponseH\000R\016teleopResponseB\006\n\004data\"@\n\005L"
  "abel\022\024\n\005value\030\001 \001(\tR\005value\022!\n\014display_na"
  "me\030\002 \001(\tR\013displayName\"V\n\016LabeledPolygon\022"
  ",\n\010vertices\030\001 \003(\0132\020.v1.model.VertexR\010ver"
  "tices\022\026\n\006labels\030\002 \003(\tR\006labels\"$\n\006Vertex\022"
  "\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\"\307\001\n\017Labeling"
  "Request\022\024\n\005title\030\001 \001(\tR\005title\022 \n\013instruc"
  "tion\030\002 \001(\tR\013instruction\022%\n\005image\030\003 \001(\0132\017"
  ".v1.model.ImageR\005image\022\'\n\006labels\030\004 \003(\0132\017"
  ".v1.model.LabelR\006labels\022,\n\004hint\030\005 \003(\0132\030."
  "v1.model.LabeledPolygonR\004hint\"B\n\020Labelin"
  "gResponse\022.\n\005value\030\001 \003(\0132\030.v1.model.Labe"
  "ledPolygonR\005value\"\251\001\n\020SelectionRequest\022\024"
  "\n\005title\030\001 \001(\tR\005title\022\'\n\005image\030\002 \001(\0132\017.v1"
  ".model.ImageH\000R\005image\022 \n\013instruction\030\003 \001"
  "(\tR\013instruction\022\030\n\007options\030\004 \003(\tR\007option"
  "s\022\022\n\004hint\030\005 \001(\rR\004hintB\006\n\004data\")\n\021Selecti"
  "onResponse\022\024\n\005value\030\001 \001(\rR\005value\"1\n\rTele"
  "opRequest\022 \n\013instruction\030\001 \001(\tR\013instruct"
  "ion\"<\n\016TeleopResponse\022\024\n\005state\030\001 \001(\tR\005st"
  "ate\022\024\n\005notes\030\002 \001(\tR\005notesB+Z)github.com/"
  "FormantIO/genproto/go/v1/modelb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_deps[2] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fevent_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto = {
    false, false, 1798, descriptor_table_protodef_protos_2fmodel_2fv1_2fintervention_2eproto,
    "protos/model/v1/intervention.proto",
    &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_deps, 2, 12,
    schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fintervention_2eproto::offsets,
    file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto,
    file_level_service_descriptors_protos_2fmodel_2fv1_2fintervention_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fintervention_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto);
namespace v1 {
namespace model {

// ===================================================================

InterventionRequest_TagsEntry_DoNotUse::InterventionRequest_TagsEntry_DoNotUse() {}
InterventionRequest_TagsEntry_DoNotUse::InterventionRequest_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void InterventionRequest_TagsEntry_DoNotUse::MergeFrom(const InterventionRequest_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata InterventionRequest_TagsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[0]);
}

// ===================================================================

class InterventionRequest::_Internal {
 public:
  static const ::v1::model::SelectionRequest& selection_request(const InterventionRequest* msg);
  static const ::v1::model::LabelingRequest& labeling_request(const InterventionRequest* msg);
  static const ::v1::model::TeleopRequest& teleop_request(const InterventionRequest* msg);
};

const ::v1::model::SelectionRequest&
InterventionRequest::_Internal::selection_request(const InterventionRequest* msg) {
  return *msg->data_.selection_request_;
}
const ::v1::model::LabelingRequest&
InterventionRequest::_Internal::labeling_request(const InterventionRequest* msg) {
  return *msg->data_.labeling_request_;
}
const ::v1::model::TeleopRequest&
InterventionRequest::_Internal::teleop_request(const InterventionRequest* msg) {
  return *msg->data_.teleop_request_;
}
void InterventionRequest::set_allocated_selection_request(::v1::model::SelectionRequest* selection_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (selection_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(selection_request);
    if (message_arena != submessage_arena) {
      selection_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_request, submessage_arena);
    }
    set_has_selection_request();
    data_.selection_request_ = selection_request;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.selection_request)
}
void InterventionRequest::set_allocated_labeling_request(::v1::model::LabelingRequest* labeling_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (labeling_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(labeling_request);
    if (message_arena != submessage_arena) {
      labeling_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeling_request, submessage_arena);
    }
    set_has_labeling_request();
    data_.labeling_request_ = labeling_request;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.labeling_request)
}
void InterventionRequest::set_allocated_teleop_request(::v1::model::TeleopRequest* teleop_request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (teleop_request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teleop_request);
    if (message_arena != submessage_arena) {
      teleop_request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleop_request, submessage_arena);
    }
    set_has_teleop_request();
    data_.teleop_request_ = teleop_request;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionRequest.teleop_request)
}
InterventionRequest::InterventionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  tags_(arena),
  responses_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &InterventionRequest::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:v1.model.InterventionRequest)
}
InterventionRequest::InterventionRequest(const InterventionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      responses_(from.responses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_has_data();
  switch (from.data_case()) {
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::v1::model::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kLabelingRequest: {
      _internal_mutable_labeling_request()->::v1::model::LabelingRequest::MergeFrom(from._internal_labeling_request());
      break;
    }
    case kTeleopRequest: {
      _internal_mutable_teleop_request()->::v1::model::TeleopRequest::MergeFrom(from._internal_teleop_request());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.InterventionRequest)
}

inline void InterventionRequest::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timestamp_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&severity_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
clear_has_data();
}

InterventionRequest::~InterventionRequest() {
  // @@protoc_insertion_point(destructor:v1.model.InterventionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void InterventionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tags_.Destruct();
  id_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void InterventionRequest::ArenaDtor(void* object) {
  InterventionRequest* _this = reinterpret_cast< InterventionRequest* >(object);
  _this->tags_.Destruct();
}
void InterventionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterventionRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.InterventionRequest)
  switch (data_case()) {
    case kSelectionRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.selection_request_;
      }
      break;
    }
    case kLabelingRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.labeling_request_;
      }
      break;
    }
    case kTeleopRequest: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.teleop_request_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void InterventionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.InterventionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  responses_.Clear();
  id_.ClearToEmpty();
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&severity_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(severity_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterventionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.InterventionRequest.id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Severity severity = 3 [json_name = "severity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::v1::model::Severity>(val));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.SelectionRequest selection_request = 4 [json_name = "selectionRequest"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.LabelingRequest labeling_request = 5 [json_name = "labelingRequest"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_labeling_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> tags = 6 [json_name = "tags"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.InterventionResponse responses = 7 [json_name = "responses"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_responses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopRequest teleop_request = 8 [json_name = "teleopRequest"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleop_request(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterventionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.InterventionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionRequest.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .v1.model.Severity severity = 3 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_severity(), target);
  }

  // .v1.model.SelectionRequest selection_request = 4 [json_name = "selectionRequest"];
  if (_internal_has_selection_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::selection_request(this),
        _Internal::selection_request(this).GetCachedSize(), target, stream);
  }

  // .v1.model.LabelingRequest labeling_request = 5 [json_name = "labelingRequest"];
  if (_internal_has_labeling_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::labeling_request(this),
        _Internal::labeling_request(this).GetCachedSize(), target, stream);
  }

  // map<string, string> tags = 6 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = InterventionRequest_TagsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tags();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.InterventionRequest.TagsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "v1.model.InterventionRequest.TagsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .v1.model.InterventionResponse responses = 7 [json_name = "responses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_responses_size()); i < n; i++) {
    const auto& repfield = this->_internal_responses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .v1.model.TeleopRequest teleop_request = 8 [json_name = "teleopRequest"];
  if (_internal_has_teleop_request()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::teleop_request(this),
        _Internal::teleop_request(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.InterventionRequest)
  return target;
}

size_t InterventionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.InterventionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 6 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += InterventionRequest_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .v1.model.InterventionResponse responses = 7 [json_name = "responses"];
  total_size += 1UL * this->_internal_responses_size();
  for (const auto& msg : this->responses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // .v1.model.Severity severity = 3 [json_name = "severity"];
  if (this->_internal_severity() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_severity());
  }

  switch (data_case()) {
    // .v1.model.SelectionRequest selection_request = 4 [json_name = "selectionRequest"];
    case kSelectionRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.selection_request_);
      break;
    }
    // .v1.model.LabelingRequest labeling_request = 5 [json_name = "labelingRequest"];
    case kLabelingRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.labeling_request_);
      break;
    }
    // .v1.model.TeleopRequest teleop_request = 8 [json_name = "teleopRequest"];
    case kTeleopRequest: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.teleop_request_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterventionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterventionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterventionRequest::GetClassData() const { return &_class_data_; }

void InterventionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterventionRequest *>(to)->MergeFrom(
      static_cast<const InterventionRequest &>(from));
}


void InterventionRequest::MergeFrom(const InterventionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.InterventionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  responses_.MergeFrom(from.responses_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  switch (from.data_case()) {
    case kSelectionRequest: {
      _internal_mutable_selection_request()->::v1::model::SelectionRequest::MergeFrom(from._internal_selection_request());
      break;
    }
    case kLabelingRequest: {
      _internal_mutable_labeling_request()->::v1::model::LabelingRequest::MergeFrom(from._internal_labeling_request());
      break;
    }
    case kTeleopRequest: {
      _internal_mutable_teleop_request()->::v1::model::TeleopRequest::MergeFrom(from._internal_teleop_request());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterventionRequest::CopyFrom(const InterventionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.InterventionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterventionRequest::IsInitialized() const {
  return true;
}

void InterventionRequest::InternalSwap(InterventionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  responses_.InternalSwap(&other->responses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterventionRequest, severity_)
      + sizeof(InterventionRequest::severity_)
      - PROTOBUF_FIELD_OFFSET(InterventionRequest, timestamp_)>(
          reinterpret_cast<char*>(&timestamp_),
          reinterpret_cast<char*>(&other->timestamp_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterventionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[1]);
}

// ===================================================================

class InterventionResponse::_Internal {
 public:
  static const ::v1::model::SelectionResponse& selection_response(const InterventionResponse* msg);
  static const ::v1::model::LabelingResponse& labeling_response(const InterventionResponse* msg);
  static const ::v1::model::TeleopResponse& teleop_response(const InterventionResponse* msg);
};

const ::v1::model::SelectionResponse&
InterventionResponse::_Internal::selection_response(const InterventionResponse* msg) {
  return *msg->data_.selection_response_;
}
const ::v1::model::LabelingResponse&
InterventionResponse::_Internal::labeling_response(const InterventionResponse* msg) {
  return *msg->data_.labeling_response_;
}
const ::v1::model::TeleopResponse&
InterventionResponse::_Internal::teleop_response(const InterventionResponse* msg) {
  return *msg->data_.teleop_response_;
}
void InterventionResponse::set_allocated_selection_response(::v1::model::SelectionResponse* selection_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (selection_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(selection_response);
    if (message_arena != submessage_arena) {
      selection_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selection_response, submessage_arena);
    }
    set_has_selection_response();
    data_.selection_response_ = selection_response;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.selection_response)
}
void InterventionResponse::set_allocated_labeling_response(::v1::model::LabelingResponse* labeling_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (labeling_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(labeling_response);
    if (message_arena != submessage_arena) {
      labeling_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, labeling_response, submessage_arena);
    }
    set_has_labeling_response();
    data_.labeling_response_ = labeling_response;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.labeling_response)
}
void InterventionResponse::set_allocated_teleop_response(::v1::model::TeleopResponse* teleop_response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (teleop_response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(teleop_response);
    if (message_arena != submessage_arena) {
      teleop_response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, teleop_response, submessage_arena);
    }
    set_has_teleop_response();
    data_.teleop_response_ = teleop_response;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.InterventionResponse.teleop_response)
}
InterventionResponse::InterventionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.InterventionResponse)
}
InterventionResponse::InterventionResponse(const InterventionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  request_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    request_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_request_id().empty()) {
    request_id_.Set(from._internal_request_id(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::v1::model::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kLabelingResponse: {
      _internal_mutable_labeling_response()->::v1::model::LabelingResponse::MergeFrom(from._internal_labeling_response());
      break;
    }
    case kTeleopResponse: {
      _internal_mutable_teleop_response()->::v1::model::TeleopResponse::MergeFrom(from._internal_teleop_response());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.InterventionResponse)
}

inline void InterventionResponse::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
request_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  request_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
timestamp_ = int64_t{0};
clear_has_data();
}

InterventionResponse::~InterventionResponse() {
  // @@protoc_insertion_point(destructor:v1.model.InterventionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterventionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
  request_id_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void InterventionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InterventionResponse::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.InterventionResponse)
  switch (data_case()) {
    case kSelectionResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.selection_response_;
      }
      break;
    }
    case kLabelingResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.labeling_response_;
      }
      break;
    }
    case kTeleopResponse: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.teleop_response_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void InterventionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.InterventionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  request_id_.ClearToEmpty();
  timestamp_ = int64_t{0};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterventionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.InterventionResponse.id"));
        } else
          goto handle_unusual;
        continue;
      // string request_id = 2 [json_name = "requestId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_request_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.InterventionResponse.request_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 3 [json_name = "timestamp"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.SelectionResponse selection_response = 4 [json_name = "selectionResponse"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_selection_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.LabelingResponse labeling_response = 5 [json_name = "labelingResponse"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_labeling_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.TeleopResponse teleop_response = 6 [json_name = "teleopResponse"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_teleop_response(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterventionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.InterventionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionResponse.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string request_id = 2 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_id().data(), static_cast<int>(this->_internal_request_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.InterventionResponse.request_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_id(), target);
  }

  // int64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp(), target);
  }

  // .v1.model.SelectionResponse selection_response = 4 [json_name = "selectionResponse"];
  if (_internal_has_selection_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::selection_response(this),
        _Internal::selection_response(this).GetCachedSize(), target, stream);
  }

  // .v1.model.LabelingResponse labeling_response = 5 [json_name = "labelingResponse"];
  if (_internal_has_labeling_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::labeling_response(this),
        _Internal::labeling_response(this).GetCachedSize(), target, stream);
  }

  // .v1.model.TeleopResponse teleop_response = 6 [json_name = "teleopResponse"];
  if (_internal_has_teleop_response()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::teleop_response(this),
        _Internal::teleop_response(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.InterventionResponse)
  return target;
}

size_t InterventionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.InterventionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string request_id = 2 [json_name = "requestId"];
  if (!this->_internal_request_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_id());
  }

  // int64 timestamp = 3 [json_name = "timestamp"];
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.SelectionResponse selection_response = 4 [json_name = "selectionResponse"];
    case kSelectionResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.selection_response_);
      break;
    }
    // .v1.model.LabelingResponse labeling_response = 5 [json_name = "labelingResponse"];
    case kLabelingResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.labeling_response_);
      break;
    }
    // .v1.model.TeleopResponse teleop_response = 6 [json_name = "teleopResponse"];
    case kTeleopResponse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.teleop_response_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterventionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InterventionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterventionResponse::GetClassData() const { return &_class_data_; }

void InterventionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InterventionResponse *>(to)->MergeFrom(
      static_cast<const InterventionResponse &>(from));
}


void InterventionResponse::MergeFrom(const InterventionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.InterventionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_request_id().empty()) {
    _internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kSelectionResponse: {
      _internal_mutable_selection_response()->::v1::model::SelectionResponse::MergeFrom(from._internal_selection_response());
      break;
    }
    case kLabelingResponse: {
      _internal_mutable_labeling_response()->::v1::model::LabelingResponse::MergeFrom(from._internal_labeling_response());
      break;
    }
    case kTeleopResponse: {
      _internal_mutable_teleop_response()->::v1::model::TeleopResponse::MergeFrom(from._internal_teleop_response());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterventionResponse::CopyFrom(const InterventionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.InterventionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterventionResponse::IsInitialized() const {
  return true;
}

void InterventionResponse::InternalSwap(InterventionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &request_id_, lhs_arena,
      &other->request_id_, rhs_arena
  );
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata InterventionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[2]);
}

// ===================================================================

class Label::_Internal {
 public:
};

Label::Label(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Label)
}
Label::Label(const Label& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(from._internal_value(), 
      GetArenaForAllocation());
  }
  display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    display_name_.Set(from._internal_display_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Label)
}

inline void Label::SharedCtor() {
value_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
display_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:v1.model.Label)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Label::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.Destroy();
  display_name_.Destroy();
}

void Label::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Label::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Label)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  display_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Label::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Label.value"));
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2 [json_name = "displayName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Label.display_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Label::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Label)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Label.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // string display_name = 2 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Label.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Label)
  return target;
}

size_t Label::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Label)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string display_name = 2 [json_name = "displayName"];
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Label::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Label::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Label::GetClassData() const { return &_class_data_; }

void Label::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Label *>(to)->MergeFrom(
      static_cast<const Label &>(from));
}


void Label::MergeFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Label)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_display_name().empty()) {
    _internal_set_display_name(from._internal_display_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Label::CopyFrom(const Label& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Label)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {
  return true;
}

void Label::InternalSwap(Label* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Label::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[3]);
}

// ===================================================================

class LabeledPolygon::_Internal {
 public:
};

LabeledPolygon::LabeledPolygon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vertices_(arena),
  labels_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.LabeledPolygon)
}
LabeledPolygon::LabeledPolygon(const LabeledPolygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      labels_(from.labels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.LabeledPolygon)
}

inline void LabeledPolygon::SharedCtor() {
}

LabeledPolygon::~LabeledPolygon() {
  // @@protoc_insertion_point(destructor:v1.model.LabeledPolygon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabeledPolygon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LabeledPolygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabeledPolygon::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabeledPolygon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  labels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabeledPolygon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.Vertex vertices = 1 [json_name = "vertices"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string labels = 2 [json_name = "labels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_labels();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "v1.model.LabeledPolygon.labels"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabeledPolygon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabeledPolygon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.Vertex vertices = 1 [json_name = "vertices"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_vertices_size()); i < n; i++) {
    const auto& repfield = this->_internal_vertices(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string labels = 2 [json_name = "labels"];
  for (int i = 0, n = this->_internal_labels_size(); i < n; i++) {
    const auto& s = this->_internal_labels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabeledPolygon.labels");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabeledPolygon)
  return target;
}

size_t LabeledPolygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabeledPolygon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Vertex vertices = 1 [json_name = "vertices"];
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string labels = 2 [json_name = "labels"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(labels_.size());
  for (int i = 0, n = labels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      labels_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabeledPolygon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabeledPolygon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabeledPolygon::GetClassData() const { return &_class_data_; }

void LabeledPolygon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabeledPolygon *>(to)->MergeFrom(
      static_cast<const LabeledPolygon &>(from));
}


void LabeledPolygon::MergeFrom(const LabeledPolygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabeledPolygon)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  labels_.MergeFrom(from.labels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabeledPolygon::CopyFrom(const LabeledPolygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabeledPolygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledPolygon::IsInitialized() const {
  return true;
}

void LabeledPolygon::InternalSwap(LabeledPolygon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  labels_.InternalSwap(&other->labels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledPolygon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[4]);
}

// ===================================================================

class Vertex::_Internal {
 public:
};

Vertex::Vertex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Vertex)
}
Vertex::Vertex(const Vertex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Vertex)
}

inline void Vertex::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vertex::~Vertex() {
  // @@protoc_insertion_point(destructor:v1.model.Vertex)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vertex::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vertex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vertex::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Vertex)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vertex::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vertex::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Vertex)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Vertex)
  return target;
}

size_t Vertex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Vertex)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vertex::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vertex::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vertex::GetClassData() const { return &_class_data_; }

void Vertex::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vertex *>(to)->MergeFrom(
      static_cast<const Vertex &>(from));
}


void Vertex::MergeFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Vertex)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vertex::CopyFrom(const Vertex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Vertex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  return true;
}

void Vertex::InternalSwap(Vertex* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vertex, y_)
      + sizeof(Vertex::y_)
      - PROTOBUF_FIELD_OFFSET(Vertex, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vertex::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[5]);
}

// ===================================================================

class LabelingRequest::_Internal {
 public:
  static const ::v1::model::Image& image(const LabelingRequest* msg);
};

const ::v1::model::Image&
LabelingRequest::_Internal::image(const LabelingRequest* msg) {
  return *msg->image_;
}
void LabelingRequest::clear_image() {
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
}
LabelingRequest::LabelingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  labels_(arena),
  hint_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.LabelingRequest)
}
LabelingRequest::LabelingRequest(const LabelingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      labels_(from.labels_),
      hint_(from.hint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  instruction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instruction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction().empty()) {
    instruction_.Set(from._internal_instruction(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_image()) {
    image_ = new ::v1::model::Image(*from.image_);
  } else {
    image_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.LabelingRequest)
}

inline void LabelingRequest::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instruction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instruction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_ = nullptr;
}

LabelingRequest::~LabelingRequest() {
  // @@protoc_insertion_point(destructor:v1.model.LabelingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  instruction_.Destroy();
  if (this != internal_default_instance()) delete image_;
}

void LabelingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabelingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabelingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  hint_.Clear();
  title_.ClearToEmpty();
  instruction_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && image_ != nullptr) {
    delete image_;
  }
  image_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.LabelingRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // string instruction = 2 [json_name = "instruction"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_instruction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.LabelingRequest.instruction"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Image image = 3 [json_name = "image"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.Label labels = 4 [json_name = "labels"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_labels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.LabeledPolygon hint = 5 [json_name = "hint"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_hint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabelingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabelingRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string instruction = 2 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction().data(), static_cast<int>(this->_internal_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.LabelingRequest.instruction");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instruction(), target);
  }

  // .v1.model.Image image = 3 [json_name = "image"];
  if (this->_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // repeated .v1.model.Label labels = 4 [json_name = "labels"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_labels_size()); i < n; i++) {
    const auto& repfield = this->_internal_labels(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .v1.model.LabeledPolygon hint = 5 [json_name = "hint"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_hint_size()); i < n; i++) {
    const auto& repfield = this->_internal_hint(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabelingRequest)
  return target;
}

size_t LabelingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabelingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Label labels = 4 [json_name = "labels"];
  total_size += 1UL * this->_internal_labels_size();
  for (const auto& msg : this->labels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.LabeledPolygon hint = 5 [json_name = "hint"];
  total_size += 1UL * this->_internal_hint_size();
  for (const auto& msg : this->hint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string instruction = 2 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction());
  }

  // .v1.model.Image image = 3 [json_name = "image"];
  if (this->_internal_has_image()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *image_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelingRequest::GetClassData() const { return &_class_data_; }

void LabelingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelingRequest *>(to)->MergeFrom(
      static_cast<const LabelingRequest &>(from));
}


void LabelingRequest::MergeFrom(const LabelingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabelingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  hint_.MergeFrom(from.hint_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_instruction().empty()) {
    _internal_set_instruction(from._internal_instruction());
  }
  if (from._internal_has_image()) {
    _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelingRequest::CopyFrom(const LabelingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabelingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelingRequest::IsInitialized() const {
  return true;
}

void LabelingRequest::InternalSwap(LabelingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  labels_.InternalSwap(&other->labels_);
  hint_.InternalSwap(&other->hint_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instruction_, lhs_arena,
      &other->instruction_, rhs_arena
  );
  swap(image_, other->image_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[6]);
}

// ===================================================================

class LabelingResponse::_Internal {
 public:
};

LabelingResponse::LabelingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.LabelingResponse)
}
LabelingResponse::LabelingResponse(const LabelingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.LabelingResponse)
}

inline void LabelingResponse::SharedCtor() {
}

LabelingResponse::~LabelingResponse() {
  // @@protoc_insertion_point(destructor:v1.model.LabelingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LabelingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LabelingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LabelingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.LabelingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LabelingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.LabeledPolygon value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LabelingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.LabelingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.LabeledPolygon value = 1 [json_name = "value"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.LabelingResponse)
  return target;
}

size_t LabelingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.LabelingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.LabeledPolygon value = 1 [json_name = "value"];
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LabelingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LabelingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LabelingResponse::GetClassData() const { return &_class_data_; }

void LabelingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<LabelingResponse *>(to)->MergeFrom(
      static_cast<const LabelingResponse &>(from));
}


void LabelingResponse::MergeFrom(const LabelingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.LabelingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LabelingResponse::CopyFrom(const LabelingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.LabelingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabelingResponse::IsInitialized() const {
  return true;
}

void LabelingResponse::InternalSwap(LabelingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabelingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[7]);
}

// ===================================================================

class SelectionRequest::_Internal {
 public:
  static const ::v1::model::Image& image(const SelectionRequest* msg);
};

const ::v1::model::Image&
SelectionRequest::_Internal::image(const SelectionRequest* msg) {
  return *msg->data_.image_;
}
void SelectionRequest::set_allocated_image(::v1::model::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.SelectionRequest.image)
}
void SelectionRequest::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.image_;
    }
    clear_has_data();
  }
}
SelectionRequest::SelectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  options_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.SelectionRequest)
}
SelectionRequest::SelectionRequest(const SelectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      options_(from.options_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(from._internal_title(), 
      GetArenaForAllocation());
  }
  instruction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instruction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction().empty()) {
    instruction_.Set(from._internal_instruction(), 
      GetArenaForAllocation());
  }
  hint_ = from.hint_;
  clear_has_data();
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.SelectionRequest)
}

inline void SelectionRequest::SharedCtor() {
title_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instruction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instruction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
hint_ = 0u;
clear_has_data();
}

SelectionRequest::~SelectionRequest() {
  // @@protoc_insertion_point(destructor:v1.model.SelectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.Destroy();
  instruction_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void SelectionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.SelectionRequest)
  switch (data_case()) {
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.image_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void SelectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.SelectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  options_.Clear();
  title_.ClearToEmpty();
  instruction_.ClearToEmpty();
  hint_ = 0u;
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [json_name = "title"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.SelectionRequest.title"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Image image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instruction = 3 [json_name = "instruction"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instruction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.SelectionRequest.instruction"));
        } else
          goto handle_unusual;
        continue;
      // repeated string options = 4 [json_name = "options"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_options();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "v1.model.SelectionRequest.options"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 hint = 5 [json_name = "hint"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hint_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.SelectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // .v1.model.Image image = 2 [json_name = "image"];
  if (_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // string instruction = 3 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction().data(), static_cast<int>(this->_internal_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.instruction");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instruction(), target);
  }

  // repeated string options = 4 [json_name = "options"];
  for (int i = 0, n = this->_internal_options_size(); i < n; i++) {
    const auto& s = this->_internal_options(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.SelectionRequest.options");
    target = stream->WriteString(4, s, target);
  }

  // uint32 hint = 5 [json_name = "hint"];
  if (this->_internal_hint() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.SelectionRequest)
  return target;
}

size_t SelectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.SelectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string options = 4 [json_name = "options"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(options_.size());
  for (int i = 0, n = options_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      options_.Get(i));
  }

  // string title = 1 [json_name = "title"];
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string instruction = 3 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction());
  }

  // uint32 hint = 5 [json_name = "hint"];
  if (this->_internal_hint() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_hint());
  }

  switch (data_case()) {
    // .v1.model.Image image = 2 [json_name = "image"];
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.image_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionRequest::GetClassData() const { return &_class_data_; }

void SelectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionRequest *>(to)->MergeFrom(
      static_cast<const SelectionRequest &>(from));
}


void SelectionRequest::MergeFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.SelectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  options_.MergeFrom(from.options_);
  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_instruction().empty()) {
    _internal_set_instruction(from._internal_instruction());
  }
  if (from._internal_hint() != 0) {
    _internal_set_hint(from._internal_hint());
  }
  switch (from.data_case()) {
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionRequest::CopyFrom(const SelectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.SelectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionRequest::IsInitialized() const {
  return true;
}

void SelectionRequest::InternalSwap(SelectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  options_.InternalSwap(&other->options_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instruction_, lhs_arena,
      &other->instruction_, rhs_arena
  );
  swap(hint_, other->hint_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[8]);
}

// ===================================================================

class SelectionResponse::_Internal {
 public:
};

SelectionResponse::SelectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.SelectionResponse)
}
SelectionResponse::SelectionResponse(const SelectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:v1.model.SelectionResponse)
}

inline void SelectionResponse::SharedCtor() {
value_ = 0u;
}

SelectionResponse::~SelectionResponse() {
  // @@protoc_insertion_point(destructor:v1.model.SelectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SelectionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SelectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.SelectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SelectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SelectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.SelectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.SelectionResponse)
  return target;
}

size_t SelectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.SelectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SelectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SelectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SelectionResponse::GetClassData() const { return &_class_data_; }

void SelectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SelectionResponse *>(to)->MergeFrom(
      static_cast<const SelectionResponse &>(from));
}


void SelectionResponse::MergeFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.SelectionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SelectionResponse::CopyFrom(const SelectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.SelectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectionResponse::IsInitialized() const {
  return true;
}

void SelectionResponse::InternalSwap(SelectionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SelectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[9]);
}

// ===================================================================

class TeleopRequest::_Internal {
 public:
};

TeleopRequest::TeleopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopRequest)
}
TeleopRequest::TeleopRequest(const TeleopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instruction_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instruction_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instruction().empty()) {
    instruction_.Set(from._internal_instruction(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopRequest)
}

inline void TeleopRequest::SharedCtor() {
instruction_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instruction_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeleopRequest::~TeleopRequest() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instruction_.Destroy();
}

void TeleopRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instruction_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string instruction = 1 [json_name = "instruction"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_instruction();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopRequest.instruction"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string instruction = 1 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instruction().data(), static_cast<int>(this->_internal_instruction().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopRequest.instruction");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_instruction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopRequest)
  return target;
}

size_t TeleopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string instruction = 1 [json_name = "instruction"];
  if (!this->_internal_instruction().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instruction());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopRequest::GetClassData() const { return &_class_data_; }

void TeleopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopRequest *>(to)->MergeFrom(
      static_cast<const TeleopRequest &>(from));
}


void TeleopRequest::MergeFrom(const TeleopRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instruction().empty()) {
    _internal_set_instruction(from._internal_instruction());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopRequest::CopyFrom(const TeleopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopRequest::IsInitialized() const {
  return true;
}

void TeleopRequest::InternalSwap(TeleopRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &instruction_, lhs_arena,
      &other->instruction_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[10]);
}

// ===================================================================

class TeleopResponse::_Internal {
 public:
};

TeleopResponse::TeleopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.TeleopResponse)
}
TeleopResponse::TeleopResponse(const TeleopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  state_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    state_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_state().empty()) {
    state_.Set(from._internal_state(), 
      GetArenaForAllocation());
  }
  notes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notes().empty()) {
    notes_.Set(from._internal_notes(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.TeleopResponse)
}

inline void TeleopResponse::SharedCtor() {
state_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  state_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notes_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notes_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TeleopResponse::~TeleopResponse() {
  // @@protoc_insertion_point(destructor:v1.model.TeleopResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TeleopResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  state_.Destroy();
  notes_.Destroy();
}

void TeleopResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TeleopResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.TeleopResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.ClearToEmpty();
  notes_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TeleopResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string state = 1 [json_name = "state"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_state();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopResponse.state"));
        } else
          goto handle_unusual;
        continue;
      // string notes = 2 [json_name = "notes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_notes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.TeleopResponse.notes"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TeleopResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.TeleopResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string state = 1 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_state().data(), static_cast<int>(this->_internal_state().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopResponse.state");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_state(), target);
  }

  // string notes = 2 [json_name = "notes"];
  if (!this->_internal_notes().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notes().data(), static_cast<int>(this->_internal_notes().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.TeleopResponse.notes");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_notes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.TeleopResponse)
  return target;
}

size_t TeleopResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.TeleopResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1 [json_name = "state"];
  if (!this->_internal_state().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_state());
  }

  // string notes = 2 [json_name = "notes"];
  if (!this->_internal_notes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TeleopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TeleopResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TeleopResponse::GetClassData() const { return &_class_data_; }

void TeleopResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TeleopResponse *>(to)->MergeFrom(
      static_cast<const TeleopResponse &>(from));
}


void TeleopResponse::MergeFrom(const TeleopResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.TeleopResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _internal_set_state(from._internal_state());
  }
  if (!from._internal_notes().empty()) {
    _internal_set_notes(from._internal_notes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TeleopResponse::CopyFrom(const TeleopResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.TeleopResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleopResponse::IsInitialized() const {
  return true;
}

void TeleopResponse::InternalSwap(TeleopResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &state_, lhs_arena,
      &other->state_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &notes_, lhs_arena,
      &other->notes_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TeleopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fintervention_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fintervention_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::InterventionRequest_TagsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::v1::model::InterventionRequest_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::InterventionRequest_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::InterventionRequest*
Arena::CreateMaybeMessage< ::v1::model::InterventionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::InterventionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::InterventionResponse*
Arena::CreateMaybeMessage< ::v1::model::InterventionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::InterventionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Label*
Arena::CreateMaybeMessage< ::v1::model::Label >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Label >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabeledPolygon*
Arena::CreateMaybeMessage< ::v1::model::LabeledPolygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::LabeledPolygon >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Vertex*
Arena::CreateMaybeMessage< ::v1::model::Vertex >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Vertex >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabelingRequest*
Arena::CreateMaybeMessage< ::v1::model::LabelingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::LabelingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::LabelingResponse*
Arena::CreateMaybeMessage< ::v1::model::LabelingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::LabelingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::SelectionRequest*
Arena::CreateMaybeMessage< ::v1::model::SelectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::SelectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::SelectionResponse*
Arena::CreateMaybeMessage< ::v1::model::SelectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::SelectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopRequest*
Arena::CreateMaybeMessage< ::v1::model::TeleopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::TeleopResponse*
Arena::CreateMaybeMessage< ::v1::model::TeleopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::TeleopResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/navigation.proto

#include "protos/model/v1/navigation.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace v1 {
namespace model {
PROTOBUF_CONSTEXPR Location::Location(
    ::_pbi::ConstantInitialized)
  : latitude_(0)
  , longitude_(0)
  , altitude_(0)
  , orientation_(0){}
struct LocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocationDefaultTypeInternal _Location_default_instance_;
PROTOBUF_CONSTEXPR Localization::Localization(
    ::_pbi::ConstantInitialized)
  : point_clouds_()
  , odometry_(nullptr)
  , map_(nullptr)
  , path_(nullptr)
  , goal_(nullptr){}
struct LocalizationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalizationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalizationDefaultTypeInternal() {}
  union {
    Localization _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalizationDefaultTypeInternal _Localization_default_instance_;
PROTOBUF_CONSTEXPR Odometry::Odometry(
    ::_pbi::ConstantInitialized)
  : pose_(nullptr)
  , twist_(nullptr)
  , world_to_local_(nullptr){}
struct OdometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OdometryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OdometryDefaultTypeInternal() {}
  union {
    Odometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OdometryDefaultTypeInternal _Odometry_default_instance_;
PROTOBUF_CONSTEXPR Map::Map(
    ::_pbi::ConstantInitialized)
  : origin_(nullptr)
  , world_to_local_(nullptr)
  , resolution_(0)
  , width_(0u)
  , height_(0u)
  , _oneof_case_{}{}
struct MapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MapDefaultTypeInternal() {}
  union {
    Map _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MapDefaultTypeInternal _Map_default_instance_;
PROTOBUF_CONSTEXPR OccupancyGrid::OccupancyGrid(
    ::_pbi::ConstantInitialized)
  : data_()
  , _data_cached_byte_size_(0){}
struct OccupancyGridDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OccupancyGridDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OccupancyGridDefaultTypeInternal() {}
  union {
    OccupancyGrid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OccupancyGridDefaultTypeInternal _OccupancyGrid_default_instance_;
PROTOBUF_CONSTEXPR Path::Path(
    ::_pbi::ConstantInitialized)
  : poses_()
  , world_to_local_(nullptr){}
struct PathDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PathDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PathDefaultTypeInternal _Path_default_instance_;
PROTOBUF_CONSTEXPR JointState::JointState(
    ::_pbi::ConstantInitialized)
  : name_()
  , position_()
  , velocity_()
  , effort_()
  , world_to_local_(nullptr){}
struct JointStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JointStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JointStateDefaultTypeInternal() {}
  union {
    JointState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JointStateDefaultTypeInternal _JointState_default_instance_;
PROTOBUF_CONSTEXPR Goal::Goal(
    ::_pbi::ConstantInitialized)
  : world_to_local_(nullptr)
  , pose_(nullptr){}
struct GoalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoalDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoalDefaultTypeInternal() {}
  union {
    Goal _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoalDefaultTypeInternal _Goal_default_instance_;
PROTOBUF_CONSTEXPR GoalID::GoalID(
    ::_pbi::ConstantInitialized)
  : id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GoalIDDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GoalIDDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GoalIDDefaultTypeInternal() {}
  union {
    GoalID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GoalIDDefaultTypeInternal _GoalID_default_instance_;
PROTOBUF_CONSTEXPR PoseWithCovariance::PoseWithCovariance(
    ::_pbi::ConstantInitialized)
  : covariance_()
  , pose_(nullptr){}
struct PoseWithCovarianceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseWithCovarianceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseWithCovarianceDefaultTypeInternal() {}
  union {
    PoseWithCovariance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseWithCovarianceDefaultTypeInternal _PoseWithCovariance_default_instance_;
PROTOBUF_CONSTEXPR ColorRGBA::ColorRGBA(
    ::_pbi::ConstantInitialized)
  : r_(0)
  , g_(0)
  , b_(0)
  , a_(0){}
struct ColorRGBADefaultTypeInternal {
  PROTOBUF_CONSTEXPR ColorRGBADefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ColorRGBADefaultTypeInternal() {}
  union {
    ColorRGBA _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ColorRGBADefaultTypeInternal _ColorRGBA_default_instance_;
PROTOBUF_CONSTEXPR Marker3D::Marker3D(
    ::_pbi::ConstantInitialized)
  : points_()
  , colors_()
  , ns_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , action_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , text_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mesh_resource_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , frame_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , world_to_local_(nullptr)
  , pose_(nullptr)
  , scale_(nullptr)
  , color_(nullptr)
  , lifetime_(0)
  , id_(0)
  , frame_locked_(false)
  , mesh_use_embedded_materials_(false){}
struct Marker3DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Marker3DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Marker3DDefaultTypeInternal() {}
  union {
    Marker3D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Marker3DDefaultTypeInternal _Marker3D_default_instance_;
PROTOBUF_CONSTEXPR Marker3DArray::Marker3DArray(
    ::_pbi::ConstantInitialized)
  : markers_(){}
struct Marker3DArrayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Marker3DArrayDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Marker3DArrayDefaultTypeInternal() {}
  union {
    Marker3DArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Marker3DArrayDefaultTypeInternal _Marker3DArray_default_instance_;
}  // namespace model
}  // namespace v1
static ::_pb::Metadata file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[13];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, latitude_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, longitude_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, altitude_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Location, orientation_),
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, odometry_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, map_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, point_clouds_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, path_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Localization, goal_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, pose_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, twist_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Odometry, world_to_local_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, resolution_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, width_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, height_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, origin_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, world_to_local_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::Map, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::OccupancyGrid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::OccupancyGrid, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Path, world_to_local_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Path, poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, world_to_local_),
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, name_),
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, position_),
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, velocity_),
  PROTOBUF_FIELD_OFFSET(::v1::model::JointState, effort_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Goal, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Goal, world_to_local_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Goal, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::GoalID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::GoalID, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::PoseWithCovariance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::PoseWithCovariance, pose_),
  PROTOBUF_FIELD_OFFSET(::v1::model::PoseWithCovariance, covariance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ColorRGBA, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::ColorRGBA, r_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ColorRGBA, g_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ColorRGBA, b_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ColorRGBA, a_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, world_to_local_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, ns_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, id_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, type_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, action_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, pose_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, scale_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, color_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, lifetime_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, frame_locked_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, points_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, colors_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, text_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, mesh_resource_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, mesh_use_embedded_materials_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3D, frame_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3DArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::v1::model::Marker3DArray, markers_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::v1::model::Location)},
  { 14, -1, -1, sizeof(::v1::model::Localization)},
  { 25, -1, -1, sizeof(::v1::model::Odometry)},
  { 34, -1, -1, sizeof(::v1::model::Map)},
  { 49, -1, -1, sizeof(::v1::model::OccupancyGrid)},
  { 56, -1, -1, sizeof(::v1::model::Path)},
  { 64, -1, -1, sizeof(::v1::model::JointState)},
  { 75, -1, -1, sizeof(::v1::model::Goal)},
  { 83, -1, -1, sizeof(::v1::model::GoalID)},
  { 90, -1, -1, sizeof(::v1::model::PoseWithCovariance)},
  { 98, -1, -1, sizeof(::v1::model::ColorRGBA)},
  { 108, -1, -1, sizeof(::v1::model::Marker3D)},
  { 130, -1, -1, sizeof(::v1::model::Marker3DArray)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::v1::model::_Location_default_instance_._instance,
  &::v1::model::_Localization_default_instance_._instance,
  &::v1::model::_Odometry_default_instance_._instance,
  &::v1::model::_Map_default_instance_._instance,
  &::v1::model::_OccupancyGrid_default_instance_._instance,
  &::v1::model::_Path_default_instance_._instance,
  &::v1::model::_JointState_default_instance_._instance,
  &::v1::model::_Goal_default_instance_._instance,
  &::v1::model::_GoalID_default_instance_._instance,
  &::v1::model::_PoseWithCovariance_default_instance_._instance,
  &::v1::model::_ColorRGBA_default_instance_._instance,
  &::v1::model::_Marker3D_default_instance_._instance,
  &::v1::model::_Marker3DArray_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fnavigation_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n protos/model/v1/navigation.proto\022\010v1.m"
  "odel\032\032protos/model/v1/math.proto\032\033protos"
  "/model/v1/media.proto\"\251\001\n\010Location\022\032\n\010la"
  "titude\030\001 \001(\001R\010latitude\022\034\n\tlongitude\030\002 \001("
  "\001R\tlongitude\022\037\n\010altitude\030\003 \001(\001H\000R\010altitu"
  "de\210\001\001\022%\n\013orientation\030\004 \001(\001H\001R\013orientatio"
  "n\210\001\001B\013\n\t_altitudeB\016\n\014_orientation\"\340\001\n\014Lo"
  "calization\022.\n\010odometry\030\001 \001(\0132\022.v1.model."
  "OdometryR\010odometry\022\037\n\003map\030\002 \001(\0132\r.v1.mod"
  "el.MapR\003map\0227\n\014point_clouds\030\003 \003(\0132\024.v1.m"
  "odel.PointCloudR\013pointClouds\022\"\n\004path\030\004 \001"
  "(\0132\016.v1.model.PathR\004path\022\"\n\004goal\030\005 \001(\0132\016"
  ".v1.model.GoalR\004goal\"\225\001\n\010Odometry\022\'\n\004pos"
  "e\030\001 \001(\0132\023.v1.model.TransformR\004pose\022%\n\005tw"
  "ist\030\002 \001(\0132\017.v1.model.TwistR\005twist\0229\n\016wor"
  "ld_to_local\030\003 \001(\0132\023.v1.model.TransformR\014"
  "worldToLocal\"\255\002\n\003Map\022\036\n\nresolution\030\001 \001(\001"
  "R\nresolution\022\024\n\005width\030\002 \001(\rR\005width\022\026\n\006he"
  "ight\030\003 \001(\rR\006height\022+\n\006origin\030\004 \001(\0132\023.v1."
  "model.TransformR\006origin\0229\n\016world_to_loca"
  "l\030\005 \001(\0132\023.v1.model.TransformR\014worldToLoc"
  "al\022@\n\016occupancy_grid\030\006 \001(\0132\027.v1.model.Oc"
  "cupancyGridH\000R\roccupancyGrid\022\022\n\003url\030\007 \001("
  "\tH\000R\003url\022\022\n\003raw\030\010 \001(\014H\000R\003rawB\006\n\004data\"#\n\r"
  "OccupancyGrid\022\022\n\004data\030\001 \003(\005R\004data\"l\n\004Pat"
  "h\0229\n\016world_to_local\030\001 \001(\0132\023.v1.model.Tra"
  "nsformR\014worldToLocal\022)\n\005poses\030\002 \003(\0132\023.v1"
  ".model.TransformR\005poses\"\253\001\n\nJointState\0229"
  "\n\016world_to_local\030\005 \001(\0132\023.v1.model.Transf"
  "ormR\014worldToLocal\022\022\n\004name\030\001 \003(\tR\004name\022\032\n"
  "\010position\030\002 \003(\001R\010position\022\032\n\010velocity\030\003 "
  "\003(\001R\010velocity\022\026\n\006effort\030\004 \003(\001R\006effort\"j\n"
  "\004Goal\0229\n\016world_to_local\030\001 \001(\0132\023.v1.model"
  ".TransformR\014worldToLocal\022\'\n\004pose\030\002 \001(\0132\023"
  ".v1.model.TransformR\004pose\"\030\n\006GoalID\022\016\n\002i"
  "d\030\001 \001(\tR\002id\"]\n\022PoseWithCovariance\022\'\n\004pos"
  "e\030\001 \001(\0132\023.v1.model.TransformR\004pose\022\036\n\nco"
  "variance\030\002 \003(\001R\ncovariance\"C\n\tColorRGBA\022"
  "\014\n\001r\030\001 \001(\002R\001r\022\014\n\001g\030\002 \001(\002R\001g\022\014\n\001b\030\003 \001(\002R\001"
  "b\022\014\n\001a\030\004 \001(\002R\001a\"\270\004\n\010Marker3D\0229\n\016world_to"
  "_local\030\001 \001(\0132\023.v1.model.TransformR\014world"
  "ToLocal\022\016\n\002ns\030\002 \001(\tR\002ns\022\016\n\002id\030\003 \001(\005R\002id\022"
  "\022\n\004type\030\004 \001(\tR\004type\022\026\n\006action\030\005 \001(\tR\006act"
  "ion\022\'\n\004pose\030\006 \001(\0132\023.v1.model.TransformR\004"
  "pose\022\'\n\005scale\030\007 \001(\0132\021.v1.model.Vector3R\005"
  "scale\022)\n\005color\030\010 \001(\0132\023.v1.model.ColorRGB"
  "AR\005color\022\032\n\010lifetime\030\t \001(\001R\010lifetime\022!\n\014"
  "frame_locked\030\n \001(\010R\013frameLocked\022)\n\006point"
  "s\030\013 \003(\0132\021.v1.model.Vector3R\006points\022+\n\006co"
  "lors\030\014 \003(\0132\023.v1.model.ColorRGBAR\006colors\022"
  "\022\n\004text\030\r \001(\tR\004text\022#\n\rmesh_resource\030\016 \001"
  "(\tR\014meshResource\022=\n\033mesh_use_embedded_ma"
  "terials\030\017 \001(\010R\030meshUseEmbeddedMaterials\022"
  "\031\n\010frame_id\030\020 \001(\tR\007frameId\"=\n\rMarker3DAr"
  "ray\022,\n\007markers\030\001 \003(\0132\022.v1.model.Marker3D"
  "R\007markersB+Z)github.com/FormantIO/genpro"
  "to/go/v1/modelb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_deps[2] = {
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto = {
    false, false, 2262, descriptor_table_protodef_protos_2fmodel_2fv1_2fnavigation_2eproto,
    "protos/model/v1/navigation.proto",
    &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_deps, 2, 13,
    schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fnavigation_2eproto::offsets,
    file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto,
    file_level_service_descriptors_protos_2fmodel_2fv1_2fnavigation_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fnavigation_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto);
namespace v1 {
namespace model {

// ===================================================================

class Location::_Internal {
 public:
  using HasBits = decltype(std::declval<Location>()._has_bits_);
  static void set_has_altitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(orientation_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&orientation_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(orientation_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:v1.model.Location)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&altitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&orientation_) -
        reinterpret_cast<char*>(&altitude_)) + sizeof(orientation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double altitude = 3 [json_name = "altitude"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_altitude(&has_bits);
          altitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // optional double orientation = 4 [json_name = "orientation"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_orientation(&has_bits);
          orientation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  // optional double altitude = 3 [json_name = "altitude"];
  if (_internal_has_altitude()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude(), target);
  }

  // optional double orientation = 4 [json_name = "orientation"];
  if (_internal_has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_orientation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional double altitude = 3 [json_name = "altitude"];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional double orientation = 4 [json_name = "orientation"];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      orientation_ = from.orientation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, orientation_)
      + sizeof(Location::orientation_)
      - PROTOBUF_FIELD_OFFSET(Location, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[0]);
}

// ===================================================================

class Localization::_Internal {
 public:
  static const ::v1::model::Odometry& odometry(const Localization* msg);
  static const ::v1::model::Map& map(const Localization* msg);
  static const ::v1::model::Path& path(const Localization* msg);
  static const ::v1::model::Goal& goal(const Localization* msg);
};

const ::v1::model::Odometry&
Localization::_Internal::odometry(const Localization* msg) {
  return *msg->odometry_;
}
const ::v1::model::Map&
Localization::_Internal::map(const Localization* msg) {
  return *msg->map_;
}
const ::v1::model::Path&
Localization::_Internal::path(const Localization* msg) {
  return *msg->path_;
}
const ::v1::model::Goal&
Localization::_Internal::goal(const Localization* msg) {
  return *msg->goal_;
}
void Localization::clear_point_clouds() {
  point_clouds_.Clear();
}
Localization::Localization(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  point_clouds_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Localization)
}
Localization::Localization(const Localization& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_clouds_(from.point_clouds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odometry()) {
    odometry_ = new ::v1::model::Odometry(*from.odometry_);
  } else {
    odometry_ = nullptr;
  }
  if (from._internal_has_map()) {
    map_ = new ::v1::model::Map(*from.map_);
  } else {
    map_ = nullptr;
  }
  if (from._internal_has_path()) {
    path_ = new ::v1::model::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_goal()) {
    goal_ = new ::v1::model::Goal(*from.goal_);
  } else {
    goal_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Localization)
}

inline void Localization::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&odometry_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&goal_) -
    reinterpret_cast<char*>(&odometry_)) + sizeof(goal_));
}

Localization::~Localization() {
  // @@protoc_insertion_point(destructor:v1.model.Localization)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Localization::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete odometry_;
  if (this != internal_default_instance()) delete map_;
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete goal_;
}

void Localization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Localization::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Localization)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_clouds_.Clear();
  if (GetArenaForAllocation() == nullptr && odometry_ != nullptr) {
    delete odometry_;
  }
  odometry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && map_ != nullptr) {
    delete map_;
  }
  map_ = nullptr;
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && goal_ != nullptr) {
    delete goal_;
  }
  goal_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Localization::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Odometry odometry = 1 [json_name = "odometry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Map map = 2 [json_name = "map"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_map(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.PointCloud point_clouds = 3 [json_name = "pointClouds"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point_clouds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Path path = 4 [json_name = "path"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Goal goal = 5 [json_name = "goal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_goal(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Localization::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Localization)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Odometry odometry = 1 [json_name = "odometry"];
  if (this->_internal_has_odometry()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::odometry(this),
        _Internal::odometry(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Map map = 2 [json_name = "map"];
  if (this->_internal_has_map()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::map(this),
        _Internal::map(this).GetCachedSize(), target, stream);
  }

  // repeated .v1.model.PointCloud point_clouds = 3 [json_name = "pointClouds"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_point_clouds_size()); i < n; i++) {
    const auto& repfield = this->_internal_point_clouds(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .v1.model.Path path = 4 [json_name = "path"];
  if (this->_internal_has_path()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::path(this),
        _Internal::path(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Goal goal = 5 [json_name = "goal"];
  if (this->_internal_has_goal()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::goal(this),
        _Internal::goal(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Localization)
  return target;
}

size_t Localization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Localization)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.PointCloud point_clouds = 3 [json_name = "pointClouds"];
  total_size += 1UL * this->_internal_point_clouds_size();
  for (const auto& msg : this->point_clouds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.Odometry odometry = 1 [json_name = "odometry"];
  if (this->_internal_has_odometry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odometry_);
  }

  // .v1.model.Map map = 2 [json_name = "map"];
  if (this->_internal_has_map()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *map_);
  }

  // .v1.model.Path path = 4 [json_name = "path"];
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .v1.model.Goal goal = 5 [json_name = "goal"];
  if (this->_internal_has_goal()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *goal_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Localization::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Localization::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Localization::GetClassData() const { return &_class_data_; }

void Localization::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Localization *>(to)->MergeFrom(
      static_cast<const Localization &>(from));
}


void Localization::MergeFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Localization)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  point_clouds_.MergeFrom(from.point_clouds_);
  if (from._internal_has_odometry()) {
    _internal_mutable_odometry()->::v1::model::Odometry::MergeFrom(from._internal_odometry());
  }
  if (from._internal_has_map()) {
    _internal_mutable_map()->::v1::model::Map::MergeFrom(from._internal_map());
  }
  if (from._internal_has_path()) {
    _internal_mutable_path()->::v1::model::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_has_goal()) {
    _internal_mutable_goal()->::v1::model::Goal::MergeFrom(from._internal_goal());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Localization::CopyFrom(const Localization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Localization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Localization::IsInitialized() const {
  return true;
}

void Localization::InternalSwap(Localization* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_clouds_.InternalSwap(&other->point_clouds_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Localization, goal_)
      + sizeof(Localization::goal_)
      - PROTOBUF_FIELD_OFFSET(Localization, odometry_)>(
          reinterpret_cast<char*>(&odometry_),
          reinterpret_cast<char*>(&other->odometry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Localization::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[1]);
}

// ===================================================================

class Odometry::_Internal {
 public:
  static const ::v1::model::Transform& pose(const Odometry* msg);
  static const ::v1::model::Twist& twist(const Odometry* msg);
  static const ::v1::model::Transform& world_to_local(const Odometry* msg);
};

const ::v1::model::Transform&
Odometry::_Internal::pose(const Odometry* msg) {
  return *msg->pose_;
}
const ::v1::model::Twist&
Odometry::_Internal::twist(const Odometry* msg) {
  return *msg->twist_;
}
const ::v1::model::Transform&
Odometry::_Internal::world_to_local(const Odometry* msg) {
  return *msg->world_to_local_;
}
void Odometry::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Odometry::clear_twist() {
  if (GetArenaForAllocation() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
}
void Odometry::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
Odometry::Odometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Odometry)
}
Odometry::Odometry(const Odometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::v1::model::Transform(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_twist()) {
    twist_ = new ::v1::model::Twist(*from.twist_);
  } else {
    twist_ = nullptr;
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Odometry)
}

inline void Odometry::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_to_local_) -
    reinterpret_cast<char*>(&pose_)) + sizeof(world_to_local_));
}

Odometry::~Odometry() {
  // @@protoc_insertion_point(destructor:v1.model.Odometry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Odometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete twist_;
  if (this != internal_default_instance()) delete world_to_local_;
}

void Odometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Odometry::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Odometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && twist_ != nullptr) {
    delete twist_;
  }
  twist_ = nullptr;
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odometry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Transform pose = 1 [json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Twist twist = 2 [json_name = "twist"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Odometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Odometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Twist twist = 2 [json_name = "twist"];
  if (this->_internal_has_twist()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::twist(this),
        _Internal::twist(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Odometry)
  return target;
}

size_t Odometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Odometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .v1.model.Twist twist = 2 [json_name = "twist"];
  if (this->_internal_has_twist()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *twist_);
  }

  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Odometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Odometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Odometry::GetClassData() const { return &_class_data_; }

void Odometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Odometry *>(to)->MergeFrom(
      static_cast<const Odometry &>(from));
}


void Odometry::MergeFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Odometry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
  }
  if (from._internal_has_twist()) {
    _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
  }
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Odometry::CopyFrom(const Odometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Odometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odometry::IsInitialized() const {
  return true;
}

void Odometry::InternalSwap(Odometry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Odometry, world_to_local_)
      + sizeof(Odometry::world_to_local_)
      - PROTOBUF_FIELD_OFFSET(Odometry, pose_)>(
          reinterpret_cast<char*>(&pose_),
          reinterpret_cast<char*>(&other->pose_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Odometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[2]);
}

// ===================================================================

class Map::_Internal {
 public:
  static const ::v1::model::Transform& origin(const Map* msg);
  static const ::v1::model::Transform& world_to_local(const Map* msg);
  static const ::v1::model::OccupancyGrid& occupancy_grid(const Map* msg);
};

const ::v1::model::Transform&
Map::_Internal::origin(const Map* msg) {
  return *msg->origin_;
}
const ::v1::model::Transform&
Map::_Internal::world_to_local(const Map* msg) {
  return *msg->world_to_local_;
}
const ::v1::model::OccupancyGrid&
Map::_Internal::occupancy_grid(const Map* msg) {
  return *msg->data_.occupancy_grid_;
}
void Map::clear_origin() {
  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
}
void Map::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
void Map::set_allocated_occupancy_grid(::v1::model::OccupancyGrid* occupancy_grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (occupancy_grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(occupancy_grid);
    if (message_arena != submessage_arena) {
      occupancy_grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, occupancy_grid, submessage_arena);
    }
    set_has_occupancy_grid();
    data_.occupancy_grid_ = occupancy_grid;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Map.occupancy_grid)
}
Map::Map(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Map)
}
Map::Map(const Map& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_origin()) {
    origin_ = new ::v1::model::Transform(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  clear_has_data();
  switch (from.data_case()) {
    case kOccupancyGrid: {
      _internal_mutable_occupancy_grid()->::v1::model::OccupancyGrid::MergeFrom(from._internal_occupancy_grid());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Map)
}

inline void Map::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&origin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&origin_)) + sizeof(height_));
clear_has_data();
}

Map::~Map() {
  // @@protoc_insertion_point(destructor:v1.model.Map)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Map::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete origin_;
  if (this != internal_default_instance()) delete world_to_local_;
  if (has_data()) {
    clear_data();
  }
}

void Map::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Map::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Map)
  switch (data_case()) {
    case kOccupancyGrid: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.occupancy_grid_;
      }
      break;
    }
    case kUrl: {
      data_.url_.Destroy();
      break;
    }
    case kRaw: {
      data_.raw_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Map::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Map)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && origin_ != nullptr) {
    delete origin_;
  }
  origin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(height_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Map::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double resolution = 1 [json_name = "resolution"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 width = 2 [json_name = "width"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height = 3 [json_name = "height"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform origin = 4 [json_name = "origin"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.OccupancyGrid occupancy_grid = 6 [json_name = "occupancyGrid"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_occupancy_grid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 7 [json_name = "url"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Map.url"));
        } else
          goto handle_unusual;
        continue;
      // bytes raw = 8 [json_name = "raw"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_raw();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Map::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Map)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double resolution = 1 [json_name = "resolution"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_resolution(), target);
  }

  // uint32 width = 2 [json_name = "width"];
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_width(), target);
  }

  // uint32 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_height(), target);
  }

  // .v1.model.Transform origin = 4 [json_name = "origin"];
  if (this->_internal_has_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::origin(this),
        _Internal::origin(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  // .v1.model.OccupancyGrid occupancy_grid = 6 [json_name = "occupancyGrid"];
  if (_internal_has_occupancy_grid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::occupancy_grid(this),
        _Internal::occupancy_grid(this).GetCachedSize(), target, stream);
  }

  // string url = 7 [json_name = "url"];
  if (_internal_has_url()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Map.url");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_url(), target);
  }

  // bytes raw = 8 [json_name = "raw"];
  if (_internal_has_raw()) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_raw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Map)
  return target;
}

size_t Map::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Map)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform origin = 4 [json_name = "origin"];
  if (this->_internal_has_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *origin_);
  }

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  // double resolution = 1 [json_name = "resolution"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = this->_internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    total_size += 1 + 8;
  }

  // uint32 width = 2 [json_name = "width"];
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width());
  }

  // uint32 height = 3 [json_name = "height"];
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height());
  }

  switch (data_case()) {
    // .v1.model.OccupancyGrid occupancy_grid = 6 [json_name = "occupancyGrid"];
    case kOccupancyGrid: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.occupancy_grid_);
      break;
    }
    // string url = 7 [json_name = "url"];
    case kUrl: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_url());
      break;
    }
    // bytes raw = 8 [json_name = "raw"];
    case kRaw: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Map::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Map::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Map::GetClassData() const { return &_class_data_; }

void Map::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Map *>(to)->MergeFrom(
      static_cast<const Map &>(from));
}


void Map::MergeFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Map)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_origin()) {
    _internal_mutable_origin()->::v1::model::Transform::MergeFrom(from._internal_origin());
  }
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_resolution = from._internal_resolution();
  uint64_t raw_resolution;
  memcpy(&raw_resolution, &tmp_resolution, sizeof(tmp_resolution));
  if (raw_resolution != 0) {
    _internal_set_resolution(from._internal_resolution());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  switch (from.data_case()) {
    case kOccupancyGrid: {
      _internal_mutable_occupancy_grid()->::v1::model::OccupancyGrid::MergeFrom(from._internal_occupancy_grid());
      break;
    }
    case kUrl: {
      _internal_set_url(from._internal_url());
      break;
    }
    case kRaw: {
      _internal_set_raw(from._internal_raw());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Map::CopyFrom(const Map& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Map)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Map::IsInitialized() const {
  return true;
}

void Map::InternalSwap(Map* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Map, height_)
      + sizeof(Map::height_)
      - PROTOBUF_FIELD_OFFSET(Map, origin_)>(
          reinterpret_cast<char*>(&origin_),
          reinterpret_cast<char*>(&other->origin_));
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Map::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[3]);
}

// ===================================================================

class OccupancyGrid::_Internal {
 public:
};

OccupancyGrid::OccupancyGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  data_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.OccupancyGrid)
}
OccupancyGrid::OccupancyGrid(const OccupancyGrid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      data_(from.data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.OccupancyGrid)
}

inline void OccupancyGrid::SharedCtor() {
}

OccupancyGrid::~OccupancyGrid() {
  // @@protoc_insertion_point(destructor:v1.model.OccupancyGrid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OccupancyGrid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void OccupancyGrid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OccupancyGrid::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.OccupancyGrid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OccupancyGrid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_data(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OccupancyGrid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.OccupancyGrid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1 [json_name = "data"];
  {
    int byte_size = _data_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_data(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.OccupancyGrid)
  return target;
}

size_t OccupancyGrid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.OccupancyGrid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 data = 1 [json_name = "data"];
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _data_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OccupancyGrid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OccupancyGrid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OccupancyGrid::GetClassData() const { return &_class_data_; }

void OccupancyGrid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OccupancyGrid *>(to)->MergeFrom(
      static_cast<const OccupancyGrid &>(from));
}


void OccupancyGrid::MergeFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.OccupancyGrid)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OccupancyGrid::CopyFrom(const OccupancyGrid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.OccupancyGrid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupancyGrid::IsInitialized() const {
  return true;
}

void OccupancyGrid::InternalSwap(OccupancyGrid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  data_.InternalSwap(&other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OccupancyGrid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[4]);
}

// ===================================================================

class Path::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const Path* msg);
};

const ::v1::model::Transform&
Path::_Internal::world_to_local(const Path* msg) {
  return *msg->world_to_local_;
}
void Path::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
void Path::clear_poses() {
  poses_.Clear();
}
Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  poses_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poses_(from.poses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Path)
}

inline void Path::SharedCtor() {
world_to_local_ = nullptr;
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:v1.model.Path)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete world_to_local_;
}

void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.Transform poses = 2 [json_name = "poses"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  // repeated .v1.model.Transform poses = 2 [json_name = "poses"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_poses_size()); i < n; i++) {
    const auto& repfield = this->_internal_poses(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Transform poses = 2 [json_name = "poses"];
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  poses_.InternalSwap(&other->poses_);
  swap(world_to_local_, other->world_to_local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[5]);
}

// ===================================================================

class JointState::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const JointState* msg);
};

const ::v1::model::Transform&
JointState::_Internal::world_to_local(const JointState* msg) {
  return *msg->world_to_local_;
}
void JointState::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
JointState::JointState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  name_(arena),
  position_(arena),
  velocity_(arena),
  effort_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.JointState)
}
JointState::JointState(const JointState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      name_(from.name_),
      position_(from.position_),
      velocity_(from.velocity_),
      effort_(from.effort_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.JointState)
}

inline void JointState::SharedCtor() {
world_to_local_ = nullptr;
}

JointState::~JointState() {
  // @@protoc_insertion_point(destructor:v1.model.JointState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void JointState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete world_to_local_;
}

void JointState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void JointState::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.JointState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.Clear();
  position_.Clear();
  velocity_.Clear();
  effort_.Clear();
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JointState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_name();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "v1.model.JointState.name"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated double position = 2 [json_name = "position"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_position(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_position(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double velocity = 3 [json_name = "velocity"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_velocity(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 25) {
          _internal_add_velocity(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double effort = 4 [json_name = "effort"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_effort(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 33) {
          _internal_add_effort(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JointState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.JointState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string name = 1 [json_name = "name"];
  for (int i = 0, n = this->_internal_name_size(); i < n; i++) {
    const auto& s = this->_internal_name(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.JointState.name");
    target = stream->WriteString(1, s, target);
  }

  // repeated double position = 2 [json_name = "position"];
  if (this->_internal_position_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_position(), target);
  }

  // repeated double velocity = 3 [json_name = "velocity"];
  if (this->_internal_velocity_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_velocity(), target);
  }

  // repeated double effort = 4 [json_name = "effort"];
  if (this->_internal_effort_size() > 0) {
    target = stream->WriteFixedPacked(4, _internal_effort(), target);
  }

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.JointState)
  return target;
}

size_t JointState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.JointState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string name = 1 [json_name = "name"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(name_.size());
  for (int i = 0, n = name_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      name_.Get(i));
  }

  // repeated double position = 2 [json_name = "position"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_position_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double velocity = 3 [json_name = "velocity"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_velocity_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double effort = 4 [json_name = "effort"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_effort_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .v1.model.Transform world_to_local = 5 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JointState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    JointState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JointState::GetClassData() const { return &_class_data_; }

void JointState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<JointState *>(to)->MergeFrom(
      static_cast<const JointState &>(from));
}


void JointState::MergeFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.JointState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  name_.MergeFrom(from.name_);
  position_.MergeFrom(from.position_);
  velocity_.MergeFrom(from.velocity_);
  effort_.MergeFrom(from.effort_);
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JointState::CopyFrom(const JointState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.JointState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointState::IsInitialized() const {
  return true;
}

void JointState::InternalSwap(JointState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  name_.InternalSwap(&other->name_);
  position_.InternalSwap(&other->position_);
  velocity_.InternalSwap(&other->velocity_);
  effort_.InternalSwap(&other->effort_);
  swap(world_to_local_, other->world_to_local_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JointState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[6]);
}

// ===================================================================

class Goal::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const Goal* msg);
  static const ::v1::model::Transform& pose(const Goal* msg);
};

const ::v1::model::Transform&
Goal::_Internal::world_to_local(const Goal* msg) {
  return *msg->world_to_local_;
}
const ::v1::model::Transform&
Goal::_Internal::pose(const Goal* msg) {
  return *msg->pose_;
}
void Goal::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
void Goal::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
Goal::Goal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Goal)
}
Goal::Goal(const Goal& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::v1::model::Transform(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Goal)
}

inline void Goal::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&world_to_local_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pose_) -
    reinterpret_cast<char*>(&world_to_local_)) + sizeof(pose_));
}

Goal::~Goal() {
  // @@protoc_insertion_point(destructor:v1.model.Goal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Goal::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete world_to_local_;
  if (this != internal_default_instance()) delete pose_;
}

void Goal::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Goal::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Goal)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Goal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform pose = 2 [json_name = "pose"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Goal::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Goal)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Transform pose = 2 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Goal)
  return target;
}

size_t Goal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Goal)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  // .v1.model.Transform pose = 2 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Goal::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Goal::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Goal::GetClassData() const { return &_class_data_; }

void Goal::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Goal *>(to)->MergeFrom(
      static_cast<const Goal &>(from));
}


void Goal::MergeFrom(const Goal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Goal)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Goal::CopyFrom(const Goal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Goal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Goal::IsInitialized() const {
  return true;
}

void Goal::InternalSwap(Goal* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Goal, pose_)
      + sizeof(Goal::pose_)
      - PROTOBUF_FIELD_OFFSET(Goal, world_to_local_)>(
          reinterpret_cast<char*>(&world_to_local_),
          reinterpret_cast<char*>(&other->world_to_local_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Goal::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[7]);
}

// ===================================================================

class GoalID::_Internal {
 public:
};

GoalID::GoalID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.GoalID)
}
GoalID::GoalID(const GoalID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.GoalID)
}

inline void GoalID::SharedCtor() {
id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GoalID::~GoalID() {
  // @@protoc_insertion_point(destructor:v1.model.GoalID)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GoalID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.Destroy();
}

void GoalID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GoalID::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.GoalID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GoalID::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.GoalID.id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GoalID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.GoalID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.GoalID.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.GoalID)
  return target;
}

size_t GoalID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.GoalID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GoalID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GoalID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GoalID::GetClassData() const { return &_class_data_; }

void GoalID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GoalID *>(to)->MergeFrom(
      static_cast<const GoalID &>(from));
}


void GoalID::MergeFrom(const GoalID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.GoalID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GoalID::CopyFrom(const GoalID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.GoalID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoalID::IsInitialized() const {
  return true;
}

void GoalID::InternalSwap(GoalID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GoalID::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[8]);
}

// ===================================================================

class PoseWithCovariance::_Internal {
 public:
  static const ::v1::model::Transform& pose(const PoseWithCovariance* msg);
};

const ::v1::model::Transform&
PoseWithCovariance::_Internal::pose(const PoseWithCovariance* msg) {
  return *msg->pose_;
}
void PoseWithCovariance::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
PoseWithCovariance::PoseWithCovariance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  covariance_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.PoseWithCovariance)
}
PoseWithCovariance::PoseWithCovariance(const PoseWithCovariance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      covariance_(from.covariance_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pose()) {
    pose_ = new ::v1::model::Transform(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.PoseWithCovariance)
}

inline void PoseWithCovariance::SharedCtor() {
pose_ = nullptr;
}

PoseWithCovariance::~PoseWithCovariance() {
  // @@protoc_insertion_point(destructor:v1.model.PoseWithCovariance)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseWithCovariance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete pose_;
}

void PoseWithCovariance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseWithCovariance::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.PoseWithCovariance)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  covariance_.Clear();
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseWithCovariance::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Transform pose = 1 [json_name = "pose"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated double covariance = 2 [json_name = "covariance"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_covariance(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_covariance(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseWithCovariance::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.PoseWithCovariance)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // repeated double covariance = 2 [json_name = "covariance"];
  if (this->_internal_covariance_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_covariance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.PoseWithCovariance)
  return target;
}

size_t PoseWithCovariance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.PoseWithCovariance)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double covariance = 2 [json_name = "covariance"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_covariance_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // .v1.model.Transform pose = 1 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseWithCovariance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseWithCovariance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseWithCovariance::GetClassData() const { return &_class_data_; }

void PoseWithCovariance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseWithCovariance *>(to)->MergeFrom(
      static_cast<const PoseWithCovariance &>(from));
}


void PoseWithCovariance::MergeFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.PoseWithCovariance)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  covariance_.MergeFrom(from.covariance_);
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseWithCovariance::CopyFrom(const PoseWithCovariance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.PoseWithCovariance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseWithCovariance::IsInitialized() const {
  return true;
}

void PoseWithCovariance::InternalSwap(PoseWithCovariance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  covariance_.InternalSwap(&other->covariance_);
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseWithCovariance::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[9]);
}

// ===================================================================

class ColorRGBA::_Internal {
 public:
};

ColorRGBA::ColorRGBA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.ColorRGBA)
}
ColorRGBA::ColorRGBA(const ColorRGBA& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
  // @@protoc_insertion_point(copy_constructor:v1.model.ColorRGBA)
}

inline void ColorRGBA::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&r_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&a_) -
    reinterpret_cast<char*>(&r_)) + sizeof(a_));
}

ColorRGBA::~ColorRGBA() {
  // @@protoc_insertion_point(destructor:v1.model.ColorRGBA)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ColorRGBA::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ColorRGBA::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ColorRGBA::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ColorRGBA)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&a_) -
      reinterpret_cast<char*>(&r_)) + sizeof(a_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ColorRGBA::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float r = 1 [json_name = "r"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float g = 2 [json_name = "g"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          g_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float b = 3 [json_name = "b"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float a = 4 [json_name = "a"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ColorRGBA::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ColorRGBA)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1 [json_name = "r"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_r(), target);
  }

  // float g = 2 [json_name = "g"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_g(), target);
  }

  // float b = 3 [json_name = "b"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_b(), target);
  }

  // float a = 4 [json_name = "a"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_a(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ColorRGBA)
  return target;
}

size_t ColorRGBA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ColorRGBA)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float r = 1 [json_name = "r"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = this->_internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    total_size += 1 + 4;
  }

  // float g = 2 [json_name = "g"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = this->_internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    total_size += 1 + 4;
  }

  // float b = 3 [json_name = "b"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = this->_internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    total_size += 1 + 4;
  }

  // float a = 4 [json_name = "a"];
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = this->_internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ColorRGBA::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ColorRGBA::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ColorRGBA::GetClassData() const { return &_class_data_; }

void ColorRGBA::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ColorRGBA *>(to)->MergeFrom(
      static_cast<const ColorRGBA &>(from));
}


void ColorRGBA::MergeFrom(const ColorRGBA& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ColorRGBA)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_r = from._internal_r();
  uint32_t raw_r;
  memcpy(&raw_r, &tmp_r, sizeof(tmp_r));
  if (raw_r != 0) {
    _internal_set_r(from._internal_r());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_g = from._internal_g();
  uint32_t raw_g;
  memcpy(&raw_g, &tmp_g, sizeof(tmp_g));
  if (raw_g != 0) {
    _internal_set_g(from._internal_g());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_b = from._internal_b();
  uint32_t raw_b;
  memcpy(&raw_b, &tmp_b, sizeof(tmp_b));
  if (raw_b != 0) {
    _internal_set_b(from._internal_b());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_a = from._internal_a();
  uint32_t raw_a;
  memcpy(&raw_a, &tmp_a, sizeof(tmp_a));
  if (raw_a != 0) {
    _internal_set_a(from._internal_a());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ColorRGBA::CopyFrom(const ColorRGBA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ColorRGBA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColorRGBA::IsInitialized() const {
  return true;
}

void ColorRGBA::InternalSwap(ColorRGBA* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ColorRGBA, a_)
      + sizeof(ColorRGBA::a_)
      - PROTOBUF_FIELD_OFFSET(ColorRGBA, r_)>(
          reinterpret_cast<char*>(&r_),
          reinterpret_cast<char*>(&other->r_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ColorRGBA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[10]);
}

// ===================================================================

class Marker3D::_Internal {
 public:
  static const ::v1::model::Transform& world_to_local(const Marker3D* msg);
  static const ::v1::model::Transform& pose(const Marker3D* msg);
  static const ::v1::model::Vector3& scale(const Marker3D* msg);
  static const ::v1::model::ColorRGBA& color(const Marker3D* msg);
};

const ::v1::model::Transform&
Marker3D::_Internal::world_to_local(const Marker3D* msg) {
  return *msg->world_to_local_;
}
const ::v1::model::Transform&
Marker3D::_Internal::pose(const Marker3D* msg) {
  return *msg->pose_;
}
const ::v1::model::Vector3&
Marker3D::_Internal::scale(const Marker3D* msg) {
  return *msg->scale_;
}
const ::v1::model::ColorRGBA&
Marker3D::_Internal::color(const Marker3D* msg) {
  return *msg->color_;
}
void Marker3D::clear_world_to_local() {
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
}
void Marker3D::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
void Marker3D::clear_scale() {
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
}
void Marker3D::clear_points() {
  points_.Clear();
}
Marker3D::Marker3D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  points_(arena),
  colors_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Marker3D)
}
Marker3D::Marker3D(const Marker3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      points_(from.points_),
      colors_(from.colors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ns_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ns_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ns().empty()) {
    ns_.Set(from._internal_ns(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  action_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    action_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_action().empty()) {
    action_.Set(from._internal_action(), 
      GetArenaForAllocation());
  }
  text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    text_.Set(from._internal_text(), 
      GetArenaForAllocation());
  }
  mesh_resource_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mesh_resource_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mesh_resource().empty()) {
    mesh_resource_.Set(from._internal_mesh_resource(), 
      GetArenaForAllocation());
  }
  frame_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_id().empty()) {
    frame_id_.Set(from._internal_frame_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_world_to_local()) {
    world_to_local_ = new ::v1::model::Transform(*from.world_to_local_);
  } else {
    world_to_local_ = nullptr;
  }
  if (from._internal_has_pose()) {
    pose_ = new ::v1::model::Transform(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  if (from._internal_has_scale()) {
    scale_ = new ::v1::model::Vector3(*from.scale_);
  } else {
    scale_ = nullptr;
  }
  if (from._internal_has_color()) {
    color_ = new ::v1::model::ColorRGBA(*from.color_);
  } else {
    color_ = nullptr;
  }
  ::memcpy(&lifetime_, &from.lifetime_,
    static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
    reinterpret_cast<char*>(&lifetime_)) + sizeof(mesh_use_embedded_materials_));
  // @@protoc_insertion_point(copy_constructor:v1.model.Marker3D)
}

inline void Marker3D::SharedCtor() {
ns_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ns_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
action_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  action_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
text_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  text_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mesh_resource_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mesh_resource_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
frame_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&world_to_local_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
    reinterpret_cast<char*>(&world_to_local_)) + sizeof(mesh_use_embedded_materials_));
}

Marker3D::~Marker3D() {
  // @@protoc_insertion_point(destructor:v1.model.Marker3D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Marker3D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ns_.Destroy();
  type_.Destroy();
  action_.Destroy();
  text_.Destroy();
  mesh_resource_.Destroy();
  frame_id_.Destroy();
  if (this != internal_default_instance()) delete world_to_local_;
  if (this != internal_default_instance()) delete pose_;
  if (this != internal_default_instance()) delete scale_;
  if (this != internal_default_instance()) delete color_;
}

void Marker3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Marker3D::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Marker3D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  colors_.Clear();
  ns_.ClearToEmpty();
  type_.ClearToEmpty();
  action_.ClearToEmpty();
  text_.ClearToEmpty();
  mesh_resource_.ClearToEmpty();
  frame_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && world_to_local_ != nullptr) {
    delete world_to_local_;
  }
  world_to_local_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scale_ != nullptr) {
    delete scale_;
  }
  scale_ = nullptr;
  if (GetArenaForAllocation() == nullptr && color_ != nullptr) {
    delete color_;
  }
  color_ = nullptr;
  ::memset(&lifetime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mesh_use_embedded_materials_) -
      reinterpret_cast<char*>(&lifetime_)) + sizeof(mesh_use_embedded_materials_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker3D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_world_to_local(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ns = 2 [json_name = "ns"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ns();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.ns"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3 [json_name = "id"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 4 [json_name = "type"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.type"));
        } else
          goto handle_unusual;
        continue;
      // string action = 5 [json_name = "action"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_action();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.action"));
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Transform pose = 6 [json_name = "pose"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.Vector3 scale = 7 [json_name = "scale"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_scale(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .v1.model.ColorRGBA color = 8 [json_name = "color"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double lifetime = 9 [json_name = "lifetime"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 73)) {
          lifetime_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // bool frame_locked = 10 [json_name = "frameLocked"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          frame_locked_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.Vector3 points = 11 [json_name = "points"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .v1.model.ColorRGBA colors = 12 [json_name = "colors"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_colors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string text = 13 [json_name = "text"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.text"));
        } else
          goto handle_unusual;
        continue;
      // string mesh_resource = 14 [json_name = "meshResource"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_mesh_resource();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.mesh_resource"));
        } else
          goto handle_unusual;
        continue;
      // bool mesh_use_embedded_materials = 15 [json_name = "meshUseEmbeddedMaterials"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          mesh_use_embedded_materials_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_id = 16 [json_name = "frameId"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_frame_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "v1.model.Marker3D.frame_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker3D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Marker3D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::world_to_local(this),
        _Internal::world_to_local(this).GetCachedSize(), target, stream);
  }

  // string ns = 2 [json_name = "ns"];
  if (!this->_internal_ns().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ns().data(), static_cast<int>(this->_internal_ns().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.ns");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ns(), target);
  }

  // int32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // string type = 4 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // string action = 5 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.action");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_action(), target);
  }

  // .v1.model.Transform pose = 6 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .v1.model.Vector3 scale = 7 [json_name = "scale"];
  if (this->_internal_has_scale()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::scale(this),
        _Internal::scale(this).GetCachedSize(), target, stream);
  }

  // .v1.model.ColorRGBA color = 8 [json_name = "color"];
  if (this->_internal_has_color()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::color(this),
        _Internal::color(this).GetCachedSize(), target, stream);
  }

  // double lifetime = 9 [json_name = "lifetime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lifetime = this->_internal_lifetime();
  uint64_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(9, this->_internal_lifetime(), target);
  }

  // bool frame_locked = 10 [json_name = "frameLocked"];
  if (this->_internal_frame_locked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_frame_locked(), target);
  }

  // repeated .v1.model.Vector3 points = 11 [json_name = "points"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .v1.model.ColorRGBA colors = 12 [json_name = "colors"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_colors_size()); i < n; i++) {
    const auto& repfield = this->_internal_colors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string text = 13 [json_name = "text"];
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.text");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_text(), target);
  }

  // string mesh_resource = 14 [json_name = "meshResource"];
  if (!this->_internal_mesh_resource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mesh_resource().data(), static_cast<int>(this->_internal_mesh_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.mesh_resource");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_mesh_resource(), target);
  }

  // bool mesh_use_embedded_materials = 15 [json_name = "meshUseEmbeddedMaterials"];
  if (this->_internal_mesh_use_embedded_materials() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(15, this->_internal_mesh_use_embedded_materials(), target);
  }

  // string frame_id = 16 [json_name = "frameId"];
  if (!this->_internal_frame_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_id().data(), static_cast<int>(this->_internal_frame_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Marker3D.frame_id");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Marker3D)
  return target;
}

size_t Marker3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Marker3D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Vector3 points = 11 [json_name = "points"];
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .v1.model.ColorRGBA colors = 12 [json_name = "colors"];
  total_size += 1UL * this->_internal_colors_size();
  for (const auto& msg : this->colors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string ns = 2 [json_name = "ns"];
  if (!this->_internal_ns().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ns());
  }

  // string type = 4 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string action = 5 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string text = 13 [json_name = "text"];
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // string mesh_resource = 14 [json_name = "meshResource"];
  if (!this->_internal_mesh_resource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mesh_resource());
  }

  // string frame_id = 16 [json_name = "frameId"];
  if (!this->_internal_frame_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_id());
  }

  // .v1.model.Transform world_to_local = 1 [json_name = "worldToLocal"];
  if (this->_internal_has_world_to_local()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *world_to_local_);
  }

  // .v1.model.Transform pose = 6 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  // .v1.model.Vector3 scale = 7 [json_name = "scale"];
  if (this->_internal_has_scale()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scale_);
  }

  // .v1.model.ColorRGBA color = 8 [json_name = "color"];
  if (this->_internal_has_color()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *color_);
  }

  // double lifetime = 9 [json_name = "lifetime"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lifetime = this->_internal_lifetime();
  uint64_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 3 [json_name = "id"];
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool frame_locked = 10 [json_name = "frameLocked"];
  if (this->_internal_frame_locked() != 0) {
    total_size += 1 + 1;
  }

  // bool mesh_use_embedded_materials = 15 [json_name = "meshUseEmbeddedMaterials"];
  if (this->_internal_mesh_use_embedded_materials() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker3D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Marker3D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker3D::GetClassData() const { return &_class_data_; }

void Marker3D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Marker3D *>(to)->MergeFrom(
      static_cast<const Marker3D &>(from));
}


void Marker3D::MergeFrom(const Marker3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Marker3D)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  colors_.MergeFrom(from.colors_);
  if (!from._internal_ns().empty()) {
    _internal_set_ns(from._internal_ns());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from._internal_text().empty()) {
    _internal_set_text(from._internal_text());
  }
  if (!from._internal_mesh_resource().empty()) {
    _internal_set_mesh_resource(from._internal_mesh_resource());
  }
  if (!from._internal_frame_id().empty()) {
    _internal_set_frame_id(from._internal_frame_id());
  }
  if (from._internal_has_world_to_local()) {
    _internal_mutable_world_to_local()->::v1::model::Transform::MergeFrom(from._internal_world_to_local());
  }
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
  }
  if (from._internal_has_scale()) {
    _internal_mutable_scale()->::v1::model::Vector3::MergeFrom(from._internal_scale());
  }
  if (from._internal_has_color()) {
    _internal_mutable_color()->::v1::model::ColorRGBA::MergeFrom(from._internal_color());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lifetime = from._internal_lifetime();
  uint64_t raw_lifetime;
  memcpy(&raw_lifetime, &tmp_lifetime, sizeof(tmp_lifetime));
  if (raw_lifetime != 0) {
    _internal_set_lifetime(from._internal_lifetime());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_frame_locked() != 0) {
    _internal_set_frame_locked(from._internal_frame_locked());
  }
  if (from._internal_mesh_use_embedded_materials() != 0) {
    _internal_set_mesh_use_embedded_materials(from._internal_mesh_use_embedded_materials());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker3D::CopyFrom(const Marker3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Marker3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker3D::IsInitialized() const {
  return true;
}

void Marker3D::InternalSwap(Marker3D* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  points_.InternalSwap(&other->points_);
  colors_.InternalSwap(&other->colors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &ns_, lhs_arena,
      &other->ns_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &action_, lhs_arena,
      &other->action_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &text_, lhs_arena,
      &other->text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mesh_resource_, lhs_arena,
      &other->mesh_resource_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_id_, lhs_arena,
      &other->frame_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Marker3D, mesh_use_embedded_materials_)
      + sizeof(Marker3D::mesh_use_embedded_materials_)
      - PROTOBUF_FIELD_OFFSET(Marker3D, world_to_local_)>(
          reinterpret_cast<char*>(&world_to_local_),
          reinterpret_cast<char*>(&other->world_to_local_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker3D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[11]);
}

// ===================================================================

class Marker3DArray::_Internal {
 public:
};

Marker3DArray::Marker3DArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  markers_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:v1.model.Marker3DArray)
}
Marker3DArray::Marker3DArray(const Marker3DArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:v1.model.Marker3DArray)
}

inline void Marker3DArray::SharedCtor() {
}

Marker3DArray::~Marker3DArray() {
  // @@protoc_insertion_point(destructor:v1.model.Marker3DArray)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Marker3DArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Marker3DArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Marker3DArray::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Marker3DArray)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  markers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Marker3DArray::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .v1.model.Marker3D markers = 1 [json_name = "markers"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_markers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Marker3DArray::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Marker3DArray)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .v1.model.Marker3D markers = 1 [json_name = "markers"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_markers_size()); i < n; i++) {
    const auto& repfield = this->_internal_markers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Marker3DArray)
  return target;
}

size_t Marker3DArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Marker3DArray)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .v1.model.Marker3D markers = 1 [json_name = "markers"];
  total_size += 1UL * this->_internal_markers_size();
  for (const auto& msg : this->markers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Marker3DArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Marker3DArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Marker3DArray::GetClassData() const { return &_class_data_; }

void Marker3DArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Marker3DArray *>(to)->MergeFrom(
      static_cast<const Marker3DArray &>(from));
}


void Marker3DArray::MergeFrom(const Marker3DArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Marker3DArray)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  markers_.MergeFrom(from.markers_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Marker3DArray::CopyFrom(const Marker3DArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Marker3DArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Marker3DArray::IsInitialized() const {
  return true;
}

void Marker3DArray::InternalSwap(Marker3DArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  markers_.InternalSwap(&other->markers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Marker3DArray::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fnavigation_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Location*
Arena::CreateMaybeMessage< ::v1::model::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Localization*
Arena::CreateMaybeMessage< ::v1::model::Localization >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Localization >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Odometry*
Arena::CreateMaybeMessage< ::v1::model::Odometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Odometry >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Map*
Arena::CreateMaybeMessage< ::v1::model::Map >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Map >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::OccupancyGrid*
Arena::CreateMaybeMessage< ::v1::model::OccupancyGrid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::OccupancyGrid >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Path*
Arena::CreateMaybeMessage< ::v1::model::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Path >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::JointState*
Arena::CreateMaybeMessage< ::v1::model::JointState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::JointState >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Goal*
Arena::CreateMaybeMessage< ::v1::model::Goal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Goal >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::GoalID*
Arena::CreateMaybeMessage< ::v1::model::GoalID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::GoalID >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::PoseWithCovariance*
Arena::CreateMaybeMessage< ::v1::model::PoseWithCovariance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::PoseWithCovariance >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ColorRGBA*
Arena::CreateMaybeMessage< ::v1::model::ColorRGBA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ColorRGBA >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Marker3D*
Arena::CreateMaybeMessage< ::v1::model::Marker3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Marker3D >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Marker3DArray*
Arena::CreateMaybeMessage< ::v1::model::Marker3DArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Marker3DArray >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

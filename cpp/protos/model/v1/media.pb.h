// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/media.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmedia_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmedia_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/math.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fmedia_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto;
namespace v1 {
namespace model {
class AudioChunk;
struct AudioChunkDefaultTypeInternal;
extern AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
class H264VideoFrame;
struct H264VideoFrameDefaultTypeInternal;
extern H264VideoFrameDefaultTypeInternal _H264VideoFrame_default_instance_;
class Image;
struct ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
class PointCloud;
struct PointCloudDefaultTypeInternal;
extern PointCloudDefaultTypeInternal _PointCloud_default_instance_;
class RtcPointCloud;
struct RtcPointCloudDefaultTypeInternal;
extern RtcPointCloudDefaultTypeInternal _RtcPointCloud_default_instance_;
class TransformTree;
struct TransformTreeDefaultTypeInternal;
extern TransformTreeDefaultTypeInternal _TransformTree_default_instance_;
class Video;
struct VideoDefaultTypeInternal;
extern VideoDefaultTypeInternal _Video_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::AudioChunk* Arena::CreateMaybeMessage<::v1::model::AudioChunk>(Arena*);
template<> ::v1::model::H264VideoFrame* Arena::CreateMaybeMessage<::v1::model::H264VideoFrame>(Arena*);
template<> ::v1::model::Image* Arena::CreateMaybeMessage<::v1::model::Image>(Arena*);
template<> ::v1::model::PointCloud* Arena::CreateMaybeMessage<::v1::model::PointCloud>(Arena*);
template<> ::v1::model::RtcPointCloud* Arena::CreateMaybeMessage<::v1::model::RtcPointCloud>(Arena*);
template<> ::v1::model::TransformTree* Arena::CreateMaybeMessage<::v1::model::TransformTree>(Arena*);
template<> ::v1::model::Video* Arena::CreateMaybeMessage<::v1::model::Video>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

// ===================================================================

class Image final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Image) */ {
 public:
  inline Image() : Image(nullptr) {}
  ~Image() override;
  explicit PROTOBUF_CONSTEXPR Image(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Image(const Image& from);
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  inline Image& operator=(Image&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Image& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUrl = 2,
    kRaw = 3,
    DATA_NOT_SET = 0,
  };

  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }
  inline void Swap(Image* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Image* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Image* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Image& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Image& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Image";
  }
  protected:
  explicit Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentTypeFieldNumber = 1,
    kUrlFieldNumber = 2,
    kRawFieldNumber = 3,
  };
  // string content_type = 1 [json_name = "contentType"];
  void clear_content_type();
  const std::string& content_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content_type();
  PROTOBUF_NODISCARD std::string* release_content_type();
  void set_allocated_content_type(std::string* content_type);
  private:
  const std::string& _internal_content_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content_type(const std::string& value);
  std::string* _internal_mutable_content_type();
  public:

  // string url = 2 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 3 [json_name = "raw"];
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.Image)
 private:
  class _Internal;
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_type_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class PointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.PointCloud) */ {
 public:
  inline PointCloud() : PointCloud(nullptr) {}
  ~PointCloud() override;
  explicit PROTOBUF_CONSTEXPR PointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloud(const PointCloud& from);
  PointCloud(PointCloud&& from) noexcept
    : PointCloud() {
    *this = ::std::move(from);
  }

  inline PointCloud& operator=(const PointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloud& operator=(PointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloud& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUrl = 1,
    kRaw = 2,
    DATA_NOT_SET = 0,
  };

  static inline const PointCloud* internal_default_instance() {
    return reinterpret_cast<const PointCloud*>(
               &_PointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PointCloud& a, PointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloud>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloud& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointCloud& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.PointCloud";
  }
  protected:
  explicit PointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldToLocalFieldNumber = 3,
    kUrlFieldNumber = 1,
    kRawFieldNumber = 2,
  };
  // .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_NODISCARD ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // string url = 1 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 2 [json_name = "raw"];
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.PointCloud)
 private:
  class _Internal;
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Transform* world_to_local_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class RtcPointCloud final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.RtcPointCloud) */ {
 public:
  inline RtcPointCloud() : RtcPointCloud(nullptr) {}
  ~RtcPointCloud() override;
  explicit PROTOBUF_CONSTEXPR RtcPointCloud(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RtcPointCloud(const RtcPointCloud& from);
  RtcPointCloud(RtcPointCloud&& from) noexcept
    : RtcPointCloud() {
    *this = ::std::move(from);
  }

  inline RtcPointCloud& operator=(const RtcPointCloud& from) {
    CopyFrom(from);
    return *this;
  }
  inline RtcPointCloud& operator=(RtcPointCloud&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RtcPointCloud& default_instance() {
    return *internal_default_instance();
  }
  static inline const RtcPointCloud* internal_default_instance() {
    return reinterpret_cast<const RtcPointCloud*>(
               &_RtcPointCloud_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RtcPointCloud& a, RtcPointCloud& b) {
    a.Swap(&b);
  }
  inline void Swap(RtcPointCloud* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RtcPointCloud* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RtcPointCloud* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RtcPointCloud>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RtcPointCloud& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RtcPointCloud& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RtcPointCloud* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.RtcPointCloud";
  }
  protected:
  explicit RtcPointCloud(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kWorldToLocalFieldNumber = 2,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // .v1.model.Transform world_to_local = 2 [json_name = "worldToLocal"];
  bool has_world_to_local() const;
  private:
  bool _internal_has_world_to_local() const;
  public:
  void clear_world_to_local();
  const ::v1::model::Transform& world_to_local() const;
  PROTOBUF_NODISCARD ::v1::model::Transform* release_world_to_local();
  ::v1::model::Transform* mutable_world_to_local();
  void set_allocated_world_to_local(::v1::model::Transform* world_to_local);
  private:
  const ::v1::model::Transform& _internal_world_to_local() const;
  ::v1::model::Transform* _internal_mutable_world_to_local();
  public:
  void unsafe_arena_set_allocated_world_to_local(
      ::v1::model::Transform* world_to_local);
  ::v1::model::Transform* unsafe_arena_release_world_to_local();

  // @@protoc_insertion_point(class_scope:v1.model.RtcPointCloud)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::v1::model::Transform* world_to_local_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class H264VideoFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.H264VideoFrame) */ {
 public:
  inline H264VideoFrame() : H264VideoFrame(nullptr) {}
  ~H264VideoFrame() override;
  explicit PROTOBUF_CONSTEXPR H264VideoFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  H264VideoFrame(const H264VideoFrame& from);
  H264VideoFrame(H264VideoFrame&& from) noexcept
    : H264VideoFrame() {
    *this = ::std::move(from);
  }

  inline H264VideoFrame& operator=(const H264VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline H264VideoFrame& operator=(H264VideoFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const H264VideoFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const H264VideoFrame* internal_default_instance() {
    return reinterpret_cast<const H264VideoFrame*>(
               &_H264VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(H264VideoFrame& a, H264VideoFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(H264VideoFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(H264VideoFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  H264VideoFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<H264VideoFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const H264VideoFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const H264VideoFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(H264VideoFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.H264VideoFrame";
  }
  protected:
  explicit H264VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameDataFieldNumber = 3,
    kIndexFieldNumber = 1,
    kFlagsFieldNumber = 2,
  };
  // bytes frame_data = 3 [json_name = "frameData"];
  void clear_frame_data();
  const std::string& frame_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_data();
  PROTOBUF_NODISCARD std::string* release_frame_data();
  void set_allocated_frame_data(std::string* frame_data);
  private:
  const std::string& _internal_frame_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_data(const std::string& value);
  std::string* _internal_mutable_frame_data();
  public:

  // int32 index = 1 [json_name = "index"];
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // int32 flags = 2 [json_name = "flags"];
  void clear_flags();
  int32_t flags() const;
  void set_flags(int32_t value);
  private:
  int32_t _internal_flags() const;
  void _internal_set_flags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.H264VideoFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_data_;
  int32_t index_;
  int32_t flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class AudioChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.AudioChunk) */ {
 public:
  inline AudioChunk() : AudioChunk(nullptr) {}
  ~AudioChunk() override;
  explicit PROTOBUF_CONSTEXPR AudioChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioChunk(const AudioChunk& from);
  AudioChunk(AudioChunk&& from) noexcept
    : AudioChunk() {
    *this = ::std::move(from);
  }

  inline AudioChunk& operator=(const AudioChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioChunk& operator=(AudioChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioChunk* internal_default_instance() {
    return reinterpret_cast<const AudioChunk*>(
               &_AudioChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AudioChunk& a, AudioChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.AudioChunk";
  }
  protected:
  explicit AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 2,
    kChunkDataFieldNumber = 3,
    kIndexFieldNumber = 1,
  };
  // string format = 2 [json_name = "format"];
  void clear_format();
  const std::string& format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_format();
  PROTOBUF_NODISCARD std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // bytes chunk_data = 3 [json_name = "chunkData"];
  void clear_chunk_data();
  const std::string& chunk_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chunk_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chunk_data();
  PROTOBUF_NODISCARD std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* chunk_data);
  private:
  const std::string& _internal_chunk_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_data(const std::string& value);
  std::string* _internal_mutable_chunk_data();
  public:

  // int32 index = 1 [json_name = "index"];
  void clear_index();
  int32_t index() const;
  void set_index(int32_t value);
  private:
  int32_t _internal_index() const;
  void _internal_set_index(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.AudioChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chunk_data_;
  int32_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class Video final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Video) */ {
 public:
  inline Video() : Video(nullptr) {}
  ~Video() override;
  explicit PROTOBUF_CONSTEXPR Video(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Video(const Video& from);
  Video(Video&& from) noexcept
    : Video() {
    *this = ::std::move(from);
  }

  inline Video& operator=(const Video& from) {
    CopyFrom(from);
    return *this;
  }
  inline Video& operator=(Video&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Video& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUrl = 3,
    kRaw = 4,
    DATA_NOT_SET = 0,
  };

  static inline const Video* internal_default_instance() {
    return reinterpret_cast<const Video*>(
               &_Video_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Video& a, Video& b) {
    a.Swap(&b);
  }
  inline void Swap(Video* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Video* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Video* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Video>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Video& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Video& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Video* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Video";
  }
  protected:
  explicit Video(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kDurationFieldNumber = 2,
    kUrlFieldNumber = 3,
    kRawFieldNumber = 4,
  };
  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // int64 duration = 2 [json_name = "duration"];
  void clear_duration();
  int64_t duration() const;
  void set_duration(int64_t value);
  private:
  int64_t _internal_duration() const;
  void _internal_set_duration(int64_t value);
  public:

  // string url = 3 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 4 [json_name = "raw"];
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.Video)
 private:
  class _Internal;
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  int64_t duration_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// -------------------------------------------------------------------

class TransformTree final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.TransformTree) */ {
 public:
  inline TransformTree() : TransformTree(nullptr) {}
  ~TransformTree() override;
  explicit PROTOBUF_CONSTEXPR TransformTree(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TransformTree(const TransformTree& from);
  TransformTree(TransformTree&& from) noexcept
    : TransformTree() {
    *this = ::std::move(from);
  }

  inline TransformTree& operator=(const TransformTree& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransformTree& operator=(TransformTree&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TransformTree& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kUrl = 1,
    kRaw = 2,
    DATA_NOT_SET = 0,
  };

  static inline const TransformTree* internal_default_instance() {
    return reinterpret_cast<const TransformTree*>(
               &_TransformTree_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TransformTree& a, TransformTree& b) {
    a.Swap(&b);
  }
  inline void Swap(TransformTree* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransformTree* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TransformTree* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TransformTree>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TransformTree& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TransformTree& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransformTree* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.TransformTree";
  }
  protected:
  explicit TransformTree(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUrlFieldNumber = 1,
    kRawFieldNumber = 2,
  };
  // string url = 1 [json_name = "url"];
  bool has_url() const;
  private:
  bool _internal_has_url() const;
  public:
  void clear_url();
  const std::string& url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_url();
  PROTOBUF_NODISCARD std::string* release_url();
  void set_allocated_url(std::string* url);
  private:
  const std::string& _internal_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_url(const std::string& value);
  std::string* _internal_mutable_url();
  public:

  // bytes raw = 2 [json_name = "raw"];
  bool has_raw() const;
  private:
  bool _internal_has_raw() const;
  public:
  void clear_raw();
  const std::string& raw() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw();
  PROTOBUF_NODISCARD std::string* release_raw();
  void set_allocated_raw(std::string* raw);
  private:
  const std::string& _internal_raw() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw(const std::string& value);
  std::string* _internal_mutable_raw();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.TransformTree)
 private:
  class _Internal;
  void set_has_url();
  void set_has_raw();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fmedia_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// string content_type = 1 [json_name = "contentType"];
inline void Image::clear_content_type() {
  content_type_.ClearToEmpty();
}
inline const std::string& Image::content_type() const {
  // @@protoc_insertion_point(field_get:v1.model.Image.content_type)
  return _internal_content_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Image::set_content_type(ArgT0&& arg0, ArgT... args) {
 
 content_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Image.content_type)
}
inline std::string* Image::mutable_content_type() {
  std::string* _s = _internal_mutable_content_type();
  // @@protoc_insertion_point(field_mutable:v1.model.Image.content_type)
  return _s;
}
inline const std::string& Image::_internal_content_type() const {
  return content_type_.Get();
}
inline void Image::_internal_set_content_type(const std::string& value) {
  
  content_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_content_type() {
  
  return content_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Image::release_content_type() {
  // @@protoc_insertion_point(field_release:v1.model.Image.content_type)
  return content_type_.Release();
}
inline void Image::set_allocated_content_type(std::string* content_type) {
  if (content_type != nullptr) {
    
  } else {
    
  }
  content_type_.SetAllocated(content_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_type_.IsDefault()) {
    content_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.Image.content_type)
}

// string url = 2 [json_name = "url"];
inline bool Image::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool Image::has_url() const {
  return _internal_has_url();
}
inline void Image::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Image::clear_url() {
  if (_internal_has_url()) {
    data_.url_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Image::url() const {
  // @@protoc_insertion_point(field_get:v1.model.Image.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void Image::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Image.url)
}
inline std::string* Image::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v1.model.Image.url)
  return _s;
}
inline const std::string& Image::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Image::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  return data_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* Image::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.Image.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void Image::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Image.url)
}

// bytes raw = 3 [json_name = "raw"];
inline bool Image::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool Image::has_raw() const {
  return _internal_has_raw();
}
inline void Image::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Image::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Image::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.Image.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void Image::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Image.raw)
}
inline std::string* Image::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:v1.model.Image.raw)
  return _s;
}
inline const std::string& Image::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Image::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* Image::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  return data_.raw_.Mutable(      GetArenaForAllocation());
}
inline std::string* Image::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.Image.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.Release();
  } else {
    return nullptr;
  }
}
inline void Image::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.InitAllocated(raw, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Image.raw)
}

inline bool Image::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Image::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Image::DataCase Image::data_case() const {
  return Image::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PointCloud

// string url = 1 [json_name = "url"];
inline bool PointCloud::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool PointCloud::has_url() const {
  return _internal_has_url();
}
inline void PointCloud::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void PointCloud::clear_url() {
  if (_internal_has_url()) {
    data_.url_.Destroy();
    clear_has_data();
  }
}
inline const std::string& PointCloud::url() const {
  // @@protoc_insertion_point(field_get:v1.model.PointCloud.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void PointCloud::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.PointCloud.url)
}
inline std::string* PointCloud::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v1.model.PointCloud.url)
  return _s;
}
inline const std::string& PointCloud::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PointCloud::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* PointCloud::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  return data_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* PointCloud::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.PointCloud.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void PointCloud::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.PointCloud.url)
}

// bytes raw = 2 [json_name = "raw"];
inline bool PointCloud::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool PointCloud::has_raw() const {
  return _internal_has_raw();
}
inline void PointCloud::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void PointCloud::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy();
    clear_has_data();
  }
}
inline const std::string& PointCloud::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.PointCloud.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void PointCloud::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.PointCloud.raw)
}
inline std::string* PointCloud::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:v1.model.PointCloud.raw)
  return _s;
}
inline const std::string& PointCloud::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void PointCloud::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* PointCloud::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  return data_.raw_.Mutable(      GetArenaForAllocation());
}
inline std::string* PointCloud::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.PointCloud.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.Release();
  } else {
    return nullptr;
  }
}
inline void PointCloud::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.InitAllocated(raw, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.PointCloud.raw)
}

// .v1.model.Transform world_to_local = 3 [json_name = "worldToLocal"];
inline bool PointCloud::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool PointCloud::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& PointCloud::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& PointCloud::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.PointCloud.world_to_local)
  return _internal_world_to_local();
}
inline void PointCloud::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.PointCloud.world_to_local)
}
inline ::v1::model::Transform* PointCloud::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v1::model::Transform* PointCloud::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.PointCloud.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* PointCloud::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* PointCloud::mutable_world_to_local() {
  ::v1::model::Transform* _msg = _internal_mutable_world_to_local();
  // @@protoc_insertion_point(field_mutable:v1.model.PointCloud.world_to_local)
  return _msg;
}
inline void PointCloud::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.PointCloud.world_to_local)
}

inline bool PointCloud::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void PointCloud::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline PointCloud::DataCase PointCloud::data_case() const {
  return PointCloud::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// RtcPointCloud

// bytes data = 1 [json_name = "data"];
inline void RtcPointCloud::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RtcPointCloud::data() const {
  // @@protoc_insertion_point(field_get:v1.model.RtcPointCloud.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RtcPointCloud::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.RtcPointCloud.data)
}
inline std::string* RtcPointCloud::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:v1.model.RtcPointCloud.data)
  return _s;
}
inline const std::string& RtcPointCloud::_internal_data() const {
  return data_.Get();
}
inline void RtcPointCloud::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* RtcPointCloud::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* RtcPointCloud::release_data() {
  // @@protoc_insertion_point(field_release:v1.model.RtcPointCloud.data)
  return data_.Release();
}
inline void RtcPointCloud::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.RtcPointCloud.data)
}

// .v1.model.Transform world_to_local = 2 [json_name = "worldToLocal"];
inline bool RtcPointCloud::_internal_has_world_to_local() const {
  return this != internal_default_instance() && world_to_local_ != nullptr;
}
inline bool RtcPointCloud::has_world_to_local() const {
  return _internal_has_world_to_local();
}
inline const ::v1::model::Transform& RtcPointCloud::_internal_world_to_local() const {
  const ::v1::model::Transform* p = world_to_local_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Transform&>(
      ::v1::model::_Transform_default_instance_);
}
inline const ::v1::model::Transform& RtcPointCloud::world_to_local() const {
  // @@protoc_insertion_point(field_get:v1.model.RtcPointCloud.world_to_local)
  return _internal_world_to_local();
}
inline void RtcPointCloud::unsafe_arena_set_allocated_world_to_local(
    ::v1::model::Transform* world_to_local) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  world_to_local_ = world_to_local;
  if (world_to_local) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.model.RtcPointCloud.world_to_local)
}
inline ::v1::model::Transform* RtcPointCloud::release_world_to_local() {
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::v1::model::Transform* RtcPointCloud::unsafe_arena_release_world_to_local() {
  // @@protoc_insertion_point(field_release:v1.model.RtcPointCloud.world_to_local)
  
  ::v1::model::Transform* temp = world_to_local_;
  world_to_local_ = nullptr;
  return temp;
}
inline ::v1::model::Transform* RtcPointCloud::_internal_mutable_world_to_local() {
  
  if (world_to_local_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Transform>(GetArenaForAllocation());
    world_to_local_ = p;
  }
  return world_to_local_;
}
inline ::v1::model::Transform* RtcPointCloud::mutable_world_to_local() {
  ::v1::model::Transform* _msg = _internal_mutable_world_to_local();
  // @@protoc_insertion_point(field_mutable:v1.model.RtcPointCloud.world_to_local)
  return _msg;
}
inline void RtcPointCloud::set_allocated_world_to_local(::v1::model::Transform* world_to_local) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local_);
  }
  if (world_to_local) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_to_local));
    if (message_arena != submessage_arena) {
      world_to_local = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_to_local, submessage_arena);
    }
    
  } else {
    
  }
  world_to_local_ = world_to_local;
  // @@protoc_insertion_point(field_set_allocated:v1.model.RtcPointCloud.world_to_local)
}

// -------------------------------------------------------------------

// H264VideoFrame

// int32 index = 1 [json_name = "index"];
inline void H264VideoFrame::clear_index() {
  index_ = 0;
}
inline int32_t H264VideoFrame::_internal_index() const {
  return index_;
}
inline int32_t H264VideoFrame::index() const {
  // @@protoc_insertion_point(field_get:v1.model.H264VideoFrame.index)
  return _internal_index();
}
inline void H264VideoFrame::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void H264VideoFrame::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v1.model.H264VideoFrame.index)
}

// int32 flags = 2 [json_name = "flags"];
inline void H264VideoFrame::clear_flags() {
  flags_ = 0;
}
inline int32_t H264VideoFrame::_internal_flags() const {
  return flags_;
}
inline int32_t H264VideoFrame::flags() const {
  // @@protoc_insertion_point(field_get:v1.model.H264VideoFrame.flags)
  return _internal_flags();
}
inline void H264VideoFrame::_internal_set_flags(int32_t value) {
  
  flags_ = value;
}
inline void H264VideoFrame::set_flags(int32_t value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:v1.model.H264VideoFrame.flags)
}

// bytes frame_data = 3 [json_name = "frameData"];
inline void H264VideoFrame::clear_frame_data() {
  frame_data_.ClearToEmpty();
}
inline const std::string& H264VideoFrame::frame_data() const {
  // @@protoc_insertion_point(field_get:v1.model.H264VideoFrame.frame_data)
  return _internal_frame_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void H264VideoFrame::set_frame_data(ArgT0&& arg0, ArgT... args) {
 
 frame_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.H264VideoFrame.frame_data)
}
inline std::string* H264VideoFrame::mutable_frame_data() {
  std::string* _s = _internal_mutable_frame_data();
  // @@protoc_insertion_point(field_mutable:v1.model.H264VideoFrame.frame_data)
  return _s;
}
inline const std::string& H264VideoFrame::_internal_frame_data() const {
  return frame_data_.Get();
}
inline void H264VideoFrame::_internal_set_frame_data(const std::string& value) {
  
  frame_data_.Set(value, GetArenaForAllocation());
}
inline std::string* H264VideoFrame::_internal_mutable_frame_data() {
  
  return frame_data_.Mutable(GetArenaForAllocation());
}
inline std::string* H264VideoFrame::release_frame_data() {
  // @@protoc_insertion_point(field_release:v1.model.H264VideoFrame.frame_data)
  return frame_data_.Release();
}
inline void H264VideoFrame::set_allocated_frame_data(std::string* frame_data) {
  if (frame_data != nullptr) {
    
  } else {
    
  }
  frame_data_.SetAllocated(frame_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_data_.IsDefault()) {
    frame_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.H264VideoFrame.frame_data)
}

// -------------------------------------------------------------------

// AudioChunk

// int32 index = 1 [json_name = "index"];
inline void AudioChunk::clear_index() {
  index_ = 0;
}
inline int32_t AudioChunk::_internal_index() const {
  return index_;
}
inline int32_t AudioChunk::index() const {
  // @@protoc_insertion_point(field_get:v1.model.AudioChunk.index)
  return _internal_index();
}
inline void AudioChunk::_internal_set_index(int32_t value) {
  
  index_ = value;
}
inline void AudioChunk::set_index(int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v1.model.AudioChunk.index)
}

// string format = 2 [json_name = "format"];
inline void AudioChunk::clear_format() {
  format_.ClearToEmpty();
}
inline const std::string& AudioChunk::format() const {
  // @@protoc_insertion_point(field_get:v1.model.AudioChunk.format)
  return _internal_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioChunk::set_format(ArgT0&& arg0, ArgT... args) {
 
 format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.AudioChunk.format)
}
inline std::string* AudioChunk::mutable_format() {
  std::string* _s = _internal_mutable_format();
  // @@protoc_insertion_point(field_mutable:v1.model.AudioChunk.format)
  return _s;
}
inline const std::string& AudioChunk::_internal_format() const {
  return format_.Get();
}
inline void AudioChunk::_internal_set_format(const std::string& value) {
  
  format_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioChunk::_internal_mutable_format() {
  
  return format_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioChunk::release_format() {
  // @@protoc_insertion_point(field_release:v1.model.AudioChunk.format)
  return format_.Release();
}
inline void AudioChunk::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocated(format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (format_.IsDefault()) {
    format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.AudioChunk.format)
}

// bytes chunk_data = 3 [json_name = "chunkData"];
inline void AudioChunk::clear_chunk_data() {
  chunk_data_.ClearToEmpty();
}
inline const std::string& AudioChunk::chunk_data() const {
  // @@protoc_insertion_point(field_get:v1.model.AudioChunk.chunk_data)
  return _internal_chunk_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioChunk::set_chunk_data(ArgT0&& arg0, ArgT... args) {
 
 chunk_data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.AudioChunk.chunk_data)
}
inline std::string* AudioChunk::mutable_chunk_data() {
  std::string* _s = _internal_mutable_chunk_data();
  // @@protoc_insertion_point(field_mutable:v1.model.AudioChunk.chunk_data)
  return _s;
}
inline const std::string& AudioChunk::_internal_chunk_data() const {
  return chunk_data_.Get();
}
inline void AudioChunk::_internal_set_chunk_data(const std::string& value) {
  
  chunk_data_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioChunk::_internal_mutable_chunk_data() {
  
  return chunk_data_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioChunk::release_chunk_data() {
  // @@protoc_insertion_point(field_release:v1.model.AudioChunk.chunk_data)
  return chunk_data_.Release();
}
inline void AudioChunk::set_allocated_chunk_data(std::string* chunk_data) {
  if (chunk_data != nullptr) {
    
  } else {
    
  }
  chunk_data_.SetAllocated(chunk_data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chunk_data_.IsDefault()) {
    chunk_data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.AudioChunk.chunk_data)
}

// -------------------------------------------------------------------

// Video

// string mime_type = 1 [json_name = "mimeType"];
inline void Video::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& Video::mime_type() const {
  // @@protoc_insertion_point(field_get:v1.model.Video.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Video::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Video.mime_type)
}
inline std::string* Video::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:v1.model.Video.mime_type)
  return _s;
}
inline const std::string& Video::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void Video::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* Video::release_mime_type() {
  // @@protoc_insertion_point(field_release:v1.model.Video.mime_type)
  return mime_type_.Release();
}
inline void Video::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:v1.model.Video.mime_type)
}

// int64 duration = 2 [json_name = "duration"];
inline void Video::clear_duration() {
  duration_ = int64_t{0};
}
inline int64_t Video::_internal_duration() const {
  return duration_;
}
inline int64_t Video::duration() const {
  // @@protoc_insertion_point(field_get:v1.model.Video.duration)
  return _internal_duration();
}
inline void Video::_internal_set_duration(int64_t value) {
  
  duration_ = value;
}
inline void Video::set_duration(int64_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:v1.model.Video.duration)
}

// string url = 3 [json_name = "url"];
inline bool Video::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool Video::has_url() const {
  return _internal_has_url();
}
inline void Video::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void Video::clear_url() {
  if (_internal_has_url()) {
    data_.url_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Video::url() const {
  // @@protoc_insertion_point(field_get:v1.model.Video.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void Video::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Video.url)
}
inline std::string* Video::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v1.model.Video.url)
  return _s;
}
inline const std::string& Video::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Video::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  return data_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* Video::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.Video.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void Video::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Video.url)
}

// bytes raw = 4 [json_name = "raw"];
inline bool Video::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool Video::has_raw() const {
  return _internal_has_raw();
}
inline void Video::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void Video::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy();
    clear_has_data();
  }
}
inline const std::string& Video::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.Video.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void Video::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.Video.raw)
}
inline std::string* Video::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:v1.model.Video.raw)
  return _s;
}
inline const std::string& Video::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void Video::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* Video::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  return data_.raw_.Mutable(      GetArenaForAllocation());
}
inline std::string* Video::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.Video.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.Release();
  } else {
    return nullptr;
  }
}
inline void Video::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.InitAllocated(raw, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Video.raw)
}

inline bool Video::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void Video::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline Video::DataCase Video::data_case() const {
  return Video::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TransformTree

// string url = 1 [json_name = "url"];
inline bool TransformTree::_internal_has_url() const {
  return data_case() == kUrl;
}
inline bool TransformTree::has_url() const {
  return _internal_has_url();
}
inline void TransformTree::set_has_url() {
  _oneof_case_[0] = kUrl;
}
inline void TransformTree::clear_url() {
  if (_internal_has_url()) {
    data_.url_.Destroy();
    clear_has_data();
  }
}
inline const std::string& TransformTree::url() const {
  // @@protoc_insertion_point(field_get:v1.model.TransformTree.url)
  return _internal_url();
}
template <typename ArgT0, typename... ArgT>
inline void TransformTree::set_url(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.TransformTree.url)
}
inline std::string* TransformTree::mutable_url() {
  std::string* _s = _internal_mutable_url();
  // @@protoc_insertion_point(field_mutable:v1.model.TransformTree.url)
  return _s;
}
inline const std::string& TransformTree::_internal_url() const {
  if (_internal_has_url()) {
    return data_.url_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransformTree::_internal_set_url(const std::string& value) {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  data_.url_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformTree::_internal_mutable_url() {
  if (!_internal_has_url()) {
    clear_data();
    set_has_url();
    data_.url_.InitDefault();
  }
  return data_.url_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransformTree::release_url() {
  // @@protoc_insertion_point(field_release:v1.model.TransformTree.url)
  if (_internal_has_url()) {
    clear_has_data();
    return data_.url_.Release();
  } else {
    return nullptr;
  }
}
inline void TransformTree::set_allocated_url(std::string* url) {
  if (has_data()) {
    clear_data();
  }
  if (url != nullptr) {
    set_has_url();
    data_.url_.InitAllocated(url, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.TransformTree.url)
}

// bytes raw = 2 [json_name = "raw"];
inline bool TransformTree::_internal_has_raw() const {
  return data_case() == kRaw;
}
inline bool TransformTree::has_raw() const {
  return _internal_has_raw();
}
inline void TransformTree::set_has_raw() {
  _oneof_case_[0] = kRaw;
}
inline void TransformTree::clear_raw() {
  if (_internal_has_raw()) {
    data_.raw_.Destroy();
    clear_has_data();
  }
}
inline const std::string& TransformTree::raw() const {
  // @@protoc_insertion_point(field_get:v1.model.TransformTree.raw)
  return _internal_raw();
}
template <typename ArgT0, typename... ArgT>
inline void TransformTree::set_raw(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.TransformTree.raw)
}
inline std::string* TransformTree::mutable_raw() {
  std::string* _s = _internal_mutable_raw();
  // @@protoc_insertion_point(field_mutable:v1.model.TransformTree.raw)
  return _s;
}
inline const std::string& TransformTree::_internal_raw() const {
  if (_internal_has_raw()) {
    return data_.raw_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TransformTree::_internal_set_raw(const std::string& value) {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  data_.raw_.Set(value, GetArenaForAllocation());
}
inline std::string* TransformTree::_internal_mutable_raw() {
  if (!_internal_has_raw()) {
    clear_data();
    set_has_raw();
    data_.raw_.InitDefault();
  }
  return data_.raw_.Mutable(      GetArenaForAllocation());
}
inline std::string* TransformTree::release_raw() {
  // @@protoc_insertion_point(field_release:v1.model.TransformTree.raw)
  if (_internal_has_raw()) {
    clear_has_data();
    return data_.raw_.Release();
  } else {
    return nullptr;
  }
}
inline void TransformTree::set_allocated_raw(std::string* raw) {
  if (has_data()) {
    clear_data();
  }
  if (raw != nullptr) {
    set_has_raw();
    data_.raw_.InitAllocated(raw, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.TransformTree.raw)
}

inline bool TransformTree::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void TransformTree::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline TransformTree::DataCase TransformTree::data_case() const {
  return TransformTree::DataCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fmedia_2eproto

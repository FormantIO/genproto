// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/datapoint.proto

#include "protos/model/v1/datapoint.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace v1 {
namespace model {
constexpr Datapoint_TagsEntry_DoNotUse::Datapoint_TagsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Datapoint_TagsEntry_DoNotUseDefaultTypeInternal {
  constexpr Datapoint_TagsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Datapoint_TagsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Datapoint_TagsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Datapoint_TagsEntry_DoNotUseDefaultTypeInternal _Datapoint_TagsEntry_DoNotUse_default_instance_;
constexpr Datapoint::Datapoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tags_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , stream_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , _oneof_case_{}{}
struct DatapointDefaultTypeInternal {
  constexpr DatapointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DatapointDefaultTypeInternal() {}
  union {
    Datapoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DatapointDefaultTypeInternal _Datapoint_default_instance_;
constexpr ControlDatapoint::ControlDatapoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : stream_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timestamp_(int64_t{0})
  , _oneof_case_{}{}
struct ControlDatapointDefaultTypeInternal {
  constexpr ControlDatapointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlDatapointDefaultTypeInternal() {}
  union {
    ControlDatapoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlDatapointDefaultTypeInternal _ControlDatapoint_default_instance_;
constexpr GenericAPIDatapoint_HeadersEntry_DoNotUse::GenericAPIDatapoint_HeadersEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GenericAPIDatapoint_HeadersEntry_DoNotUseDefaultTypeInternal {
  constexpr GenericAPIDatapoint_HeadersEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericAPIDatapoint_HeadersEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GenericAPIDatapoint_HeadersEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericAPIDatapoint_HeadersEntry_DoNotUseDefaultTypeInternal _GenericAPIDatapoint_HeadersEntry_DoNotUse_default_instance_;
constexpr GenericAPIDatapoint::GenericAPIDatapoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , retryablestatuscodes_()
  , _retryablestatuscodes_cached_byte_size_()
  , method_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , endpoint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , body_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , isretryable_(false)
  , requireformantauth_(false){}
struct GenericAPIDatapointDefaultTypeInternal {
  constexpr GenericAPIDatapointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GenericAPIDatapointDefaultTypeInternal() {}
  union {
    GenericAPIDatapoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GenericAPIDatapointDefaultTypeInternal _GenericAPIDatapoint_default_instance_;
}  // namespace model
}  // namespace v1
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_protos_2fmodel_2fv1_2fdatapoint_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint_TagsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, stream_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, timestamp_),
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, tags_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::Datapoint, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::ControlDatapoint, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::v1::model::ControlDatapoint, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::ControlDatapoint, stream_),
  PROTOBUF_FIELD_OFFSET(::v1::model::ControlDatapoint, timestamp_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::v1::model::ControlDatapoint, data_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, method_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, endpoint_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, headers_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, body_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, isretryable_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, requireformantauth_),
  PROTOBUF_FIELD_OFFSET(::v1::model::GenericAPIDatapoint, retryablestatuscodes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::v1::model::Datapoint_TagsEntry_DoNotUse)},
  { 9, -1, sizeof(::v1::model::Datapoint)},
  { 33, -1, sizeof(::v1::model::ControlDatapoint)},
  { 48, 55, sizeof(::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse)},
  { 57, -1, sizeof(::v1::model::GenericAPIDatapoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Datapoint_TagsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_Datapoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_ControlDatapoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_GenericAPIDatapoint_HeadersEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::v1::model::_GenericAPIDatapoint_default_instance_),
};

const char descriptor_table_protodef_protos_2fmodel_2fv1_2fdatapoint_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037protos/model/v1/datapoint.proto\022\010v1.mo"
  "del\032\032protos/model/v1/file.proto\032\034protos/"
  "model/v1/health.proto\032\032protos/model/v1/m"
  "ath.proto\032 protos/model/v1/navigation.pr"
  "oto\032\032protos/model/v1/text.proto\032\033protos/"
  "model/v1/media.proto\"\213\007\n\tDatapoint\022\026\n\006st"
  "ream\030\001 \001(\tR\006stream\022\034\n\ttimestamp\030\002 \001(\003R\tt"
  "imestamp\0221\n\004tags\030\003 \003(\0132\035.v1.model.Datapo"
  "int.TagsEntryR\004tags\022$\n\004text\030\004 \001(\0132\016.v1.m"
  "odel.TextH\000R\004text\022-\n\007numeric\030\005 \001(\0132\021.v1."
  "model.NumericH\000R\007numeric\0227\n\013numeric_set\030"
  "\021 \001(\0132\024.v1.model.NumericSetH\000R\nnumericSe"
  "t\022*\n\006bitset\030\007 \001(\0132\020.v1.model.BitsetH\000R\006b"
  "itset\022$\n\004file\030\010 \001(\0132\016.v1.model.FileH\000R\004f"
  "ile\022\'\n\005image\030\t \001(\0132\017.v1.model.ImageH\000R\005i"
  "mage\0227\n\013point_cloud\030\n \001(\0132\024.v1.model.Poi"
  "ntCloudH\000R\npointCloud\0220\n\010location\030\013 \001(\0132"
  "\022.v1.model.LocationH\000R\010location\022<\n\014local"
  "ization\030\014 \001(\0132\026.v1.model.LocalizationH\000R"
  "\014localization\022*\n\006health\030\r \001(\0132\020.v1.model"
  ".HealthH\000R\006health\022$\n\004json\030\016 \001(\0132\016.v1.mod"
  "el.JsonH\000R\004json\022-\n\007battery\030\017 \001(\0132\021.v1.mo"
  "del.BatteryH\000R\007battery\022\'\n\005video\030\020 \001(\0132\017."
  "v1.model.VideoH\000R\005video\022@\n\016transform_tre"
  "e\030\022 \001(\0132\027.v1.model.TransformTreeH\000R\rtran"
  "sformTree\0220\n\010odometry\030\023 \001(\0132\022.v1.model.O"
  "dometryH\000R\010odometry\0327\n\tTagsEntry\022\020\n\003key\030"
  "\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B\006\n\004"
  "dataJ\004\010\006\020\007\"\235\003\n\020ControlDatapoint\022\026\n\006strea"
  "m\030\001 \001(\tR\006stream\022\034\n\ttimestamp\030\002 \001(\003R\ttime"
  "stamp\022*\n\006bitset\030\003 \001(\0132\020.v1.model.BitsetH"
  "\000R\006bitset\022\'\n\005twist\030\004 \001(\0132\017.v1.model.Twis"
  "tH\000R\005twist\022)\n\004pose\030\005 \001(\0132\023.v1.model.Tran"
  "sformH\000R\004pose\022-\n\007numeric\030\006 \001(\0132\021.v1.mode"
  "l.NumericH\000R\007numeric\022P\n\024pose_with_covari"
  "ance\030\007 \001(\0132\034.v1.model.PoseWithCovariance"
  "H\000R\022poseWithCovariance\022\'\n\005point\030\010 \001(\0132\017."
  "v1.model.PointH\000R\005point\022!\n\003joy\030\t \001(\0132\r.v"
  "1.model.JoyH\000R\003joyB\006\n\004data\"\345\002\n\023GenericAP"
  "IDatapoint\022\026\n\006Method\030\001 \001(\tR\006Method\022\032\n\010En"
  "dpoint\030\002 \001(\tR\010Endpoint\022D\n\007Headers\030\003 \003(\0132"
  "*.v1.model.GenericAPIDatapoint.HeadersEn"
  "tryR\007Headers\022\022\n\004Body\030\004 \001(\tR\004Body\022 \n\013IsRe"
  "tryable\030\005 \001(\010R\013IsRetryable\022.\n\022RequireFor"
  "mantAuth\030\006 \001(\010R\022RequireFormantAuth\0222\n\024Re"
  "tryableStatusCodes\030\007 \003(\003R\024RetryableStatu"
  "sCodes\032:\n\014HeadersEntry\022\020\n\003key\030\001 \001(\tR\003key"
  "\022\024\n\005value\030\002 \001(\tR\005value:\0028\001B+Z)github.com"
  "/FormantIO/genproto/go/v1/modelb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_deps[6] = {
  &::descriptor_table_protos_2fmodel_2fv1_2ffile_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmath_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fmedia_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2fnavigation_2eproto,
  &::descriptor_table_protos_2fmodel_2fv1_2ftext_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto = {
  false, false, 1959, descriptor_table_protodef_protos_2fmodel_2fv1_2fdatapoint_2eproto, "protos/model/v1/datapoint.proto", 
  &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once, descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_deps, 6, 5,
  schemas, file_default_instances, TableStruct_protos_2fmodel_2fv1_2fdatapoint_2eproto::offsets,
  file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto, file_level_enum_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto, file_level_service_descriptors_protos_2fmodel_2fv1_2fdatapoint_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter() {
  return &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_protos_2fmodel_2fv1_2fdatapoint_2eproto(&descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto);
namespace v1 {
namespace model {

// ===================================================================

Datapoint_TagsEntry_DoNotUse::Datapoint_TagsEntry_DoNotUse() {}
Datapoint_TagsEntry_DoNotUse::Datapoint_TagsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Datapoint_TagsEntry_DoNotUse::MergeFrom(const Datapoint_TagsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Datapoint_TagsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[0]);
}
void Datapoint_TagsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class Datapoint::_Internal {
 public:
  static const ::v1::model::Text& text(const Datapoint* msg);
  static const ::v1::model::Numeric& numeric(const Datapoint* msg);
  static const ::v1::model::NumericSet& numeric_set(const Datapoint* msg);
  static const ::v1::model::Bitset& bitset(const Datapoint* msg);
  static const ::v1::model::File& file(const Datapoint* msg);
  static const ::v1::model::Image& image(const Datapoint* msg);
  static const ::v1::model::PointCloud& point_cloud(const Datapoint* msg);
  static const ::v1::model::Location& location(const Datapoint* msg);
  static const ::v1::model::Localization& localization(const Datapoint* msg);
  static const ::v1::model::Health& health(const Datapoint* msg);
  static const ::v1::model::Json& json(const Datapoint* msg);
  static const ::v1::model::Battery& battery(const Datapoint* msg);
  static const ::v1::model::Video& video(const Datapoint* msg);
  static const ::v1::model::TransformTree& transform_tree(const Datapoint* msg);
  static const ::v1::model::Odometry& odometry(const Datapoint* msg);
};

const ::v1::model::Text&
Datapoint::_Internal::text(const Datapoint* msg) {
  return *msg->data_.text_;
}
const ::v1::model::Numeric&
Datapoint::_Internal::numeric(const Datapoint* msg) {
  return *msg->data_.numeric_;
}
const ::v1::model::NumericSet&
Datapoint::_Internal::numeric_set(const Datapoint* msg) {
  return *msg->data_.numeric_set_;
}
const ::v1::model::Bitset&
Datapoint::_Internal::bitset(const Datapoint* msg) {
  return *msg->data_.bitset_;
}
const ::v1::model::File&
Datapoint::_Internal::file(const Datapoint* msg) {
  return *msg->data_.file_;
}
const ::v1::model::Image&
Datapoint::_Internal::image(const Datapoint* msg) {
  return *msg->data_.image_;
}
const ::v1::model::PointCloud&
Datapoint::_Internal::point_cloud(const Datapoint* msg) {
  return *msg->data_.point_cloud_;
}
const ::v1::model::Location&
Datapoint::_Internal::location(const Datapoint* msg) {
  return *msg->data_.location_;
}
const ::v1::model::Localization&
Datapoint::_Internal::localization(const Datapoint* msg) {
  return *msg->data_.localization_;
}
const ::v1::model::Health&
Datapoint::_Internal::health(const Datapoint* msg) {
  return *msg->data_.health_;
}
const ::v1::model::Json&
Datapoint::_Internal::json(const Datapoint* msg) {
  return *msg->data_.json_;
}
const ::v1::model::Battery&
Datapoint::_Internal::battery(const Datapoint* msg) {
  return *msg->data_.battery_;
}
const ::v1::model::Video&
Datapoint::_Internal::video(const Datapoint* msg) {
  return *msg->data_.video_;
}
const ::v1::model::TransformTree&
Datapoint::_Internal::transform_tree(const Datapoint* msg) {
  return *msg->data_.transform_tree_;
}
const ::v1::model::Odometry&
Datapoint::_Internal::odometry(const Datapoint* msg) {
  return *msg->data_.odometry_;
}
void Datapoint::set_allocated_text(::v1::model::Text* text) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (text) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(text));
    if (message_arena != submessage_arena) {
      text = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
    data_.text_ = text;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.text)
}
void Datapoint::clear_text() {
  if (_internal_has_text()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.text_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_numeric(::v1::model::Numeric* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numeric));
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    set_has_numeric();
    data_.numeric_ = numeric;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.numeric)
}
void Datapoint::clear_numeric() {
  if (_internal_has_numeric()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.numeric_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_numeric_set(::v1::model::NumericSet* numeric_set) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (numeric_set) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numeric_set));
    if (message_arena != submessage_arena) {
      numeric_set = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric_set, submessage_arena);
    }
    set_has_numeric_set();
    data_.numeric_set_ = numeric_set;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.numeric_set)
}
void Datapoint::clear_numeric_set() {
  if (_internal_has_numeric_set()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.numeric_set_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_bitset(::v1::model::Bitset* bitset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bitset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitset));
    if (message_arena != submessage_arena) {
      bitset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitset, submessage_arena);
    }
    set_has_bitset();
    data_.bitset_ = bitset;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.bitset)
}
void Datapoint::clear_bitset() {
  if (_internal_has_bitset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bitset_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_file(::v1::model::File* file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(file));
    if (message_arena != submessage_arena) {
      file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file, submessage_arena);
    }
    set_has_file();
    data_.file_ = file;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.file)
}
void Datapoint::clear_file() {
  if (_internal_has_file()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.file_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_image(::v1::model::Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(image));
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    data_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.image)
}
void Datapoint::clear_image() {
  if (_internal_has_image()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.image_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_point_cloud(::v1::model::PointCloud* point_cloud) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (point_cloud) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point_cloud));
    if (message_arena != submessage_arena) {
      point_cloud = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point_cloud, submessage_arena);
    }
    set_has_point_cloud();
    data_.point_cloud_ = point_cloud;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.point_cloud)
}
void Datapoint::clear_point_cloud() {
  if (_internal_has_point_cloud()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.point_cloud_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_location(::v1::model::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    set_has_location();
    data_.location_ = location;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.location)
}
void Datapoint::clear_location() {
  if (_internal_has_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.location_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_localization(::v1::model::Localization* localization) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (localization) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(localization));
    if (message_arena != submessage_arena) {
      localization = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, localization, submessage_arena);
    }
    set_has_localization();
    data_.localization_ = localization;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.localization)
}
void Datapoint::clear_localization() {
  if (_internal_has_localization()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.localization_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_health(::v1::model::Health* health) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (health) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(health));
    if (message_arena != submessage_arena) {
      health = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, health, submessage_arena);
    }
    set_has_health();
    data_.health_ = health;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.health)
}
void Datapoint::clear_health() {
  if (_internal_has_health()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.health_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_json(::v1::model::Json* json) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (json) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(json));
    if (message_arena != submessage_arena) {
      json = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, json, submessage_arena);
    }
    set_has_json();
    data_.json_ = json;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.json)
}
void Datapoint::clear_json() {
  if (_internal_has_json()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.json_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_battery(::v1::model::Battery* battery) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (battery) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battery));
    if (message_arena != submessage_arena) {
      battery = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battery, submessage_arena);
    }
    set_has_battery();
    data_.battery_ = battery;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.battery)
}
void Datapoint::clear_battery() {
  if (_internal_has_battery()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.battery_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_video(::v1::model::Video* video) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (video) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(video));
    if (message_arena != submessage_arena) {
      video = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, video, submessage_arena);
    }
    set_has_video();
    data_.video_ = video;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.video)
}
void Datapoint::clear_video() {
  if (_internal_has_video()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.video_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_transform_tree(::v1::model::TransformTree* transform_tree) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (transform_tree) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transform_tree));
    if (message_arena != submessage_arena) {
      transform_tree = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform_tree, submessage_arena);
    }
    set_has_transform_tree();
    data_.transform_tree_ = transform_tree;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.transform_tree)
}
void Datapoint::clear_transform_tree() {
  if (_internal_has_transform_tree()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.transform_tree_;
    }
    clear_has_data();
  }
}
void Datapoint::set_allocated_odometry(::v1::model::Odometry* odometry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (odometry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(odometry));
    if (message_arena != submessage_arena) {
      odometry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, odometry, submessage_arena);
    }
    set_has_odometry();
    data_.odometry_ = odometry;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.Datapoint.odometry)
}
void Datapoint::clear_odometry() {
  if (_internal_has_odometry()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.odometry_;
    }
    clear_has_data();
  }
}
Datapoint::Datapoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  tags_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.Datapoint)
}
Datapoint::Datapoint(const Datapoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tags_.MergeFrom(from.tags_);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream().empty()) {
    stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kText: {
      _internal_mutable_text()->::v1::model::Text::MergeFrom(from._internal_text());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kNumericSet: {
      _internal_mutable_numeric_set()->::v1::model::NumericSet::MergeFrom(from._internal_numeric_set());
      break;
    }
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kFile: {
      _internal_mutable_file()->::v1::model::File::MergeFrom(from._internal_file());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPointCloud: {
      _internal_mutable_point_cloud()->::v1::model::PointCloud::MergeFrom(from._internal_point_cloud());
      break;
    }
    case kLocation: {
      _internal_mutable_location()->::v1::model::Location::MergeFrom(from._internal_location());
      break;
    }
    case kLocalization: {
      _internal_mutable_localization()->::v1::model::Localization::MergeFrom(from._internal_localization());
      break;
    }
    case kHealth: {
      _internal_mutable_health()->::v1::model::Health::MergeFrom(from._internal_health());
      break;
    }
    case kJson: {
      _internal_mutable_json()->::v1::model::Json::MergeFrom(from._internal_json());
      break;
    }
    case kBattery: {
      _internal_mutable_battery()->::v1::model::Battery::MergeFrom(from._internal_battery());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::v1::model::Video::MergeFrom(from._internal_video());
      break;
    }
    case kTransformTree: {
      _internal_mutable_transform_tree()->::v1::model::TransformTree::MergeFrom(from._internal_transform_tree());
      break;
    }
    case kOdometry: {
      _internal_mutable_odometry()->::v1::model::Odometry::MergeFrom(from._internal_odometry());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.Datapoint)
}

void Datapoint::SharedCtor() {
stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = int64_t{0};
clear_has_data();
}

Datapoint::~Datapoint() {
  // @@protoc_insertion_point(destructor:v1.model.Datapoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Datapoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void Datapoint::ArenaDtor(void* object) {
  Datapoint* _this = reinterpret_cast< Datapoint* >(object);
  (void)_this;
  _this->tags_. ~MapField();
}
inline void Datapoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Datapoint::ArenaDtor);
  }
}
void Datapoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Datapoint::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.Datapoint)
  switch (data_case()) {
    case kText: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.text_;
      }
      break;
    }
    case kNumeric: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.numeric_;
      }
      break;
    }
    case kNumericSet: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.numeric_set_;
      }
      break;
    }
    case kBitset: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.bitset_;
      }
      break;
    }
    case kFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.file_;
      }
      break;
    }
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.image_;
      }
      break;
    }
    case kPointCloud: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.point_cloud_;
      }
      break;
    }
    case kLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.location_;
      }
      break;
    }
    case kLocalization: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.localization_;
      }
      break;
    }
    case kHealth: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.health_;
      }
      break;
    }
    case kJson: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.json_;
      }
      break;
    }
    case kBattery: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.battery_;
      }
      break;
    }
    case kVideo: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.video_;
      }
      break;
    }
    case kTransformTree: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.transform_tree_;
      }
      break;
    }
    case kOdometry: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.odometry_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void Datapoint::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  stream_.ClearToEmpty();
  timestamp_ = int64_t{0};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Datapoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream = 1 [json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.Datapoint.stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> tags = 3 [json_name = "tags"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&tags_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .v1.model.Text text = 4 [json_name = "text"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_text(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Numeric numeric = 5 [json_name = "numeric"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Bitset bitset = 7 [json_name = "bitset"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.File file = 8 [json_name = "file"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_file(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Image image = 9 [json_name = "image"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.PointCloud point_cloud = 10 [json_name = "pointCloud"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_point_cloud(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Location location = 11 [json_name = "location"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Localization localization = 12 [json_name = "localization"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_localization(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Health health = 13 [json_name = "health"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_health(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Json json = 14 [json_name = "json"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_json(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Battery battery = 15 [json_name = "battery"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_battery(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Video video = 16 [json_name = "video"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_video(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.NumericSet numeric_set = 17 [json_name = "numericSet"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric_set(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.TransformTree transform_tree = 18 [json_name = "transformTree"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_transform_tree(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Odometry odometry = 19 [json_name = "odometry"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_odometry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Datapoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.Datapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream = 1 [json_name = "stream"];
  if (!this->stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.Datapoint.stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream(), target);
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // map<string, string> tags = 3 [json_name = "tags"];
  if (!this->_internal_tags().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Datapoint.TagsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.Datapoint.TagsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_tags().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_tags().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Datapoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_tags().begin();
          it != this->_internal_tags().end(); ++it) {
        target = Datapoint_TagsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .v1.model.Text text = 4 [json_name = "text"];
  if (_internal_has_text()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::text(this), target, stream);
  }

  // .v1.model.Numeric numeric = 5 [json_name = "numeric"];
  if (_internal_has_numeric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::numeric(this), target, stream);
  }

  // .v1.model.Bitset bitset = 7 [json_name = "bitset"];
  if (_internal_has_bitset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::bitset(this), target, stream);
  }

  // .v1.model.File file = 8 [json_name = "file"];
  if (_internal_has_file()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::file(this), target, stream);
  }

  // .v1.model.Image image = 9 [json_name = "image"];
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::image(this), target, stream);
  }

  // .v1.model.PointCloud point_cloud = 10 [json_name = "pointCloud"];
  if (_internal_has_point_cloud()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::point_cloud(this), target, stream);
  }

  // .v1.model.Location location = 11 [json_name = "location"];
  if (_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::location(this), target, stream);
  }

  // .v1.model.Localization localization = 12 [json_name = "localization"];
  if (_internal_has_localization()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::localization(this), target, stream);
  }

  // .v1.model.Health health = 13 [json_name = "health"];
  if (_internal_has_health()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::health(this), target, stream);
  }

  // .v1.model.Json json = 14 [json_name = "json"];
  if (_internal_has_json()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::json(this), target, stream);
  }

  // .v1.model.Battery battery = 15 [json_name = "battery"];
  if (_internal_has_battery()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::battery(this), target, stream);
  }

  // .v1.model.Video video = 16 [json_name = "video"];
  if (_internal_has_video()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::video(this), target, stream);
  }

  // .v1.model.NumericSet numeric_set = 17 [json_name = "numericSet"];
  if (_internal_has_numeric_set()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::numeric_set(this), target, stream);
  }

  // .v1.model.TransformTree transform_tree = 18 [json_name = "transformTree"];
  if (_internal_has_transform_tree()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::transform_tree(this), target, stream);
  }

  // .v1.model.Odometry odometry = 19 [json_name = "odometry"];
  if (_internal_has_odometry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::odometry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.Datapoint)
  return target;
}

size_t Datapoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.Datapoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> tags = 3 [json_name = "tags"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tags_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_tags().begin();
      it != this->_internal_tags().end(); ++it) {
    total_size += Datapoint_TagsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string stream = 1 [json_name = "stream"];
  if (!this->stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.Text text = 4 [json_name = "text"];
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.text_);
      break;
    }
    // .v1.model.Numeric numeric = 5 [json_name = "numeric"];
    case kNumeric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.numeric_);
      break;
    }
    // .v1.model.NumericSet numeric_set = 17 [json_name = "numericSet"];
    case kNumericSet: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.numeric_set_);
      break;
    }
    // .v1.model.Bitset bitset = 7 [json_name = "bitset"];
    case kBitset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bitset_);
      break;
    }
    // .v1.model.File file = 8 [json_name = "file"];
    case kFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.file_);
      break;
    }
    // .v1.model.Image image = 9 [json_name = "image"];
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.image_);
      break;
    }
    // .v1.model.PointCloud point_cloud = 10 [json_name = "pointCloud"];
    case kPointCloud: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.point_cloud_);
      break;
    }
    // .v1.model.Location location = 11 [json_name = "location"];
    case kLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.location_);
      break;
    }
    // .v1.model.Localization localization = 12 [json_name = "localization"];
    case kLocalization: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.localization_);
      break;
    }
    // .v1.model.Health health = 13 [json_name = "health"];
    case kHealth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.health_);
      break;
    }
    // .v1.model.Json json = 14 [json_name = "json"];
    case kJson: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.json_);
      break;
    }
    // .v1.model.Battery battery = 15 [json_name = "battery"];
    case kBattery: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.battery_);
      break;
    }
    // .v1.model.Video video = 16 [json_name = "video"];
    case kVideo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.video_);
      break;
    }
    // .v1.model.TransformTree transform_tree = 18 [json_name = "transformTree"];
    case kTransformTree: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.transform_tree_);
      break;
    }
    // .v1.model.Odometry odometry = 19 [json_name = "odometry"];
    case kOdometry: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.odometry_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Datapoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  const Datapoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Datapoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.Datapoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.Datapoint)
    MergeFrom(*source);
  }
}

void Datapoint::MergeFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.Datapoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  if (!from.stream().empty()) {
    _internal_set_stream(from._internal_stream());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kText: {
      _internal_mutable_text()->::v1::model::Text::MergeFrom(from._internal_text());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kNumericSet: {
      _internal_mutable_numeric_set()->::v1::model::NumericSet::MergeFrom(from._internal_numeric_set());
      break;
    }
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kFile: {
      _internal_mutable_file()->::v1::model::File::MergeFrom(from._internal_file());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::v1::model::Image::MergeFrom(from._internal_image());
      break;
    }
    case kPointCloud: {
      _internal_mutable_point_cloud()->::v1::model::PointCloud::MergeFrom(from._internal_point_cloud());
      break;
    }
    case kLocation: {
      _internal_mutable_location()->::v1::model::Location::MergeFrom(from._internal_location());
      break;
    }
    case kLocalization: {
      _internal_mutable_localization()->::v1::model::Localization::MergeFrom(from._internal_localization());
      break;
    }
    case kHealth: {
      _internal_mutable_health()->::v1::model::Health::MergeFrom(from._internal_health());
      break;
    }
    case kJson: {
      _internal_mutable_json()->::v1::model::Json::MergeFrom(from._internal_json());
      break;
    }
    case kBattery: {
      _internal_mutable_battery()->::v1::model::Battery::MergeFrom(from._internal_battery());
      break;
    }
    case kVideo: {
      _internal_mutable_video()->::v1::model::Video::MergeFrom(from._internal_video());
      break;
    }
    case kTransformTree: {
      _internal_mutable_transform_tree()->::v1::model::TransformTree::MergeFrom(from._internal_transform_tree());
      break;
    }
    case kOdometry: {
      _internal_mutable_odometry()->::v1::model::Odometry::MergeFrom(from._internal_odometry());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void Datapoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Datapoint::CopyFrom(const Datapoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.Datapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Datapoint::IsInitialized() const {
  return true;
}

void Datapoint::InternalSwap(Datapoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  tags_.InternalSwap(&other->tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_, GetArenaForAllocation(),
      &other->stream_, other->GetArenaForAllocation()
  );
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Datapoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[1]);
}

// ===================================================================

class ControlDatapoint::_Internal {
 public:
  static const ::v1::model::Bitset& bitset(const ControlDatapoint* msg);
  static const ::v1::model::Twist& twist(const ControlDatapoint* msg);
  static const ::v1::model::Transform& pose(const ControlDatapoint* msg);
  static const ::v1::model::Numeric& numeric(const ControlDatapoint* msg);
  static const ::v1::model::PoseWithCovariance& pose_with_covariance(const ControlDatapoint* msg);
  static const ::v1::model::Point& point(const ControlDatapoint* msg);
  static const ::v1::model::Joy& joy(const ControlDatapoint* msg);
};

const ::v1::model::Bitset&
ControlDatapoint::_Internal::bitset(const ControlDatapoint* msg) {
  return *msg->data_.bitset_;
}
const ::v1::model::Twist&
ControlDatapoint::_Internal::twist(const ControlDatapoint* msg) {
  return *msg->data_.twist_;
}
const ::v1::model::Transform&
ControlDatapoint::_Internal::pose(const ControlDatapoint* msg) {
  return *msg->data_.pose_;
}
const ::v1::model::Numeric&
ControlDatapoint::_Internal::numeric(const ControlDatapoint* msg) {
  return *msg->data_.numeric_;
}
const ::v1::model::PoseWithCovariance&
ControlDatapoint::_Internal::pose_with_covariance(const ControlDatapoint* msg) {
  return *msg->data_.pose_with_covariance_;
}
const ::v1::model::Point&
ControlDatapoint::_Internal::point(const ControlDatapoint* msg) {
  return *msg->data_.point_;
}
const ::v1::model::Joy&
ControlDatapoint::_Internal::joy(const ControlDatapoint* msg) {
  return *msg->data_.joy_;
}
void ControlDatapoint::set_allocated_bitset(::v1::model::Bitset* bitset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (bitset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bitset));
    if (message_arena != submessage_arena) {
      bitset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bitset, submessage_arena);
    }
    set_has_bitset();
    data_.bitset_ = bitset;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.bitset)
}
void ControlDatapoint::clear_bitset() {
  if (_internal_has_bitset()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.bitset_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_twist(::v1::model::Twist* twist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (twist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(twist));
    if (message_arena != submessage_arena) {
      twist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, twist, submessage_arena);
    }
    set_has_twist();
    data_.twist_ = twist;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.twist)
}
void ControlDatapoint::clear_twist() {
  if (_internal_has_twist()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.twist_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_pose(::v1::model::Transform* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    set_has_pose();
    data_.pose_ = pose;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.pose)
}
void ControlDatapoint::clear_pose() {
  if (_internal_has_pose()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.pose_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_numeric(::v1::model::Numeric* numeric) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (numeric) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numeric));
    if (message_arena != submessage_arena) {
      numeric = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numeric, submessage_arena);
    }
    set_has_numeric();
    data_.numeric_ = numeric;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.numeric)
}
void ControlDatapoint::clear_numeric() {
  if (_internal_has_numeric()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.numeric_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_pose_with_covariance(::v1::model::PoseWithCovariance* pose_with_covariance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (pose_with_covariance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_with_covariance));
    if (message_arena != submessage_arena) {
      pose_with_covariance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_with_covariance, submessage_arena);
    }
    set_has_pose_with_covariance();
    data_.pose_with_covariance_ = pose_with_covariance;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.pose_with_covariance)
}
void ControlDatapoint::clear_pose_with_covariance() {
  if (_internal_has_pose_with_covariance()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.pose_with_covariance_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_point(::v1::model::Point* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(point));
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
    data_.point_ = point;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.point)
}
void ControlDatapoint::clear_point() {
  if (_internal_has_point()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.point_;
    }
    clear_has_data();
  }
}
void ControlDatapoint::set_allocated_joy(::v1::model::Joy* joy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (joy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(joy));
    if (message_arena != submessage_arena) {
      joy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joy, submessage_arena);
    }
    set_has_joy();
    data_.joy_ = joy;
  }
  // @@protoc_insertion_point(field_set_allocated:v1.model.ControlDatapoint.joy)
}
void ControlDatapoint::clear_joy() {
  if (_internal_has_joy()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.joy_;
    }
    clear_has_data();
  }
}
ControlDatapoint::ControlDatapoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.ControlDatapoint)
}
ControlDatapoint::ControlDatapoint(const ControlDatapoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_stream().empty()) {
    stream_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_stream(), 
      GetArenaForAllocation());
  }
  timestamp_ = from.timestamp_;
  clear_has_data();
  switch (from.data_case()) {
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kPoseWithCovariance: {
      _internal_mutable_pose_with_covariance()->::v1::model::PoseWithCovariance::MergeFrom(from._internal_pose_with_covariance());
      break;
    }
    case kPoint: {
      _internal_mutable_point()->::v1::model::Point::MergeFrom(from._internal_point());
      break;
    }
    case kJoy: {
      _internal_mutable_joy()->::v1::model::Joy::MergeFrom(from._internal_joy());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:v1.model.ControlDatapoint)
}

void ControlDatapoint::SharedCtor() {
stream_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
timestamp_ = int64_t{0};
clear_has_data();
}

ControlDatapoint::~ControlDatapoint() {
  // @@protoc_insertion_point(destructor:v1.model.ControlDatapoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ControlDatapoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  stream_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_data()) {
    clear_data();
  }
}

void ControlDatapoint::ArenaDtor(void* object) {
  ControlDatapoint* _this = reinterpret_cast< ControlDatapoint* >(object);
  (void)_this;
}
void ControlDatapoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlDatapoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlDatapoint::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:v1.model.ControlDatapoint)
  switch (data_case()) {
    case kBitset: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.bitset_;
      }
      break;
    }
    case kTwist: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.twist_;
      }
      break;
    }
    case kPose: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.pose_;
      }
      break;
    }
    case kNumeric: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.numeric_;
      }
      break;
    }
    case kPoseWithCovariance: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.pose_with_covariance_;
      }
      break;
    }
    case kPoint: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.point_;
      }
      break;
    }
    case kJoy: {
      if (GetArenaForAllocation() == nullptr) {
        delete data_.joy_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DATA_NOT_SET;
}


void ControlDatapoint::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.ControlDatapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  stream_.ClearToEmpty();
  timestamp_ = int64_t{0};
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlDatapoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string stream = 1 [json_name = "stream"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_stream();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.ControlDatapoint.stream"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 timestamp = 2 [json_name = "timestamp"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Bitset bitset = 3 [json_name = "bitset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bitset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Twist twist = 4 [json_name = "twist"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_twist(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Transform pose = 5 [json_name = "pose"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Numeric numeric = 6 [json_name = "numeric"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.PoseWithCovariance pose_with_covariance = 7 [json_name = "poseWithCovariance"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_with_covariance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Point point = 8 [json_name = "point"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .v1.model.Joy joy = 9 [json_name = "joy"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_joy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlDatapoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.ControlDatapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string stream = 1 [json_name = "stream"];
  if (!this->stream().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_stream().data(), static_cast<int>(this->_internal_stream().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.ControlDatapoint.stream");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_stream(), target);
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_timestamp(), target);
  }

  // .v1.model.Bitset bitset = 3 [json_name = "bitset"];
  if (_internal_has_bitset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::bitset(this), target, stream);
  }

  // .v1.model.Twist twist = 4 [json_name = "twist"];
  if (_internal_has_twist()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::twist(this), target, stream);
  }

  // .v1.model.Transform pose = 5 [json_name = "pose"];
  if (_internal_has_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pose(this), target, stream);
  }

  // .v1.model.Numeric numeric = 6 [json_name = "numeric"];
  if (_internal_has_numeric()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::numeric(this), target, stream);
  }

  // .v1.model.PoseWithCovariance pose_with_covariance = 7 [json_name = "poseWithCovariance"];
  if (_internal_has_pose_with_covariance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::pose_with_covariance(this), target, stream);
  }

  // .v1.model.Point point = 8 [json_name = "point"];
  if (_internal_has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::point(this), target, stream);
  }

  // .v1.model.Joy joy = 9 [json_name = "joy"];
  if (_internal_has_joy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::joy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.ControlDatapoint)
  return target;
}

size_t ControlDatapoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.ControlDatapoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string stream = 1 [json_name = "stream"];
  if (!this->stream().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_stream());
  }

  // int64 timestamp = 2 [json_name = "timestamp"];
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_timestamp());
  }

  switch (data_case()) {
    // .v1.model.Bitset bitset = 3 [json_name = "bitset"];
    case kBitset: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.bitset_);
      break;
    }
    // .v1.model.Twist twist = 4 [json_name = "twist"];
    case kTwist: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.twist_);
      break;
    }
    // .v1.model.Transform pose = 5 [json_name = "pose"];
    case kPose: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.pose_);
      break;
    }
    // .v1.model.Numeric numeric = 6 [json_name = "numeric"];
    case kNumeric: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.numeric_);
      break;
    }
    // .v1.model.PoseWithCovariance pose_with_covariance = 7 [json_name = "poseWithCovariance"];
    case kPoseWithCovariance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.pose_with_covariance_);
      break;
    }
    // .v1.model.Point point = 8 [json_name = "point"];
    case kPoint: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.point_);
      break;
    }
    // .v1.model.Joy joy = 9 [json_name = "joy"];
    case kJoy: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *data_.joy_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ControlDatapoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.ControlDatapoint)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlDatapoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ControlDatapoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.ControlDatapoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.ControlDatapoint)
    MergeFrom(*source);
  }
}

void ControlDatapoint::MergeFrom(const ControlDatapoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.ControlDatapoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.stream().empty()) {
    _internal_set_stream(from._internal_stream());
  }
  if (from.timestamp() != 0) {
    _internal_set_timestamp(from._internal_timestamp());
  }
  switch (from.data_case()) {
    case kBitset: {
      _internal_mutable_bitset()->::v1::model::Bitset::MergeFrom(from._internal_bitset());
      break;
    }
    case kTwist: {
      _internal_mutable_twist()->::v1::model::Twist::MergeFrom(from._internal_twist());
      break;
    }
    case kPose: {
      _internal_mutable_pose()->::v1::model::Transform::MergeFrom(from._internal_pose());
      break;
    }
    case kNumeric: {
      _internal_mutable_numeric()->::v1::model::Numeric::MergeFrom(from._internal_numeric());
      break;
    }
    case kPoseWithCovariance: {
      _internal_mutable_pose_with_covariance()->::v1::model::PoseWithCovariance::MergeFrom(from._internal_pose_with_covariance());
      break;
    }
    case kPoint: {
      _internal_mutable_point()->::v1::model::Point::MergeFrom(from._internal_point());
      break;
    }
    case kJoy: {
      _internal_mutable_joy()->::v1::model::Joy::MergeFrom(from._internal_joy());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
}

void ControlDatapoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.ControlDatapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlDatapoint::CopyFrom(const ControlDatapoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.ControlDatapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlDatapoint::IsInitialized() const {
  return true;
}

void ControlDatapoint::InternalSwap(ControlDatapoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &stream_, GetArenaForAllocation(),
      &other->stream_, other->GetArenaForAllocation()
  );
  swap(timestamp_, other->timestamp_);
  swap(data_, other->data_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlDatapoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[2]);
}

// ===================================================================

GenericAPIDatapoint_HeadersEntry_DoNotUse::GenericAPIDatapoint_HeadersEntry_DoNotUse() {}
GenericAPIDatapoint_HeadersEntry_DoNotUse::GenericAPIDatapoint_HeadersEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GenericAPIDatapoint_HeadersEntry_DoNotUse::MergeFrom(const GenericAPIDatapoint_HeadersEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GenericAPIDatapoint_HeadersEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[3]);
}
void GenericAPIDatapoint_HeadersEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class GenericAPIDatapoint::_Internal {
 public:
};

GenericAPIDatapoint::GenericAPIDatapoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena),
  retryablestatuscodes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:v1.model.GenericAPIDatapoint)
}
GenericAPIDatapoint::GenericAPIDatapoint(const GenericAPIDatapoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      retryablestatuscodes_(from.retryablestatuscodes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  headers_.MergeFrom(from.headers_);
  method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method().empty()) {
    method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_method(), 
      GetArenaForAllocation());
  }
  endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_endpoint().empty()) {
    endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_endpoint(), 
      GetArenaForAllocation());
  }
  body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_body().empty()) {
    body_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_body(), 
      GetArenaForAllocation());
  }
  ::memcpy(&isretryable_, &from.isretryable_,
    static_cast<size_t>(reinterpret_cast<char*>(&requireformantauth_) -
    reinterpret_cast<char*>(&isretryable_)) + sizeof(requireformantauth_));
  // @@protoc_insertion_point(copy_constructor:v1.model.GenericAPIDatapoint)
}

void GenericAPIDatapoint::SharedCtor() {
method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
body_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&isretryable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&requireformantauth_) -
    reinterpret_cast<char*>(&isretryable_)) + sizeof(requireformantauth_));
}

GenericAPIDatapoint::~GenericAPIDatapoint() {
  // @@protoc_insertion_point(destructor:v1.model.GenericAPIDatapoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenericAPIDatapoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  body_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GenericAPIDatapoint::ArenaDtor(void* object) {
  GenericAPIDatapoint* _this = reinterpret_cast< GenericAPIDatapoint* >(object);
  (void)_this;
  _this->headers_. ~MapField();
}
inline void GenericAPIDatapoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &GenericAPIDatapoint::ArenaDtor);
  }
}
void GenericAPIDatapoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GenericAPIDatapoint::Clear() {
// @@protoc_insertion_point(message_clear_start:v1.model.GenericAPIDatapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  retryablestatuscodes_.Clear();
  method_.ClearToEmpty();
  endpoint_.ClearToEmpty();
  body_.ClearToEmpty();
  ::memset(&isretryable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&requireformantauth_) -
      reinterpret_cast<char*>(&isretryable_)) + sizeof(requireformantauth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenericAPIDatapoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Method = 1 [json_name = "Method"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_method();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.GenericAPIDatapoint.Method"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string Endpoint = 2 [json_name = "Endpoint"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_endpoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.GenericAPIDatapoint.Endpoint"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> Headers = 3 [json_name = "Headers"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&headers_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string Body = 4 [json_name = "Body"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_body();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "v1.model.GenericAPIDatapoint.Body"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool IsRetryable = 5 [json_name = "IsRetryable"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          isretryable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool RequireFormantAuth = 6 [json_name = "RequireFormantAuth"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          requireformantauth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int64 RetryableStatusCodes = 7 [json_name = "RetryableStatusCodes"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_retryablestatuscodes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56) {
          _internal_add_retryablestatuscodes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericAPIDatapoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:v1.model.GenericAPIDatapoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Method = 1 [json_name = "Method"];
  if (!this->method().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method().data(), static_cast<int>(this->_internal_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.GenericAPIDatapoint.Method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_method(), target);
  }

  // string Endpoint = 2 [json_name = "Endpoint"];
  if (!this->endpoint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_endpoint().data(), static_cast<int>(this->_internal_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.GenericAPIDatapoint.Endpoint");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_endpoint(), target);
  }

  // map<string, string> Headers = 3 [json_name = "Headers"];
  if (!this->_internal_headers().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.GenericAPIDatapoint.HeadersEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "v1.model.GenericAPIDatapoint.HeadersEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_headers().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_headers().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = GenericAPIDatapoint_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_headers().begin();
          it != this->_internal_headers().end(); ++it) {
        target = GenericAPIDatapoint_HeadersEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string Body = 4 [json_name = "Body"];
  if (!this->body().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_body().data(), static_cast<int>(this->_internal_body().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "v1.model.GenericAPIDatapoint.Body");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_body(), target);
  }

  // bool IsRetryable = 5 [json_name = "IsRetryable"];
  if (this->isretryable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_isretryable(), target);
  }

  // bool RequireFormantAuth = 6 [json_name = "RequireFormantAuth"];
  if (this->requireformantauth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_requireformantauth(), target);
  }

  // repeated int64 RetryableStatusCodes = 7 [json_name = "RetryableStatusCodes"];
  {
    int byte_size = _retryablestatuscodes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          7, _internal_retryablestatuscodes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:v1.model.GenericAPIDatapoint)
  return target;
}

size_t GenericAPIDatapoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:v1.model.GenericAPIDatapoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> Headers = 3 [json_name = "Headers"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_headers_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_headers().begin();
      it != this->_internal_headers().end(); ++it) {
    total_size += GenericAPIDatapoint_HeadersEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated int64 RetryableStatusCodes = 7 [json_name = "RetryableStatusCodes"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->retryablestatuscodes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _retryablestatuscodes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string Method = 1 [json_name = "Method"];
  if (!this->method().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method());
  }

  // string Endpoint = 2 [json_name = "Endpoint"];
  if (!this->endpoint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endpoint());
  }

  // string Body = 4 [json_name = "Body"];
  if (!this->body().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_body());
  }

  // bool IsRetryable = 5 [json_name = "IsRetryable"];
  if (this->isretryable() != 0) {
    total_size += 1 + 1;
  }

  // bool RequireFormantAuth = 6 [json_name = "RequireFormantAuth"];
  if (this->requireformantauth() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericAPIDatapoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:v1.model.GenericAPIDatapoint)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericAPIDatapoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericAPIDatapoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:v1.model.GenericAPIDatapoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:v1.model.GenericAPIDatapoint)
    MergeFrom(*source);
  }
}

void GenericAPIDatapoint::MergeFrom(const GenericAPIDatapoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:v1.model.GenericAPIDatapoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  retryablestatuscodes_.MergeFrom(from.retryablestatuscodes_);
  if (!from.method().empty()) {
    _internal_set_method(from._internal_method());
  }
  if (!from.endpoint().empty()) {
    _internal_set_endpoint(from._internal_endpoint());
  }
  if (!from.body().empty()) {
    _internal_set_body(from._internal_body());
  }
  if (from.isretryable() != 0) {
    _internal_set_isretryable(from._internal_isretryable());
  }
  if (from.requireformantauth() != 0) {
    _internal_set_requireformantauth(from._internal_requireformantauth());
  }
}

void GenericAPIDatapoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:v1.model.GenericAPIDatapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericAPIDatapoint::CopyFrom(const GenericAPIDatapoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:v1.model.GenericAPIDatapoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericAPIDatapoint::IsInitialized() const {
  return true;
}

void GenericAPIDatapoint::InternalSwap(GenericAPIDatapoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  headers_.InternalSwap(&other->headers_);
  retryablestatuscodes_.InternalSwap(&other->retryablestatuscodes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &method_, GetArenaForAllocation(),
      &other->method_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &endpoint_, GetArenaForAllocation(),
      &other->endpoint_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &body_, GetArenaForAllocation(),
      &other->body_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericAPIDatapoint, requireformantauth_)
      + sizeof(GenericAPIDatapoint::requireformantauth_)
      - PROTOBUF_FIELD_OFFSET(GenericAPIDatapoint, isretryable_)>(
          reinterpret_cast<char*>(&isretryable_),
          reinterpret_cast<char*>(&other->isretryable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericAPIDatapoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_getter, &descriptor_table_protos_2fmodel_2fv1_2fdatapoint_2eproto_once,
      file_level_metadata_protos_2fmodel_2fv1_2fdatapoint_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::v1::model::Datapoint_TagsEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::Datapoint_TagsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Datapoint_TagsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::Datapoint* Arena::CreateMaybeMessage< ::v1::model::Datapoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::Datapoint >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::ControlDatapoint* Arena::CreateMaybeMessage< ::v1::model::ControlDatapoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::ControlDatapoint >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse* Arena::CreateMaybeMessage< ::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::GenericAPIDatapoint_HeadersEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::v1::model::GenericAPIDatapoint* Arena::CreateMaybeMessage< ::v1::model::GenericAPIDatapoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::v1::model::GenericAPIDatapoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

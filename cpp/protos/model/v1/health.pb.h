// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/model/v1/health.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fhealth_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fhealth_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmodel_2fv1_2fhealth_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmodel_2fv1_2fhealth_2eproto;
namespace v1 {
namespace model {
class Battery;
struct BatteryDefaultTypeInternal;
extern BatteryDefaultTypeInternal _Battery_default_instance_;
class BufferMetadata;
struct BufferMetadataDefaultTypeInternal;
extern BufferMetadataDefaultTypeInternal _BufferMetadata_default_instance_;
class Health;
struct HealthDefaultTypeInternal;
extern HealthDefaultTypeInternal _Health_default_instance_;
}  // namespace model
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::model::Battery* Arena::CreateMaybeMessage<::v1::model::Battery>(Arena*);
template<> ::v1::model::BufferMetadata* Arena::CreateMaybeMessage<::v1::model::BufferMetadata>(Arena*);
template<> ::v1::model::Health* Arena::CreateMaybeMessage<::v1::model::Health>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace model {

enum HealthStatus : int {
  HEALTH_UNKNOWN = 0,
  HEALTH_OPERATIONAL = 1,
  HEALTH_OFFLINE = 2,
  HEALTH_ERROR = 3,
  HealthStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  HealthStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool HealthStatus_IsValid(int value);
constexpr HealthStatus HealthStatus_MIN = HEALTH_UNKNOWN;
constexpr HealthStatus HealthStatus_MAX = HEALTH_ERROR;
constexpr int HealthStatus_ARRAYSIZE = HealthStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* HealthStatus_descriptor();
template<typename T>
inline const std::string& HealthStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, HealthStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function HealthStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    HealthStatus_descriptor(), enum_t_value);
}
inline bool HealthStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, HealthStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<HealthStatus>(
    HealthStatus_descriptor(), name, value);
}
// ===================================================================

class Health final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Health) */ {
 public:
  inline Health() : Health(nullptr) {}
  ~Health() override;
  explicit constexpr Health(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Health(const Health& from);
  Health(Health&& from) noexcept
    : Health() {
    *this = ::std::move(from);
  }

  inline Health& operator=(const Health& from) {
    CopyFrom(from);
    return *this;
  }
  inline Health& operator=(Health&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Health& default_instance() {
    return *internal_default_instance();
  }
  enum ClockCase {
    kSkewMs = 2,
    CLOCK_NOT_SET = 0,
  };

  static inline const Health* internal_default_instance() {
    return reinterpret_cast<const Health*>(
               &_Health_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Health& a, Health& b) {
    a.Swap(&b);
  }
  inline void Swap(Health* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Health* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Health* New() const final {
    return new Health();
  }

  Health* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Health>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Health& from);
  void MergeFrom(const Health& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Health* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Health";
  }
  protected:
  explicit Health(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kSkewMsFieldNumber = 2,
  };
  // .v1.model.HealthStatus status = 1 [json_name = "status"];
  void clear_status();
  ::v1::model::HealthStatus status() const;
  void set_status(::v1::model::HealthStatus value);
  private:
  ::v1::model::HealthStatus _internal_status() const;
  void _internal_set_status(::v1::model::HealthStatus value);
  public:

  // int64 skew_ms = 2 [json_name = "skewMs"];
  bool has_skew_ms() const;
  private:
  bool _internal_has_skew_ms() const;
  public:
  void clear_skew_ms();
  ::PROTOBUF_NAMESPACE_ID::int64 skew_ms() const;
  void set_skew_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_skew_ms() const;
  void _internal_set_skew_ms(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  void clear_clock();
  ClockCase clock_case() const;
  // @@protoc_insertion_point(class_scope:v1.model.Health)
 private:
  class _Internal;
  void set_has_skew_ms();

  inline bool has_clock() const;
  inline void clear_has_clock();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int status_;
  union ClockUnion {
    constexpr ClockUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int64 skew_ms_;
  } clock_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class Battery final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.Battery) */ {
 public:
  inline Battery() : Battery(nullptr) {}
  ~Battery() override;
  explicit constexpr Battery(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Battery(const Battery& from);
  Battery(Battery&& from) noexcept
    : Battery() {
    *this = ::std::move(from);
  }

  inline Battery& operator=(const Battery& from) {
    CopyFrom(from);
    return *this;
  }
  inline Battery& operator=(Battery&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Battery& default_instance() {
    return *internal_default_instance();
  }
  static inline const Battery* internal_default_instance() {
    return reinterpret_cast<const Battery*>(
               &_Battery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Battery& a, Battery& b) {
    a.Swap(&b);
  }
  inline void Swap(Battery* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Battery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Battery* New() const final {
    return new Battery();
  }

  Battery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Battery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Battery& from);
  void MergeFrom(const Battery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Battery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.Battery";
  }
  protected:
  explicit Battery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPercentageFieldNumber = 1,
    kVoltageFieldNumber = 2,
    kCurrentFieldNumber = 3,
    kChargeFieldNumber = 4,
  };
  // double percentage = 1 [json_name = "percentage"];
  void clear_percentage();
  double percentage() const;
  void set_percentage(double value);
  private:
  double _internal_percentage() const;
  void _internal_set_percentage(double value);
  public:

  // double voltage = 2 [json_name = "voltage"];
  void clear_voltage();
  double voltage() const;
  void set_voltage(double value);
  private:
  double _internal_voltage() const;
  void _internal_set_voltage(double value);
  public:

  // double current = 3 [json_name = "current"];
  void clear_current();
  double current() const;
  void set_current(double value);
  private:
  double _internal_current() const;
  void _internal_set_current(double value);
  public:

  // double charge = 4 [json_name = "charge"];
  void clear_charge();
  double charge() const;
  void set_charge(double value);
  private:
  double _internal_charge() const;
  void _internal_set_charge(double value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.Battery)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double percentage_;
  double voltage_;
  double current_;
  double charge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto;
};
// -------------------------------------------------------------------

class BufferMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.model.BufferMetadata) */ {
 public:
  inline BufferMetadata() : BufferMetadata(nullptr) {}
  ~BufferMetadata() override;
  explicit constexpr BufferMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BufferMetadata(const BufferMetadata& from);
  BufferMetadata(BufferMetadata&& from) noexcept
    : BufferMetadata() {
    *this = ::std::move(from);
  }

  inline BufferMetadata& operator=(const BufferMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline BufferMetadata& operator=(BufferMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BufferMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const BufferMetadata* internal_default_instance() {
    return reinterpret_cast<const BufferMetadata*>(
               &_BufferMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BufferMetadata& a, BufferMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(BufferMetadata* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BufferMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BufferMetadata* New() const final {
    return new BufferMetadata();
  }

  BufferMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BufferMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BufferMetadata& from);
  void MergeFrom(const BufferMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BufferMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.model.BufferMetadata";
  }
  protected:
  explicit BufferMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 1,
    kLatestTtlStreamChannelBufferedBytesFieldNumber = 2,
    kReliableStreamChannelBufferedBytesFieldNumber = 3,
    kLatestReliableStreamChannelBufferedBytesFieldNumber = 4,
    kLatestTryOnceStreamChannelBufferedBytesFieldNumber = 5,
  };
  // string session_id = 1 [json_name = "sessionId"];
  void clear_session_id();
  const std::string& session_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // uint64 latest_ttl_stream_channel_buffered_bytes = 2 [json_name = "latestTtlStreamChannelBufferedBytes"];
  void clear_latest_ttl_stream_channel_buffered_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_ttl_stream_channel_buffered_bytes() const;
  void set_latest_ttl_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_ttl_stream_channel_buffered_bytes() const;
  void _internal_set_latest_ttl_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 reliable_stream_channel_buffered_bytes = 3 [json_name = "reliableStreamChannelBufferedBytes"];
  void clear_reliable_stream_channel_buffered_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 reliable_stream_channel_buffered_bytes() const;
  void set_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_reliable_stream_channel_buffered_bytes() const;
  void _internal_set_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 latest_reliable_stream_channel_buffered_bytes = 4 [json_name = "latestReliableStreamChannelBufferedBytes"];
  void clear_latest_reliable_stream_channel_buffered_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_reliable_stream_channel_buffered_bytes() const;
  void set_latest_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_reliable_stream_channel_buffered_bytes() const;
  void _internal_set_latest_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 latest_try_once_stream_channel_buffered_bytes = 5 [json_name = "latestTryOnceStreamChannelBufferedBytes"];
  void clear_latest_try_once_stream_channel_buffered_bytes();
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_try_once_stream_channel_buffered_bytes() const;
  void set_latest_try_once_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_latest_try_once_stream_channel_buffered_bytes() const;
  void _internal_set_latest_try_once_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.model.BufferMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_ttl_stream_channel_buffered_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 reliable_stream_channel_buffered_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_reliable_stream_channel_buffered_bytes_;
  ::PROTOBUF_NAMESPACE_ID::uint64 latest_try_once_stream_channel_buffered_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fmodel_2fv1_2fhealth_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Health

// .v1.model.HealthStatus status = 1 [json_name = "status"];
inline void Health::clear_status() {
  status_ = 0;
}
inline ::v1::model::HealthStatus Health::_internal_status() const {
  return static_cast< ::v1::model::HealthStatus >(status_);
}
inline ::v1::model::HealthStatus Health::status() const {
  // @@protoc_insertion_point(field_get:v1.model.Health.status)
  return _internal_status();
}
inline void Health::_internal_set_status(::v1::model::HealthStatus value) {
  
  status_ = value;
}
inline void Health::set_status(::v1::model::HealthStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:v1.model.Health.status)
}

// int64 skew_ms = 2 [json_name = "skewMs"];
inline bool Health::_internal_has_skew_ms() const {
  return clock_case() == kSkewMs;
}
inline bool Health::has_skew_ms() const {
  return _internal_has_skew_ms();
}
inline void Health::set_has_skew_ms() {
  _oneof_case_[0] = kSkewMs;
}
inline void Health::clear_skew_ms() {
  if (_internal_has_skew_ms()) {
    clock_.skew_ms_ = int64_t{0};
    clear_has_clock();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Health::_internal_skew_ms() const {
  if (_internal_has_skew_ms()) {
    return clock_.skew_ms_;
  }
  return int64_t{0};
}
inline void Health::_internal_set_skew_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  if (!_internal_has_skew_ms()) {
    clear_clock();
    set_has_skew_ms();
  }
  clock_.skew_ms_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Health::skew_ms() const {
  // @@protoc_insertion_point(field_get:v1.model.Health.skew_ms)
  return _internal_skew_ms();
}
inline void Health::set_skew_ms(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_skew_ms(value);
  // @@protoc_insertion_point(field_set:v1.model.Health.skew_ms)
}

inline bool Health::has_clock() const {
  return clock_case() != CLOCK_NOT_SET;
}
inline void Health::clear_has_clock() {
  _oneof_case_[0] = CLOCK_NOT_SET;
}
inline Health::ClockCase Health::clock_case() const {
  return Health::ClockCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Battery

// double percentage = 1 [json_name = "percentage"];
inline void Battery::clear_percentage() {
  percentage_ = 0;
}
inline double Battery::_internal_percentage() const {
  return percentage_;
}
inline double Battery::percentage() const {
  // @@protoc_insertion_point(field_get:v1.model.Battery.percentage)
  return _internal_percentage();
}
inline void Battery::_internal_set_percentage(double value) {
  
  percentage_ = value;
}
inline void Battery::set_percentage(double value) {
  _internal_set_percentage(value);
  // @@protoc_insertion_point(field_set:v1.model.Battery.percentage)
}

// double voltage = 2 [json_name = "voltage"];
inline void Battery::clear_voltage() {
  voltage_ = 0;
}
inline double Battery::_internal_voltage() const {
  return voltage_;
}
inline double Battery::voltage() const {
  // @@protoc_insertion_point(field_get:v1.model.Battery.voltage)
  return _internal_voltage();
}
inline void Battery::_internal_set_voltage(double value) {
  
  voltage_ = value;
}
inline void Battery::set_voltage(double value) {
  _internal_set_voltage(value);
  // @@protoc_insertion_point(field_set:v1.model.Battery.voltage)
}

// double current = 3 [json_name = "current"];
inline void Battery::clear_current() {
  current_ = 0;
}
inline double Battery::_internal_current() const {
  return current_;
}
inline double Battery::current() const {
  // @@protoc_insertion_point(field_get:v1.model.Battery.current)
  return _internal_current();
}
inline void Battery::_internal_set_current(double value) {
  
  current_ = value;
}
inline void Battery::set_current(double value) {
  _internal_set_current(value);
  // @@protoc_insertion_point(field_set:v1.model.Battery.current)
}

// double charge = 4 [json_name = "charge"];
inline void Battery::clear_charge() {
  charge_ = 0;
}
inline double Battery::_internal_charge() const {
  return charge_;
}
inline double Battery::charge() const {
  // @@protoc_insertion_point(field_get:v1.model.Battery.charge)
  return _internal_charge();
}
inline void Battery::_internal_set_charge(double value) {
  
  charge_ = value;
}
inline void Battery::set_charge(double value) {
  _internal_set_charge(value);
  // @@protoc_insertion_point(field_set:v1.model.Battery.charge)
}

// -------------------------------------------------------------------

// BufferMetadata

// string session_id = 1 [json_name = "sessionId"];
inline void BufferMetadata::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& BufferMetadata::session_id() const {
  // @@protoc_insertion_point(field_get:v1.model.BufferMetadata.session_id)
  return _internal_session_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BufferMetadata::set_session_id(ArgT0&& arg0, ArgT... args) {
 
 session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.model.BufferMetadata.session_id)
}
inline std::string* BufferMetadata::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:v1.model.BufferMetadata.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& BufferMetadata::_internal_session_id() const {
  return session_id_.Get();
}
inline void BufferMetadata::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BufferMetadata::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BufferMetadata::release_session_id() {
  // @@protoc_insertion_point(field_release:v1.model.BufferMetadata.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BufferMetadata::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.model.BufferMetadata.session_id)
}

// uint64 latest_ttl_stream_channel_buffered_bytes = 2 [json_name = "latestTtlStreamChannelBufferedBytes"];
inline void BufferMetadata::clear_latest_ttl_stream_channel_buffered_bytes() {
  latest_ttl_stream_channel_buffered_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::_internal_latest_ttl_stream_channel_buffered_bytes() const {
  return latest_ttl_stream_channel_buffered_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::latest_ttl_stream_channel_buffered_bytes() const {
  // @@protoc_insertion_point(field_get:v1.model.BufferMetadata.latest_ttl_stream_channel_buffered_bytes)
  return _internal_latest_ttl_stream_channel_buffered_bytes();
}
inline void BufferMetadata::_internal_set_latest_ttl_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_ttl_stream_channel_buffered_bytes_ = value;
}
inline void BufferMetadata::set_latest_ttl_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_ttl_stream_channel_buffered_bytes(value);
  // @@protoc_insertion_point(field_set:v1.model.BufferMetadata.latest_ttl_stream_channel_buffered_bytes)
}

// uint64 reliable_stream_channel_buffered_bytes = 3 [json_name = "reliableStreamChannelBufferedBytes"];
inline void BufferMetadata::clear_reliable_stream_channel_buffered_bytes() {
  reliable_stream_channel_buffered_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::_internal_reliable_stream_channel_buffered_bytes() const {
  return reliable_stream_channel_buffered_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::reliable_stream_channel_buffered_bytes() const {
  // @@protoc_insertion_point(field_get:v1.model.BufferMetadata.reliable_stream_channel_buffered_bytes)
  return _internal_reliable_stream_channel_buffered_bytes();
}
inline void BufferMetadata::_internal_set_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  reliable_stream_channel_buffered_bytes_ = value;
}
inline void BufferMetadata::set_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_reliable_stream_channel_buffered_bytes(value);
  // @@protoc_insertion_point(field_set:v1.model.BufferMetadata.reliable_stream_channel_buffered_bytes)
}

// uint64 latest_reliable_stream_channel_buffered_bytes = 4 [json_name = "latestReliableStreamChannelBufferedBytes"];
inline void BufferMetadata::clear_latest_reliable_stream_channel_buffered_bytes() {
  latest_reliable_stream_channel_buffered_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::_internal_latest_reliable_stream_channel_buffered_bytes() const {
  return latest_reliable_stream_channel_buffered_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::latest_reliable_stream_channel_buffered_bytes() const {
  // @@protoc_insertion_point(field_get:v1.model.BufferMetadata.latest_reliable_stream_channel_buffered_bytes)
  return _internal_latest_reliable_stream_channel_buffered_bytes();
}
inline void BufferMetadata::_internal_set_latest_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_reliable_stream_channel_buffered_bytes_ = value;
}
inline void BufferMetadata::set_latest_reliable_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_reliable_stream_channel_buffered_bytes(value);
  // @@protoc_insertion_point(field_set:v1.model.BufferMetadata.latest_reliable_stream_channel_buffered_bytes)
}

// uint64 latest_try_once_stream_channel_buffered_bytes = 5 [json_name = "latestTryOnceStreamChannelBufferedBytes"];
inline void BufferMetadata::clear_latest_try_once_stream_channel_buffered_bytes() {
  latest_try_once_stream_channel_buffered_bytes_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::_internal_latest_try_once_stream_channel_buffered_bytes() const {
  return latest_try_once_stream_channel_buffered_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BufferMetadata::latest_try_once_stream_channel_buffered_bytes() const {
  // @@protoc_insertion_point(field_get:v1.model.BufferMetadata.latest_try_once_stream_channel_buffered_bytes)
  return _internal_latest_try_once_stream_channel_buffered_bytes();
}
inline void BufferMetadata::_internal_set_latest_try_once_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  latest_try_once_stream_channel_buffered_bytes_ = value;
}
inline void BufferMetadata::set_latest_try_once_stream_channel_buffered_bytes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_latest_try_once_stream_channel_buffered_bytes(value);
  // @@protoc_insertion_point(field_set:v1.model.BufferMetadata.latest_try_once_stream_channel_buffered_bytes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace v1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::v1::model::HealthStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::v1::model::HealthStatus>() {
  return ::v1::model::HealthStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmodel_2fv1_2fhealth_2eproto

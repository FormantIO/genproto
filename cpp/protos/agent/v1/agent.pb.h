// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/agent/v1/agent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "protos/model/v1/datapoint.pb.h"
#include "protos/model/v1/intervention.pb.h"
#include "protos/model/v1/commands.pb.h"
#include "protos/model/v1/config.pb.h"
#include "protos/model/v1/math.pb.h"
#include "protos/model/v1/event.pb.h"
#include "protos/model/v1/health.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fagent_2fv1_2fagent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fagent_2fv1_2fagent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[54]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fagent_2fv1_2fagent_2eproto;
namespace v1 {
namespace agent {
class ClearTransformTreeRequest;
struct ClearTransformTreeRequestDefaultTypeInternal;
extern ClearTransformTreeRequestDefaultTypeInternal _ClearTransformTreeRequest_default_instance_;
class ClearTransformTreeResponse;
struct ClearTransformTreeResponseDefaultTypeInternal;
extern ClearTransformTreeResponseDefaultTypeInternal _ClearTransformTreeResponse_default_instance_;
class CreateEventError;
struct CreateEventErrorDefaultTypeInternal;
extern CreateEventErrorDefaultTypeInternal _CreateEventError_default_instance_;
class CreateEventRequest;
struct CreateEventRequestDefaultTypeInternal;
extern CreateEventRequestDefaultTypeInternal _CreateEventRequest_default_instance_;
class CreateEventResponse;
struct CreateEventResponseDefaultTypeInternal;
extern CreateEventResponseDefaultTypeInternal _CreateEventResponse_default_instance_;
class GetAgentConfigurationRequest;
struct GetAgentConfigurationRequestDefaultTypeInternal;
extern GetAgentConfigurationRequestDefaultTypeInternal _GetAgentConfigurationRequest_default_instance_;
class GetAgentConfigurationResponse;
struct GetAgentConfigurationResponseDefaultTypeInternal;
extern GetAgentConfigurationResponseDefaultTypeInternal _GetAgentConfigurationResponse_default_instance_;
class GetApplicationConfigurationRequest;
struct GetApplicationConfigurationRequestDefaultTypeInternal;
extern GetApplicationConfigurationRequestDefaultTypeInternal _GetApplicationConfigurationRequest_default_instance_;
class GetApplicationConfigurationResponse;
struct GetApplicationConfigurationResponseDefaultTypeInternal;
extern GetApplicationConfigurationResponseDefaultTypeInternal _GetApplicationConfigurationResponse_default_instance_;
class GetBufferMetadataRequest;
struct GetBufferMetadataRequestDefaultTypeInternal;
extern GetBufferMetadataRequestDefaultTypeInternal _GetBufferMetadataRequest_default_instance_;
class GetBufferMetadataResponse;
struct GetBufferMetadataResponseDefaultTypeInternal;
extern GetBufferMetadataResponseDefaultTypeInternal _GetBufferMetadataResponse_default_instance_;
class GetCommandRequestRequest;
struct GetCommandRequestRequestDefaultTypeInternal;
extern GetCommandRequestRequestDefaultTypeInternal _GetCommandRequestRequest_default_instance_;
class GetCommandRequestResponse;
struct GetCommandRequestResponseDefaultTypeInternal;
extern GetCommandRequestResponseDefaultTypeInternal _GetCommandRequestResponse_default_instance_;
class GetCommandRequestStreamRequest;
struct GetCommandRequestStreamRequestDefaultTypeInternal;
extern GetCommandRequestStreamRequestDefaultTypeInternal _GetCommandRequestStreamRequest_default_instance_;
class GetCommandRequestStreamResponse;
struct GetCommandRequestStreamResponseDefaultTypeInternal;
extern GetCommandRequestStreamResponseDefaultTypeInternal _GetCommandRequestStreamResponse_default_instance_;
class GetConfigBlobDataRequest;
struct GetConfigBlobDataRequestDefaultTypeInternal;
extern GetConfigBlobDataRequestDefaultTypeInternal _GetConfigBlobDataRequest_default_instance_;
class GetConfigBlobDataResponse;
struct GetConfigBlobDataResponseDefaultTypeInternal;
extern GetConfigBlobDataResponseDefaultTypeInternal _GetConfigBlobDataResponse_default_instance_;
class GetCustomDataChannelMessageStreamRequest;
struct GetCustomDataChannelMessageStreamRequestDefaultTypeInternal;
extern GetCustomDataChannelMessageStreamRequestDefaultTypeInternal _GetCustomDataChannelMessageStreamRequest_default_instance_;
class GetCustomDataChannelMessageStreamResponse;
struct GetCustomDataChannelMessageStreamResponseDefaultTypeInternal;
extern GetCustomDataChannelMessageStreamResponseDefaultTypeInternal _GetCustomDataChannelMessageStreamResponse_default_instance_;
class GetInterventionRequestRequest;
struct GetInterventionRequestRequestDefaultTypeInternal;
extern GetInterventionRequestRequestDefaultTypeInternal _GetInterventionRequestRequest_default_instance_;
class GetInterventionResponseRequest;
struct GetInterventionResponseRequestDefaultTypeInternal;
extern GetInterventionResponseRequestDefaultTypeInternal _GetInterventionResponseRequest_default_instance_;
class GetStreamsConfigurationRequest;
struct GetStreamsConfigurationRequestDefaultTypeInternal;
extern GetStreamsConfigurationRequestDefaultTypeInternal _GetStreamsConfigurationRequest_default_instance_;
class GetStreamsConfigurationResponse;
struct GetStreamsConfigurationResponseDefaultTypeInternal;
extern GetStreamsConfigurationResponseDefaultTypeInternal _GetStreamsConfigurationResponse_default_instance_;
class GetTelemetryListenerStreamRequest;
struct GetTelemetryListenerStreamRequestDefaultTypeInternal;
extern GetTelemetryListenerStreamRequestDefaultTypeInternal _GetTelemetryListenerStreamRequest_default_instance_;
class GetTelemetryListenerStreamResponse;
struct GetTelemetryListenerStreamResponseDefaultTypeInternal;
extern GetTelemetryListenerStreamResponseDefaultTypeInternal _GetTelemetryListenerStreamResponse_default_instance_;
class GetTeleopControlDataStreamRequest;
struct GetTeleopControlDataStreamRequestDefaultTypeInternal;
extern GetTeleopControlDataStreamRequestDefaultTypeInternal _GetTeleopControlDataStreamRequest_default_instance_;
class GetTeleopControlDataStreamResponse;
struct GetTeleopControlDataStreamResponseDefaultTypeInternal;
extern GetTeleopControlDataStreamResponseDefaultTypeInternal _GetTeleopControlDataStreamResponse_default_instance_;
class GetTeleopHeartbeatStreamRequest;
struct GetTeleopHeartbeatStreamRequestDefaultTypeInternal;
extern GetTeleopHeartbeatStreamRequestDefaultTypeInternal _GetTeleopHeartbeatStreamRequest_default_instance_;
class GetTeleopHeartbeatStreamResponse;
struct GetTeleopHeartbeatStreamResponseDefaultTypeInternal;
extern GetTeleopHeartbeatStreamResponseDefaultTypeInternal _GetTeleopHeartbeatStreamResponse_default_instance_;
class GetTeleopInfoRequest;
struct GetTeleopInfoRequestDefaultTypeInternal;
extern GetTeleopInfoRequestDefaultTypeInternal _GetTeleopInfoRequest_default_instance_;
class GetTeleopInfoResponse;
struct GetTeleopInfoResponseDefaultTypeInternal;
extern GetTeleopInfoResponseDefaultTypeInternal _GetTeleopInfoResponse_default_instance_;
class HealthRequest;
struct HealthRequestDefaultTypeInternal;
extern HealthRequestDefaultTypeInternal _HealthRequest_default_instance_;
class HealthResponse;
struct HealthResponseDefaultTypeInternal;
extern HealthResponseDefaultTypeInternal _HealthResponse_default_instance_;
class PostDataError;
struct PostDataErrorDefaultTypeInternal;
extern PostDataErrorDefaultTypeInternal _PostDataError_default_instance_;
class PostDataMultiError;
struct PostDataMultiErrorDefaultTypeInternal;
extern PostDataMultiErrorDefaultTypeInternal _PostDataMultiError_default_instance_;
class PostDataMultiRequest;
struct PostDataMultiRequestDefaultTypeInternal;
extern PostDataMultiRequestDefaultTypeInternal _PostDataMultiRequest_default_instance_;
class PostDataMultiResponse;
struct PostDataMultiResponseDefaultTypeInternal;
extern PostDataMultiResponseDefaultTypeInternal _PostDataMultiResponse_default_instance_;
class PostDataResponse;
struct PostDataResponseDefaultTypeInternal;
extern PostDataResponseDefaultTypeInternal _PostDataResponse_default_instance_;
class PostGenericAPIRequestResponse;
struct PostGenericAPIRequestResponseDefaultTypeInternal;
extern PostGenericAPIRequestResponseDefaultTypeInternal _PostGenericAPIRequestResponse_default_instance_;
class PostGenericAPIUnbufferedRequestResponse;
struct PostGenericAPIUnbufferedRequestResponseDefaultTypeInternal;
extern PostGenericAPIUnbufferedRequestResponseDefaultTypeInternal _PostGenericAPIUnbufferedRequestResponse_default_instance_;
class PostLanRtcOfferRequest;
struct PostLanRtcOfferRequestDefaultTypeInternal;
extern PostLanRtcOfferRequestDefaultTypeInternal _PostLanRtcOfferRequest_default_instance_;
class PostLanRtcOfferResponse;
struct PostLanRtcOfferResponseDefaultTypeInternal;
extern PostLanRtcOfferResponseDefaultTypeInternal _PostLanRtcOfferResponse_default_instance_;
class PostTransformFrameResponse;
struct PostTransformFrameResponseDefaultTypeInternal;
extern PostTransformFrameResponseDefaultTypeInternal _PostTransformFrameResponse_default_instance_;
class QueryDatapointsRequest;
struct QueryDatapointsRequestDefaultTypeInternal;
extern QueryDatapointsRequestDefaultTypeInternal _QueryDatapointsRequest_default_instance_;
class QueryDatapointsResponse;
struct QueryDatapointsResponseDefaultTypeInternal;
extern QueryDatapointsResponseDefaultTypeInternal _QueryDatapointsResponse_default_instance_;
class QueryEventsRequest;
struct QueryEventsRequestDefaultTypeInternal;
extern QueryEventsRequestDefaultTypeInternal _QueryEventsRequest_default_instance_;
class QueryEventsResponse;
struct QueryEventsResponseDefaultTypeInternal;
extern QueryEventsResponseDefaultTypeInternal _QueryEventsResponse_default_instance_;
class SendCommandResponseRequest;
struct SendCommandResponseRequestDefaultTypeInternal;
extern SendCommandResponseRequestDefaultTypeInternal _SendCommandResponseRequest_default_instance_;
class SendCommandResponseResponse;
struct SendCommandResponseResponseDefaultTypeInternal;
extern SendCommandResponseResponseDefaultTypeInternal _SendCommandResponseResponse_default_instance_;
class SendOnCustomDataChannelRequest;
struct SendOnCustomDataChannelRequestDefaultTypeInternal;
extern SendOnCustomDataChannelRequestDefaultTypeInternal _SendOnCustomDataChannelRequest_default_instance_;
class SendOnCustomDataChannelResponse;
struct SendOnCustomDataChannelResponseDefaultTypeInternal;
extern SendOnCustomDataChannelResponseDefaultTypeInternal _SendOnCustomDataChannelResponse_default_instance_;
class SetBaseFrameIDRequest;
struct SetBaseFrameIDRequestDefaultTypeInternal;
extern SetBaseFrameIDRequestDefaultTypeInternal _SetBaseFrameIDRequest_default_instance_;
class SetBaseFrameIDResponse;
struct SetBaseFrameIDResponseDefaultTypeInternal;
extern SetBaseFrameIDResponseDefaultTypeInternal _SetBaseFrameIDResponse_default_instance_;
class StreamDataResponse;
struct StreamDataResponseDefaultTypeInternal;
extern StreamDataResponseDefaultTypeInternal _StreamDataResponse_default_instance_;
}  // namespace agent
}  // namespace v1
PROTOBUF_NAMESPACE_OPEN
template<> ::v1::agent::ClearTransformTreeRequest* Arena::CreateMaybeMessage<::v1::agent::ClearTransformTreeRequest>(Arena*);
template<> ::v1::agent::ClearTransformTreeResponse* Arena::CreateMaybeMessage<::v1::agent::ClearTransformTreeResponse>(Arena*);
template<> ::v1::agent::CreateEventError* Arena::CreateMaybeMessage<::v1::agent::CreateEventError>(Arena*);
template<> ::v1::agent::CreateEventRequest* Arena::CreateMaybeMessage<::v1::agent::CreateEventRequest>(Arena*);
template<> ::v1::agent::CreateEventResponse* Arena::CreateMaybeMessage<::v1::agent::CreateEventResponse>(Arena*);
template<> ::v1::agent::GetAgentConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetAgentConfigurationRequest>(Arena*);
template<> ::v1::agent::GetAgentConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetAgentConfigurationResponse>(Arena*);
template<> ::v1::agent::GetApplicationConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetApplicationConfigurationRequest>(Arena*);
template<> ::v1::agent::GetApplicationConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetApplicationConfigurationResponse>(Arena*);
template<> ::v1::agent::GetBufferMetadataRequest* Arena::CreateMaybeMessage<::v1::agent::GetBufferMetadataRequest>(Arena*);
template<> ::v1::agent::GetBufferMetadataResponse* Arena::CreateMaybeMessage<::v1::agent::GetBufferMetadataResponse>(Arena*);
template<> ::v1::agent::GetCommandRequestRequest* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestRequest>(Arena*);
template<> ::v1::agent::GetCommandRequestResponse* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestResponse>(Arena*);
template<> ::v1::agent::GetCommandRequestStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestStreamRequest>(Arena*);
template<> ::v1::agent::GetCommandRequestStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetCommandRequestStreamResponse>(Arena*);
template<> ::v1::agent::GetConfigBlobDataRequest* Arena::CreateMaybeMessage<::v1::agent::GetConfigBlobDataRequest>(Arena*);
template<> ::v1::agent::GetConfigBlobDataResponse* Arena::CreateMaybeMessage<::v1::agent::GetConfigBlobDataResponse>(Arena*);
template<> ::v1::agent::GetCustomDataChannelMessageStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetCustomDataChannelMessageStreamRequest>(Arena*);
template<> ::v1::agent::GetCustomDataChannelMessageStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetCustomDataChannelMessageStreamResponse>(Arena*);
template<> ::v1::agent::GetInterventionRequestRequest* Arena::CreateMaybeMessage<::v1::agent::GetInterventionRequestRequest>(Arena*);
template<> ::v1::agent::GetInterventionResponseRequest* Arena::CreateMaybeMessage<::v1::agent::GetInterventionResponseRequest>(Arena*);
template<> ::v1::agent::GetStreamsConfigurationRequest* Arena::CreateMaybeMessage<::v1::agent::GetStreamsConfigurationRequest>(Arena*);
template<> ::v1::agent::GetStreamsConfigurationResponse* Arena::CreateMaybeMessage<::v1::agent::GetStreamsConfigurationResponse>(Arena*);
template<> ::v1::agent::GetTelemetryListenerStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetTelemetryListenerStreamRequest>(Arena*);
template<> ::v1::agent::GetTelemetryListenerStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetTelemetryListenerStreamResponse>(Arena*);
template<> ::v1::agent::GetTeleopControlDataStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetTeleopControlDataStreamRequest>(Arena*);
template<> ::v1::agent::GetTeleopControlDataStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetTeleopControlDataStreamResponse>(Arena*);
template<> ::v1::agent::GetTeleopHeartbeatStreamRequest* Arena::CreateMaybeMessage<::v1::agent::GetTeleopHeartbeatStreamRequest>(Arena*);
template<> ::v1::agent::GetTeleopHeartbeatStreamResponse* Arena::CreateMaybeMessage<::v1::agent::GetTeleopHeartbeatStreamResponse>(Arena*);
template<> ::v1::agent::GetTeleopInfoRequest* Arena::CreateMaybeMessage<::v1::agent::GetTeleopInfoRequest>(Arena*);
template<> ::v1::agent::GetTeleopInfoResponse* Arena::CreateMaybeMessage<::v1::agent::GetTeleopInfoResponse>(Arena*);
template<> ::v1::agent::HealthRequest* Arena::CreateMaybeMessage<::v1::agent::HealthRequest>(Arena*);
template<> ::v1::agent::HealthResponse* Arena::CreateMaybeMessage<::v1::agent::HealthResponse>(Arena*);
template<> ::v1::agent::PostDataError* Arena::CreateMaybeMessage<::v1::agent::PostDataError>(Arena*);
template<> ::v1::agent::PostDataMultiError* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiError>(Arena*);
template<> ::v1::agent::PostDataMultiRequest* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiRequest>(Arena*);
template<> ::v1::agent::PostDataMultiResponse* Arena::CreateMaybeMessage<::v1::agent::PostDataMultiResponse>(Arena*);
template<> ::v1::agent::PostDataResponse* Arena::CreateMaybeMessage<::v1::agent::PostDataResponse>(Arena*);
template<> ::v1::agent::PostGenericAPIRequestResponse* Arena::CreateMaybeMessage<::v1::agent::PostGenericAPIRequestResponse>(Arena*);
template<> ::v1::agent::PostGenericAPIUnbufferedRequestResponse* Arena::CreateMaybeMessage<::v1::agent::PostGenericAPIUnbufferedRequestResponse>(Arena*);
template<> ::v1::agent::PostLanRtcOfferRequest* Arena::CreateMaybeMessage<::v1::agent::PostLanRtcOfferRequest>(Arena*);
template<> ::v1::agent::PostLanRtcOfferResponse* Arena::CreateMaybeMessage<::v1::agent::PostLanRtcOfferResponse>(Arena*);
template<> ::v1::agent::PostTransformFrameResponse* Arena::CreateMaybeMessage<::v1::agent::PostTransformFrameResponse>(Arena*);
template<> ::v1::agent::QueryDatapointsRequest* Arena::CreateMaybeMessage<::v1::agent::QueryDatapointsRequest>(Arena*);
template<> ::v1::agent::QueryDatapointsResponse* Arena::CreateMaybeMessage<::v1::agent::QueryDatapointsResponse>(Arena*);
template<> ::v1::agent::QueryEventsRequest* Arena::CreateMaybeMessage<::v1::agent::QueryEventsRequest>(Arena*);
template<> ::v1::agent::QueryEventsResponse* Arena::CreateMaybeMessage<::v1::agent::QueryEventsResponse>(Arena*);
template<> ::v1::agent::SendCommandResponseRequest* Arena::CreateMaybeMessage<::v1::agent::SendCommandResponseRequest>(Arena*);
template<> ::v1::agent::SendCommandResponseResponse* Arena::CreateMaybeMessage<::v1::agent::SendCommandResponseResponse>(Arena*);
template<> ::v1::agent::SendOnCustomDataChannelRequest* Arena::CreateMaybeMessage<::v1::agent::SendOnCustomDataChannelRequest>(Arena*);
template<> ::v1::agent::SendOnCustomDataChannelResponse* Arena::CreateMaybeMessage<::v1::agent::SendOnCustomDataChannelResponse>(Arena*);
template<> ::v1::agent::SetBaseFrameIDRequest* Arena::CreateMaybeMessage<::v1::agent::SetBaseFrameIDRequest>(Arena*);
template<> ::v1::agent::SetBaseFrameIDResponse* Arena::CreateMaybeMessage<::v1::agent::SetBaseFrameIDResponse>(Arena*);
template<> ::v1::agent::StreamDataResponse* Arena::CreateMaybeMessage<::v1::agent::StreamDataResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace v1 {
namespace agent {

// ===================================================================

class PostGenericAPIUnbufferedRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostGenericAPIUnbufferedRequestResponse) */ {
 public:
  inline PostGenericAPIUnbufferedRequestResponse() : PostGenericAPIUnbufferedRequestResponse(nullptr) {}
  ~PostGenericAPIUnbufferedRequestResponse() override;
  explicit constexpr PostGenericAPIUnbufferedRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostGenericAPIUnbufferedRequestResponse(const PostGenericAPIUnbufferedRequestResponse& from);
  PostGenericAPIUnbufferedRequestResponse(PostGenericAPIUnbufferedRequestResponse&& from) noexcept
    : PostGenericAPIUnbufferedRequestResponse() {
    *this = ::std::move(from);
  }

  inline PostGenericAPIUnbufferedRequestResponse& operator=(const PostGenericAPIUnbufferedRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostGenericAPIUnbufferedRequestResponse& operator=(PostGenericAPIUnbufferedRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostGenericAPIUnbufferedRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostGenericAPIUnbufferedRequestResponse* internal_default_instance() {
    return reinterpret_cast<const PostGenericAPIUnbufferedRequestResponse*>(
               &_PostGenericAPIUnbufferedRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PostGenericAPIUnbufferedRequestResponse& a, PostGenericAPIUnbufferedRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostGenericAPIUnbufferedRequestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostGenericAPIUnbufferedRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostGenericAPIUnbufferedRequestResponse* New() const final {
    return new PostGenericAPIUnbufferedRequestResponse();
  }

  PostGenericAPIUnbufferedRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostGenericAPIUnbufferedRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostGenericAPIUnbufferedRequestResponse& from);
  void MergeFrom(const PostGenericAPIUnbufferedRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostGenericAPIUnbufferedRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostGenericAPIUnbufferedRequestResponse";
  }
  protected:
  explicit PostGenericAPIUnbufferedRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseBodyFieldNumber = 2,
    kStatusCodeFieldNumber = 1,
  };
  // string responseBody = 2 [json_name = "responseBody"];
  void clear_responsebody();
  const std::string& responsebody() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_responsebody(ArgT0&& arg0, ArgT... args);
  std::string* mutable_responsebody();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_responsebody();
  void set_allocated_responsebody(std::string* responsebody);
  private:
  const std::string& _internal_responsebody() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_responsebody(const std::string& value);
  std::string* _internal_mutable_responsebody();
  public:

  // uint32 statusCode = 1 [json_name = "statusCode"];
  void clear_statuscode();
  ::PROTOBUF_NAMESPACE_ID::uint32 statuscode() const;
  void set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_statuscode() const;
  void _internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.PostGenericAPIUnbufferedRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr responsebody_;
  ::PROTOBUF_NAMESPACE_ID::uint32 statuscode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostGenericAPIRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostGenericAPIRequestResponse) */ {
 public:
  inline PostGenericAPIRequestResponse() : PostGenericAPIRequestResponse(nullptr) {}
  ~PostGenericAPIRequestResponse() override;
  explicit constexpr PostGenericAPIRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostGenericAPIRequestResponse(const PostGenericAPIRequestResponse& from);
  PostGenericAPIRequestResponse(PostGenericAPIRequestResponse&& from) noexcept
    : PostGenericAPIRequestResponse() {
    *this = ::std::move(from);
  }

  inline PostGenericAPIRequestResponse& operator=(const PostGenericAPIRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostGenericAPIRequestResponse& operator=(PostGenericAPIRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostGenericAPIRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostGenericAPIRequestResponse* internal_default_instance() {
    return reinterpret_cast<const PostGenericAPIRequestResponse*>(
               &_PostGenericAPIRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PostGenericAPIRequestResponse& a, PostGenericAPIRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostGenericAPIRequestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostGenericAPIRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostGenericAPIRequestResponse* New() const final {
    return new PostGenericAPIRequestResponse();
  }

  PostGenericAPIRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostGenericAPIRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostGenericAPIRequestResponse& from);
  void MergeFrom(const PostGenericAPIRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostGenericAPIRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostGenericAPIRequestResponse";
  }
  protected:
  explicit PostGenericAPIRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostGenericAPIRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class StreamDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.StreamDataResponse) */ {
 public:
  inline StreamDataResponse() : StreamDataResponse(nullptr) {}
  ~StreamDataResponse() override;
  explicit constexpr StreamDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamDataResponse(const StreamDataResponse& from);
  StreamDataResponse(StreamDataResponse&& from) noexcept
    : StreamDataResponse() {
    *this = ::std::move(from);
  }

  inline StreamDataResponse& operator=(const StreamDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamDataResponse& operator=(StreamDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamDataResponse* internal_default_instance() {
    return reinterpret_cast<const StreamDataResponse*>(
               &_StreamDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StreamDataResponse& a, StreamDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamDataResponse* New() const final {
    return new StreamDataResponse();
  }

  StreamDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamDataResponse& from);
  void MergeFrom(const StreamDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.StreamDataResponse";
  }
  protected:
  explicit StreamDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.StreamDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataResponse) */ {
 public:
  inline PostDataResponse() : PostDataResponse(nullptr) {}
  ~PostDataResponse() override;
  explicit constexpr PostDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDataResponse(const PostDataResponse& from);
  PostDataResponse(PostDataResponse&& from) noexcept
    : PostDataResponse() {
    *this = ::std::move(from);
  }

  inline PostDataResponse& operator=(const PostDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataResponse& operator=(PostDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDataResponse* internal_default_instance() {
    return reinterpret_cast<const PostDataResponse*>(
               &_PostDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PostDataResponse& a, PostDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataResponse* New() const final {
    return new PostDataResponse();
  }

  PostDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataResponse& from);
  void MergeFrom(const PostDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataResponse";
  }
  protected:
  explicit PostDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataError) */ {
 public:
  inline PostDataError() : PostDataError(nullptr) {}
  ~PostDataError() override;
  explicit constexpr PostDataError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDataError(const PostDataError& from);
  PostDataError(PostDataError&& from) noexcept
    : PostDataError() {
    *this = ::std::move(from);
  }

  inline PostDataError& operator=(const PostDataError& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataError& operator=(PostDataError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDataError& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDataError* internal_default_instance() {
    return reinterpret_cast<const PostDataError*>(
               &_PostDataError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PostDataError& a, PostDataError& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataError* New() const final {
    return new PostDataError();
  }

  PostDataError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataError& from);
  void MergeFrom(const PostDataError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataError";
  }
  protected:
  explicit PostDataError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 4,
    kIndexFieldNumber = 1,
    kCodeFieldNumber = 2,
    kRetryableFieldNumber = 3,
  };
  // string message = 4 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // uint32 index = 1 [json_name = "index"];
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::uint32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 code = 2 [json_name = "code"];
  void clear_code();
  ::PROTOBUF_NAMESPACE_ID::uint32 code() const;
  void set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_code() const;
  void _internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool retryable = 3 [json_name = "retryable"];
  void clear_retryable();
  bool retryable() const;
  void set_retryable(bool value);
  private:
  bool _internal_retryable() const;
  void _internal_set_retryable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::uint32 index_;
  ::PROTOBUF_NAMESPACE_ID::uint32 code_;
  bool retryable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiRequest) */ {
 public:
  inline PostDataMultiRequest() : PostDataMultiRequest(nullptr) {}
  ~PostDataMultiRequest() override;
  explicit constexpr PostDataMultiRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDataMultiRequest(const PostDataMultiRequest& from);
  PostDataMultiRequest(PostDataMultiRequest&& from) noexcept
    : PostDataMultiRequest() {
    *this = ::std::move(from);
  }

  inline PostDataMultiRequest& operator=(const PostDataMultiRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiRequest& operator=(PostDataMultiRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDataMultiRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDataMultiRequest* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiRequest*>(
               &_PostDataMultiRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PostDataMultiRequest& a, PostDataMultiRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiRequest* New() const final {
    return new PostDataMultiRequest();
  }

  PostDataMultiRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiRequest& from);
  void MergeFrom(const PostDataMultiRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiRequest";
  }
  protected:
  explicit PostDataMultiRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatapointsFieldNumber = 1,
  };
  // repeated .v1.model.Datapoint datapoints = 1 [json_name = "datapoints"];
  int datapoints_size() const;
  private:
  int _internal_datapoints_size() const;
  public:
  void clear_datapoints();
  ::v1::model::Datapoint* mutable_datapoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
      mutable_datapoints();
  private:
  const ::v1::model::Datapoint& _internal_datapoints(int index) const;
  ::v1::model::Datapoint* _internal_add_datapoints();
  public:
  const ::v1::model::Datapoint& datapoints(int index) const;
  ::v1::model::Datapoint* add_datapoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
      datapoints() const;

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint > datapoints_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiResponse) */ {
 public:
  inline PostDataMultiResponse() : PostDataMultiResponse(nullptr) {}
  ~PostDataMultiResponse() override;
  explicit constexpr PostDataMultiResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDataMultiResponse(const PostDataMultiResponse& from);
  PostDataMultiResponse(PostDataMultiResponse&& from) noexcept
    : PostDataMultiResponse() {
    *this = ::std::move(from);
  }

  inline PostDataMultiResponse& operator=(const PostDataMultiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiResponse& operator=(PostDataMultiResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDataMultiResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDataMultiResponse* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiResponse*>(
               &_PostDataMultiResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PostDataMultiResponse& a, PostDataMultiResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiResponse* New() const final {
    return new PostDataMultiResponse();
  }

  PostDataMultiResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiResponse& from);
  void MergeFrom(const PostDataMultiResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiResponse";
  }
  protected:
  explicit PostDataMultiResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostDataMultiError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostDataMultiError) */ {
 public:
  inline PostDataMultiError() : PostDataMultiError(nullptr) {}
  ~PostDataMultiError() override;
  explicit constexpr PostDataMultiError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostDataMultiError(const PostDataMultiError& from);
  PostDataMultiError(PostDataMultiError&& from) noexcept
    : PostDataMultiError() {
    *this = ::std::move(from);
  }

  inline PostDataMultiError& operator=(const PostDataMultiError& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostDataMultiError& operator=(PostDataMultiError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostDataMultiError& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostDataMultiError* internal_default_instance() {
    return reinterpret_cast<const PostDataMultiError*>(
               &_PostDataMultiError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PostDataMultiError& a, PostDataMultiError& b) {
    a.Swap(&b);
  }
  inline void Swap(PostDataMultiError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostDataMultiError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostDataMultiError* New() const final {
    return new PostDataMultiError();
  }

  PostDataMultiError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostDataMultiError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostDataMultiError& from);
  void MergeFrom(const PostDataMultiError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostDataMultiError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostDataMultiError";
  }
  protected:
  explicit PostDataMultiError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorsFieldNumber = 1,
  };
  // repeated .v1.agent.PostDataError errors = 1 [json_name = "errors"];
  int errors_size() const;
  private:
  int _internal_errors_size() const;
  public:
  void clear_errors();
  ::v1::agent::PostDataError* mutable_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >*
      mutable_errors();
  private:
  const ::v1::agent::PostDataError& _internal_errors(int index) const;
  ::v1::agent::PostDataError* _internal_add_errors();
  public:
  const ::v1::agent::PostDataError& errors(int index) const;
  ::v1::agent::PostDataError* add_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:v1.agent.PostDataMultiError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError > errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetInterventionRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetInterventionRequestRequest) */ {
 public:
  inline GetInterventionRequestRequest() : GetInterventionRequestRequest(nullptr) {}
  ~GetInterventionRequestRequest() override;
  explicit constexpr GetInterventionRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInterventionRequestRequest(const GetInterventionRequestRequest& from);
  GetInterventionRequestRequest(GetInterventionRequestRequest&& from) noexcept
    : GetInterventionRequestRequest() {
    *this = ::std::move(from);
  }

  inline GetInterventionRequestRequest& operator=(const GetInterventionRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterventionRequestRequest& operator=(GetInterventionRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInterventionRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInterventionRequestRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterventionRequestRequest*>(
               &_GetInterventionRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetInterventionRequestRequest& a, GetInterventionRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterventionRequestRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterventionRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterventionRequestRequest* New() const final {
    return new GetInterventionRequestRequest();
  }

  GetInterventionRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterventionRequestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterventionRequestRequest& from);
  void MergeFrom(const GetInterventionRequestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterventionRequestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetInterventionRequestRequest";
  }
  protected:
  explicit GetInterventionRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetInterventionRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetInterventionResponseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetInterventionResponseRequest) */ {
 public:
  inline GetInterventionResponseRequest() : GetInterventionResponseRequest(nullptr) {}
  ~GetInterventionResponseRequest() override;
  explicit constexpr GetInterventionResponseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetInterventionResponseRequest(const GetInterventionResponseRequest& from);
  GetInterventionResponseRequest(GetInterventionResponseRequest&& from) noexcept
    : GetInterventionResponseRequest() {
    *this = ::std::move(from);
  }

  inline GetInterventionResponseRequest& operator=(const GetInterventionResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetInterventionResponseRequest& operator=(GetInterventionResponseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetInterventionResponseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetInterventionResponseRequest* internal_default_instance() {
    return reinterpret_cast<const GetInterventionResponseRequest*>(
               &_GetInterventionResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetInterventionResponseRequest& a, GetInterventionResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetInterventionResponseRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetInterventionResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetInterventionResponseRequest* New() const final {
    return new GetInterventionResponseRequest();
  }

  GetInterventionResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetInterventionResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetInterventionResponseRequest& from);
  void MergeFrom(const GetInterventionResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetInterventionResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetInterventionResponseRequest";
  }
  protected:
  explicit GetInterventionResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
  };
  // string request_id = 1 [json_name = "requestId"];
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetInterventionResponseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetStreamsConfigurationRequest) */ {
 public:
  inline GetStreamsConfigurationRequest() : GetStreamsConfigurationRequest(nullptr) {}
  ~GetStreamsConfigurationRequest() override;
  explicit constexpr GetStreamsConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamsConfigurationRequest(const GetStreamsConfigurationRequest& from);
  GetStreamsConfigurationRequest(GetStreamsConfigurationRequest&& from) noexcept
    : GetStreamsConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetStreamsConfigurationRequest& operator=(const GetStreamsConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsConfigurationRequest& operator=(GetStreamsConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamsConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamsConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetStreamsConfigurationRequest*>(
               &_GetStreamsConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetStreamsConfigurationRequest& a, GetStreamsConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsConfigurationRequest* New() const final {
    return new GetStreamsConfigurationRequest();
  }

  GetStreamsConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsConfigurationRequest& from);
  void MergeFrom(const GetStreamsConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetStreamsConfigurationRequest";
  }
  protected:
  explicit GetStreamsConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetStreamsConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetStreamsConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetStreamsConfigurationResponse) */ {
 public:
  inline GetStreamsConfigurationResponse() : GetStreamsConfigurationResponse(nullptr) {}
  ~GetStreamsConfigurationResponse() override;
  explicit constexpr GetStreamsConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetStreamsConfigurationResponse(const GetStreamsConfigurationResponse& from);
  GetStreamsConfigurationResponse(GetStreamsConfigurationResponse&& from) noexcept
    : GetStreamsConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetStreamsConfigurationResponse& operator=(const GetStreamsConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStreamsConfigurationResponse& operator=(GetStreamsConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStreamsConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStreamsConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetStreamsConfigurationResponse*>(
               &_GetStreamsConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetStreamsConfigurationResponse& a, GetStreamsConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetStreamsConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStreamsConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetStreamsConfigurationResponse* New() const final {
    return new GetStreamsConfigurationResponse();
  }

  GetStreamsConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetStreamsConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetStreamsConfigurationResponse& from);
  void MergeFrom(const GetStreamsConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetStreamsConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetStreamsConfigurationResponse";
  }
  protected:
  explicit GetStreamsConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamsFieldNumber = 1,
  };
  // repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
  int streams_size() const;
  private:
  int _internal_streams_size() const;
  public:
  void clear_streams();
  ::v1::model::StreamConfiguration* mutable_streams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
      mutable_streams();
  private:
  const ::v1::model::StreamConfiguration& _internal_streams(int index) const;
  ::v1::model::StreamConfiguration* _internal_add_streams();
  public:
  const ::v1::model::StreamConfiguration& streams(int index) const;
  ::v1::model::StreamConfiguration* add_streams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
      streams() const;

  // @@protoc_insertion_point(class_scope:v1.agent.GetStreamsConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration > streams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetApplicationConfigurationRequest) */ {
 public:
  inline GetApplicationConfigurationRequest() : GetApplicationConfigurationRequest(nullptr) {}
  ~GetApplicationConfigurationRequest() override;
  explicit constexpr GetApplicationConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetApplicationConfigurationRequest(const GetApplicationConfigurationRequest& from);
  GetApplicationConfigurationRequest(GetApplicationConfigurationRequest&& from) noexcept
    : GetApplicationConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetApplicationConfigurationRequest& operator=(const GetApplicationConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationConfigurationRequest& operator=(GetApplicationConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetApplicationConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetApplicationConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetApplicationConfigurationRequest*>(
               &_GetApplicationConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetApplicationConfigurationRequest& a, GetApplicationConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationConfigurationRequest* New() const final {
    return new GetApplicationConfigurationRequest();
  }

  GetApplicationConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetApplicationConfigurationRequest& from);
  void MergeFrom(const GetApplicationConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetApplicationConfigurationRequest";
  }
  protected:
  explicit GetApplicationConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetApplicationConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetApplicationConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetApplicationConfigurationResponse) */ {
 public:
  inline GetApplicationConfigurationResponse() : GetApplicationConfigurationResponse(nullptr) {}
  ~GetApplicationConfigurationResponse() override;
  explicit constexpr GetApplicationConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetApplicationConfigurationResponse(const GetApplicationConfigurationResponse& from);
  GetApplicationConfigurationResponse(GetApplicationConfigurationResponse&& from) noexcept
    : GetApplicationConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetApplicationConfigurationResponse& operator=(const GetApplicationConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetApplicationConfigurationResponse& operator=(GetApplicationConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetApplicationConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetApplicationConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetApplicationConfigurationResponse*>(
               &_GetApplicationConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetApplicationConfigurationResponse& a, GetApplicationConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetApplicationConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetApplicationConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetApplicationConfigurationResponse* New() const final {
    return new GetApplicationConfigurationResponse();
  }

  GetApplicationConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetApplicationConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetApplicationConfigurationResponse& from);
  void MergeFrom(const GetApplicationConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetApplicationConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetApplicationConfigurationResponse";
  }
  protected:
  explicit GetApplicationConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .v1.model.ApplicationConfiguration configuration = 1 [json_name = "configuration"];
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::v1::model::ApplicationConfiguration& configuration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::ApplicationConfiguration* release_configuration();
  ::v1::model::ApplicationConfiguration* mutable_configuration();
  void set_allocated_configuration(::v1::model::ApplicationConfiguration* configuration);
  private:
  const ::v1::model::ApplicationConfiguration& _internal_configuration() const;
  ::v1::model::ApplicationConfiguration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::v1::model::ApplicationConfiguration* configuration);
  ::v1::model::ApplicationConfiguration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.agent.GetApplicationConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::ApplicationConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetConfigBlobDataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetConfigBlobDataRequest) */ {
 public:
  inline GetConfigBlobDataRequest() : GetConfigBlobDataRequest(nullptr) {}
  ~GetConfigBlobDataRequest() override;
  explicit constexpr GetConfigBlobDataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigBlobDataRequest(const GetConfigBlobDataRequest& from);
  GetConfigBlobDataRequest(GetConfigBlobDataRequest&& from) noexcept
    : GetConfigBlobDataRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigBlobDataRequest& operator=(const GetConfigBlobDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigBlobDataRequest& operator=(GetConfigBlobDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigBlobDataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigBlobDataRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigBlobDataRequest*>(
               &_GetConfigBlobDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetConfigBlobDataRequest& a, GetConfigBlobDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigBlobDataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigBlobDataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigBlobDataRequest* New() const final {
    return new GetConfigBlobDataRequest();
  }

  GetConfigBlobDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigBlobDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigBlobDataRequest& from);
  void MergeFrom(const GetConfigBlobDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigBlobDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetConfigBlobDataRequest";
  }
  protected:
  explicit GetConfigBlobDataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetConfigBlobDataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetConfigBlobDataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetConfigBlobDataResponse) */ {
 public:
  inline GetConfigBlobDataResponse() : GetConfigBlobDataResponse(nullptr) {}
  ~GetConfigBlobDataResponse() override;
  explicit constexpr GetConfigBlobDataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigBlobDataResponse(const GetConfigBlobDataResponse& from);
  GetConfigBlobDataResponse(GetConfigBlobDataResponse&& from) noexcept
    : GetConfigBlobDataResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigBlobDataResponse& operator=(const GetConfigBlobDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigBlobDataResponse& operator=(GetConfigBlobDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigBlobDataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigBlobDataResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigBlobDataResponse*>(
               &_GetConfigBlobDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetConfigBlobDataResponse& a, GetConfigBlobDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigBlobDataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigBlobDataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetConfigBlobDataResponse* New() const final {
    return new GetConfigBlobDataResponse();
  }

  GetConfigBlobDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetConfigBlobDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetConfigBlobDataResponse& from);
  void MergeFrom(const GetConfigBlobDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigBlobDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetConfigBlobDataResponse";
  }
  protected:
  explicit GetConfigBlobDataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlobDataFieldNumber = 1,
  };
  // .v1.model.BlobData blob_data = 1 [json_name = "blobData"];
  bool has_blob_data() const;
  private:
  bool _internal_has_blob_data() const;
  public:
  void clear_blob_data();
  const ::v1::model::BlobData& blob_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::BlobData* release_blob_data();
  ::v1::model::BlobData* mutable_blob_data();
  void set_allocated_blob_data(::v1::model::BlobData* blob_data);
  private:
  const ::v1::model::BlobData& _internal_blob_data() const;
  ::v1::model::BlobData* _internal_mutable_blob_data();
  public:
  void unsafe_arena_set_allocated_blob_data(
      ::v1::model::BlobData* blob_data);
  ::v1::model::BlobData* unsafe_arena_release_blob_data();

  // @@protoc_insertion_point(class_scope:v1.agent.GetConfigBlobDataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::BlobData* blob_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetAgentConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetAgentConfigurationRequest) */ {
 public:
  inline GetAgentConfigurationRequest() : GetAgentConfigurationRequest(nullptr) {}
  ~GetAgentConfigurationRequest() override;
  explicit constexpr GetAgentConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentConfigurationRequest(const GetAgentConfigurationRequest& from);
  GetAgentConfigurationRequest(GetAgentConfigurationRequest&& from) noexcept
    : GetAgentConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetAgentConfigurationRequest& operator=(const GetAgentConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentConfigurationRequest& operator=(GetAgentConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetAgentConfigurationRequest*>(
               &_GetAgentConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetAgentConfigurationRequest& a, GetAgentConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentConfigurationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentConfigurationRequest* New() const final {
    return new GetAgentConfigurationRequest();
  }

  GetAgentConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentConfigurationRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentConfigurationRequest& from);
  void MergeFrom(const GetAgentConfigurationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentConfigurationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetAgentConfigurationRequest";
  }
  protected:
  explicit GetAgentConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetAgentConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetAgentConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetAgentConfigurationResponse) */ {
 public:
  inline GetAgentConfigurationResponse() : GetAgentConfigurationResponse(nullptr) {}
  ~GetAgentConfigurationResponse() override;
  explicit constexpr GetAgentConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetAgentConfigurationResponse(const GetAgentConfigurationResponse& from);
  GetAgentConfigurationResponse(GetAgentConfigurationResponse&& from) noexcept
    : GetAgentConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetAgentConfigurationResponse& operator=(const GetAgentConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetAgentConfigurationResponse& operator=(GetAgentConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetAgentConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetAgentConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetAgentConfigurationResponse*>(
               &_GetAgentConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GetAgentConfigurationResponse& a, GetAgentConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetAgentConfigurationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetAgentConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetAgentConfigurationResponse* New() const final {
    return new GetAgentConfigurationResponse();
  }

  GetAgentConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetAgentConfigurationResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetAgentConfigurationResponse& from);
  void MergeFrom(const GetAgentConfigurationResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetAgentConfigurationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetAgentConfigurationResponse";
  }
  protected:
  explicit GetAgentConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .v1.model.AgentConfiguration configuration = 1 [json_name = "configuration"];
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::v1::model::AgentConfiguration& configuration() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::AgentConfiguration* release_configuration();
  ::v1::model::AgentConfiguration* mutable_configuration();
  void set_allocated_configuration(::v1::model::AgentConfiguration* configuration);
  private:
  const ::v1::model::AgentConfiguration& _internal_configuration() const;
  ::v1::model::AgentConfiguration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::v1::model::AgentConfiguration* configuration);
  ::v1::model::AgentConfiguration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:v1.agent.GetAgentConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::AgentConfiguration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetBufferMetadataRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetBufferMetadataRequest) */ {
 public:
  inline GetBufferMetadataRequest() : GetBufferMetadataRequest(nullptr) {}
  ~GetBufferMetadataRequest() override;
  explicit constexpr GetBufferMetadataRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBufferMetadataRequest(const GetBufferMetadataRequest& from);
  GetBufferMetadataRequest(GetBufferMetadataRequest&& from) noexcept
    : GetBufferMetadataRequest() {
    *this = ::std::move(from);
  }

  inline GetBufferMetadataRequest& operator=(const GetBufferMetadataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBufferMetadataRequest& operator=(GetBufferMetadataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBufferMetadataRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBufferMetadataRequest* internal_default_instance() {
    return reinterpret_cast<const GetBufferMetadataRequest*>(
               &_GetBufferMetadataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(GetBufferMetadataRequest& a, GetBufferMetadataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBufferMetadataRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBufferMetadataRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBufferMetadataRequest* New() const final {
    return new GetBufferMetadataRequest();
  }

  GetBufferMetadataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBufferMetadataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBufferMetadataRequest& from);
  void MergeFrom(const GetBufferMetadataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBufferMetadataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetBufferMetadataRequest";
  }
  protected:
  explicit GetBufferMetadataRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetBufferMetadataRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class QueryDatapointsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.QueryDatapointsRequest) */ {
 public:
  inline QueryDatapointsRequest() : QueryDatapointsRequest(nullptr) {}
  ~QueryDatapointsRequest() override;
  explicit constexpr QueryDatapointsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDatapointsRequest(const QueryDatapointsRequest& from);
  QueryDatapointsRequest(QueryDatapointsRequest&& from) noexcept
    : QueryDatapointsRequest() {
    *this = ::std::move(from);
  }

  inline QueryDatapointsRequest& operator=(const QueryDatapointsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDatapointsRequest& operator=(QueryDatapointsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDatapointsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDatapointsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryDatapointsRequest*>(
               &_QueryDatapointsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(QueryDatapointsRequest& a, QueryDatapointsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDatapointsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDatapointsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDatapointsRequest* New() const final {
    return new QueryDatapointsRequest();
  }

  QueryDatapointsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDatapointsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDatapointsRequest& from);
  void MergeFrom(const QueryDatapointsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDatapointsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.QueryDatapointsRequest";
  }
  protected:
  explicit QueryDatapointsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamNameFieldNumber = 1,
    kStartFieldNumber = 2,
    kEndFieldNumber = 3,
    kLimitFieldNumber = 4,
    kOffsetFieldNumber = 5,
  };
  // string stream_name = 1 [json_name = "streamName"];
  void clear_stream_name();
  const std::string& stream_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_stream_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_stream_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_stream_name();
  void set_allocated_stream_name(std::string* stream_name);
  private:
  const std::string& _internal_stream_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_name(const std::string& value);
  std::string* _internal_mutable_stream_name();
  public:

  // string start = 2 [json_name = "start"];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 3 [json_name = "end"];
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // uint32 limit = 4 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offset = 5 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.QueryDatapointsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stream_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class QueryDatapointsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.QueryDatapointsResponse) */ {
 public:
  inline QueryDatapointsResponse() : QueryDatapointsResponse(nullptr) {}
  ~QueryDatapointsResponse() override;
  explicit constexpr QueryDatapointsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryDatapointsResponse(const QueryDatapointsResponse& from);
  QueryDatapointsResponse(QueryDatapointsResponse&& from) noexcept
    : QueryDatapointsResponse() {
    *this = ::std::move(from);
  }

  inline QueryDatapointsResponse& operator=(const QueryDatapointsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryDatapointsResponse& operator=(QueryDatapointsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryDatapointsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryDatapointsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryDatapointsResponse*>(
               &_QueryDatapointsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(QueryDatapointsResponse& a, QueryDatapointsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryDatapointsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryDatapointsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryDatapointsResponse* New() const final {
    return new QueryDatapointsResponse();
  }

  QueryDatapointsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryDatapointsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryDatapointsResponse& from);
  void MergeFrom(const QueryDatapointsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryDatapointsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.QueryDatapointsResponse";
  }
  protected:
  explicit QueryDatapointsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .v1.model.Datapoint results = 1 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::v1::model::Datapoint* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
      mutable_results();
  private:
  const ::v1::model::Datapoint& _internal_results(int index) const;
  ::v1::model::Datapoint* _internal_add_results();
  public:
  const ::v1::model::Datapoint& results(int index) const;
  ::v1::model::Datapoint* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
      results() const;

  // @@protoc_insertion_point(class_scope:v1.agent.QueryDatapointsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class QueryEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.QueryEventsRequest) */ {
 public:
  inline QueryEventsRequest() : QueryEventsRequest(nullptr) {}
  ~QueryEventsRequest() override;
  explicit constexpr QueryEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEventsRequest(const QueryEventsRequest& from);
  QueryEventsRequest(QueryEventsRequest&& from) noexcept
    : QueryEventsRequest() {
    *this = ::std::move(from);
  }

  inline QueryEventsRequest& operator=(const QueryEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEventsRequest& operator=(QueryEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEventsRequest* internal_default_instance() {
    return reinterpret_cast<const QueryEventsRequest*>(
               &_QueryEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(QueryEventsRequest& a, QueryEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEventsRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryEventsRequest* New() const final {
    return new QueryEventsRequest();
  }

  QueryEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryEventsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryEventsRequest& from);
  void MergeFrom(const QueryEventsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEventsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.QueryEventsRequest";
  }
  protected:
  explicit QueryEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kLimitFieldNumber = 3,
    kOffsetFieldNumber = 4,
  };
  // string start = 1 [json_name = "start"];
  void clear_start();
  const std::string& start() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_start(ArgT0&& arg0, ArgT... args);
  std::string* mutable_start();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_start();
  void set_allocated_start(std::string* start);
  private:
  const std::string& _internal_start() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_start(const std::string& value);
  std::string* _internal_mutable_start();
  public:

  // string end = 2 [json_name = "end"];
  void clear_end();
  const std::string& end() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_end(ArgT0&& arg0, ArgT... args);
  std::string* mutable_end();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_end();
  void set_allocated_end(std::string* end);
  private:
  const std::string& _internal_end() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_end(const std::string& value);
  std::string* _internal_mutable_end();
  public:

  // uint32 limit = 3 [json_name = "limit"];
  void clear_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 limit() const;
  void set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_limit() const;
  void _internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 offset = 4 [json_name = "offset"];
  void clear_offset();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset() const;
  void set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_offset() const;
  void _internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.QueryEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr end_;
  ::PROTOBUF_NAMESPACE_ID::uint32 limit_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class QueryEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.QueryEventsResponse) */ {
 public:
  inline QueryEventsResponse() : QueryEventsResponse(nullptr) {}
  ~QueryEventsResponse() override;
  explicit constexpr QueryEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueryEventsResponse(const QueryEventsResponse& from);
  QueryEventsResponse(QueryEventsResponse&& from) noexcept
    : QueryEventsResponse() {
    *this = ::std::move(from);
  }

  inline QueryEventsResponse& operator=(const QueryEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryEventsResponse& operator=(QueryEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueryEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueryEventsResponse* internal_default_instance() {
    return reinterpret_cast<const QueryEventsResponse*>(
               &_QueryEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(QueryEventsResponse& a, QueryEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryEventsResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueryEventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryEventsResponse* New() const final {
    return new QueryEventsResponse();
  }

  QueryEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryEventsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryEventsResponse& from);
  void MergeFrom(const QueryEventsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryEventsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.QueryEventsResponse";
  }
  protected:
  explicit QueryEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultsFieldNumber = 1,
  };
  // repeated .v1.model.Event results = 1 [json_name = "results"];
  int results_size() const;
  private:
  int _internal_results_size() const;
  public:
  void clear_results();
  ::v1::model::Event* mutable_results(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Event >*
      mutable_results();
  private:
  const ::v1::model::Event& _internal_results(int index) const;
  ::v1::model::Event* _internal_add_results();
  public:
  const ::v1::model::Event& results(int index) const;
  ::v1::model::Event* add_results();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Event >&
      results() const;

  // @@protoc_insertion_point(class_scope:v1.agent.QueryEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Event > results_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetBufferMetadataResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetBufferMetadataResponse) */ {
 public:
  inline GetBufferMetadataResponse() : GetBufferMetadataResponse(nullptr) {}
  ~GetBufferMetadataResponse() override;
  explicit constexpr GetBufferMetadataResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetBufferMetadataResponse(const GetBufferMetadataResponse& from);
  GetBufferMetadataResponse(GetBufferMetadataResponse&& from) noexcept
    : GetBufferMetadataResponse() {
    *this = ::std::move(from);
  }

  inline GetBufferMetadataResponse& operator=(const GetBufferMetadataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetBufferMetadataResponse& operator=(GetBufferMetadataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetBufferMetadataResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetBufferMetadataResponse* internal_default_instance() {
    return reinterpret_cast<const GetBufferMetadataResponse*>(
               &_GetBufferMetadataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetBufferMetadataResponse& a, GetBufferMetadataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetBufferMetadataResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetBufferMetadataResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetBufferMetadataResponse* New() const final {
    return new GetBufferMetadataResponse();
  }

  GetBufferMetadataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetBufferMetadataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetBufferMetadataResponse& from);
  void MergeFrom(const GetBufferMetadataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetBufferMetadataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetBufferMetadataResponse";
  }
  protected:
  explicit GetBufferMetadataResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 1,
  };
  // repeated .v1.model.BufferMetadata connections = 1 [json_name = "connections"];
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::v1::model::BufferMetadata* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::BufferMetadata >*
      mutable_connections();
  private:
  const ::v1::model::BufferMetadata& _internal_connections(int index) const;
  ::v1::model::BufferMetadata* _internal_add_connections();
  public:
  const ::v1::model::BufferMetadata& connections(int index) const;
  ::v1::model::BufferMetadata* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::BufferMetadata >&
      connections() const;

  // @@protoc_insertion_point(class_scope:v1.agent.GetBufferMetadataResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::BufferMetadata > connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class HealthRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.HealthRequest) */ {
 public:
  inline HealthRequest() : HealthRequest(nullptr) {}
  ~HealthRequest() override;
  explicit constexpr HealthRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthRequest(const HealthRequest& from);
  HealthRequest(HealthRequest&& from) noexcept
    : HealthRequest() {
    *this = ::std::move(from);
  }

  inline HealthRequest& operator=(const HealthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthRequest& operator=(HealthRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthRequest* internal_default_instance() {
    return reinterpret_cast<const HealthRequest*>(
               &_HealthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(HealthRequest& a, HealthRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthRequest* New() const final {
    return new HealthRequest();
  }

  HealthRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthRequest& from);
  void MergeFrom(const HealthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.HealthRequest";
  }
  protected:
  explicit HealthRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.HealthRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class HealthResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.HealthResponse) */ {
 public:
  inline HealthResponse() : HealthResponse(nullptr) {}
  ~HealthResponse() override;
  explicit constexpr HealthResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HealthResponse(const HealthResponse& from);
  HealthResponse(HealthResponse&& from) noexcept
    : HealthResponse() {
    *this = ::std::move(from);
  }

  inline HealthResponse& operator=(const HealthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline HealthResponse& operator=(HealthResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HealthResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const HealthResponse* internal_default_instance() {
    return reinterpret_cast<const HealthResponse*>(
               &_HealthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(HealthResponse& a, HealthResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(HealthResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HealthResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HealthResponse* New() const final {
    return new HealthResponse();
  }

  HealthResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HealthResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HealthResponse& from);
  void MergeFrom(const HealthResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HealthResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.HealthResponse";
  }
  protected:
  explicit HealthResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.HealthResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestRequest) */ {
 public:
  inline GetCommandRequestRequest() : GetCommandRequestRequest(nullptr) {}
  ~GetCommandRequestRequest() override;
  explicit constexpr GetCommandRequestRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandRequestRequest(const GetCommandRequestRequest& from);
  GetCommandRequestRequest(GetCommandRequestRequest&& from) noexcept
    : GetCommandRequestRequest() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestRequest& operator=(const GetCommandRequestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestRequest& operator=(GetCommandRequestRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandRequestRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandRequestRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestRequest*>(
               &_GetCommandRequestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetCommandRequestRequest& a, GetCommandRequestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestRequest* New() const final {
    return new GetCommandRequestRequest();
  }

  GetCommandRequestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestRequest& from);
  void MergeFrom(const GetCommandRequestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestRequest";
  }
  protected:
  explicit GetCommandRequestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFilterFieldNumber = 1,
  };
  // repeated string command_filter = 1 [json_name = "commandFilter"];
  int command_filter_size() const;
  private:
  int _internal_command_filter_size() const;
  public:
  void clear_command_filter();
  const std::string& command_filter(int index) const;
  std::string* mutable_command_filter(int index);
  void set_command_filter(int index, const std::string& value);
  void set_command_filter(int index, std::string&& value);
  void set_command_filter(int index, const char* value);
  void set_command_filter(int index, const char* value, size_t size);
  std::string* add_command_filter();
  void add_command_filter(const std::string& value);
  void add_command_filter(std::string&& value);
  void add_command_filter(const char* value);
  void add_command_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_filter();
  private:
  const std::string& _internal_command_filter(int index) const;
  std::string* _internal_add_command_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestResponse) */ {
 public:
  inline GetCommandRequestResponse() : GetCommandRequestResponse(nullptr) {}
  ~GetCommandRequestResponse() override;
  explicit constexpr GetCommandRequestResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandRequestResponse(const GetCommandRequestResponse& from);
  GetCommandRequestResponse(GetCommandRequestResponse&& from) noexcept
    : GetCommandRequestResponse() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestResponse& operator=(const GetCommandRequestResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestResponse& operator=(GetCommandRequestResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandRequestResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandRequestResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestResponse*>(
               &_GetCommandRequestResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(GetCommandRequestResponse& a, GetCommandRequestResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestResponse* New() const final {
    return new GetCommandRequestResponse();
  }

  GetCommandRequestResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestResponse& from);
  void MergeFrom(const GetCommandRequestResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestResponse";
  }
  protected:
  explicit GetCommandRequestResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .v1.model.CommandRequest request = 1 [json_name = "request"];
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::v1::model::CommandRequest& request() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::CommandRequest* release_request();
  ::v1::model::CommandRequest* mutable_request();
  void set_allocated_request(::v1::model::CommandRequest* request);
  private:
  const ::v1::model::CommandRequest& _internal_request() const;
  ::v1::model::CommandRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::v1::model::CommandRequest* request);
  ::v1::model::CommandRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendCommandResponseRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendCommandResponseRequest) */ {
 public:
  inline SendCommandResponseRequest() : SendCommandResponseRequest(nullptr) {}
  ~SendCommandResponseRequest() override;
  explicit constexpr SendCommandResponseRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCommandResponseRequest(const SendCommandResponseRequest& from);
  SendCommandResponseRequest(SendCommandResponseRequest&& from) noexcept
    : SendCommandResponseRequest() {
    *this = ::std::move(from);
  }

  inline SendCommandResponseRequest& operator=(const SendCommandResponseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandResponseRequest& operator=(SendCommandResponseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCommandResponseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCommandResponseRequest* internal_default_instance() {
    return reinterpret_cast<const SendCommandResponseRequest*>(
               &_SendCommandResponseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SendCommandResponseRequest& a, SendCommandResponseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandResponseRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandResponseRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandResponseRequest* New() const final {
    return new SendCommandResponseRequest();
  }

  SendCommandResponseRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandResponseRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandResponseRequest& from);
  void MergeFrom(const SendCommandResponseRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandResponseRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendCommandResponseRequest";
  }
  protected:
  explicit SendCommandResponseRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponseFieldNumber = 1,
  };
  // .v1.model.CommandResponse response = 1 [json_name = "response"];
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::v1::model::CommandResponse& response() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::CommandResponse* release_response();
  ::v1::model::CommandResponse* mutable_response();
  void set_allocated_response(::v1::model::CommandResponse* response);
  private:
  const ::v1::model::CommandResponse& _internal_response() const;
  ::v1::model::CommandResponse* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::v1::model::CommandResponse* response);
  ::v1::model::CommandResponse* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:v1.agent.SendCommandResponseRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandResponse* response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendCommandResponseResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendCommandResponseResponse) */ {
 public:
  inline SendCommandResponseResponse() : SendCommandResponseResponse(nullptr) {}
  ~SendCommandResponseResponse() override;
  explicit constexpr SendCommandResponseResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCommandResponseResponse(const SendCommandResponseResponse& from);
  SendCommandResponseResponse(SendCommandResponseResponse&& from) noexcept
    : SendCommandResponseResponse() {
    *this = ::std::move(from);
  }

  inline SendCommandResponseResponse& operator=(const SendCommandResponseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandResponseResponse& operator=(SendCommandResponseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendCommandResponseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCommandResponseResponse* internal_default_instance() {
    return reinterpret_cast<const SendCommandResponseResponse*>(
               &_SendCommandResponseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SendCommandResponseResponse& a, SendCommandResponseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandResponseResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandResponseResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendCommandResponseResponse* New() const final {
    return new SendCommandResponseResponse();
  }

  SendCommandResponseResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendCommandResponseResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendCommandResponseResponse& from);
  void MergeFrom(const SendCommandResponseResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendCommandResponseResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendCommandResponseResponse";
  }
  protected:
  explicit SendCommandResponseResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.SendCommandResponseResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestStreamRequest) */ {
 public:
  inline GetCommandRequestStreamRequest() : GetCommandRequestStreamRequest(nullptr) {}
  ~GetCommandRequestStreamRequest() override;
  explicit constexpr GetCommandRequestStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandRequestStreamRequest(const GetCommandRequestStreamRequest& from);
  GetCommandRequestStreamRequest(GetCommandRequestStreamRequest&& from) noexcept
    : GetCommandRequestStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestStreamRequest& operator=(const GetCommandRequestStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestStreamRequest& operator=(GetCommandRequestStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandRequestStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandRequestStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestStreamRequest*>(
               &_GetCommandRequestStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(GetCommandRequestStreamRequest& a, GetCommandRequestStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestStreamRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestStreamRequest* New() const final {
    return new GetCommandRequestStreamRequest();
  }

  GetCommandRequestStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestStreamRequest& from);
  void MergeFrom(const GetCommandRequestStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestStreamRequest";
  }
  protected:
  explicit GetCommandRequestStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFilterFieldNumber = 1,
  };
  // repeated string command_filter = 1 [json_name = "commandFilter"];
  int command_filter_size() const;
  private:
  int _internal_command_filter_size() const;
  public:
  void clear_command_filter();
  const std::string& command_filter(int index) const;
  std::string* mutable_command_filter(int index);
  void set_command_filter(int index, const std::string& value);
  void set_command_filter(int index, std::string&& value);
  void set_command_filter(int index, const char* value);
  void set_command_filter(int index, const char* value, size_t size);
  std::string* add_command_filter();
  void add_command_filter(const std::string& value);
  void add_command_filter(std::string&& value);
  void add_command_filter(const char* value);
  void add_command_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& command_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_command_filter();
  private:
  const std::string& _internal_command_filter(int index) const;
  std::string* _internal_add_command_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> command_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCommandRequestStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCommandRequestStreamResponse) */ {
 public:
  inline GetCommandRequestStreamResponse() : GetCommandRequestStreamResponse(nullptr) {}
  ~GetCommandRequestStreamResponse() override;
  explicit constexpr GetCommandRequestStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCommandRequestStreamResponse(const GetCommandRequestStreamResponse& from);
  GetCommandRequestStreamResponse(GetCommandRequestStreamResponse&& from) noexcept
    : GetCommandRequestStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetCommandRequestStreamResponse& operator=(const GetCommandRequestStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCommandRequestStreamResponse& operator=(GetCommandRequestStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCommandRequestStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCommandRequestStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetCommandRequestStreamResponse*>(
               &_GetCommandRequestStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(GetCommandRequestStreamResponse& a, GetCommandRequestStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCommandRequestStreamResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCommandRequestStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCommandRequestStreamResponse* New() const final {
    return new GetCommandRequestStreamResponse();
  }

  GetCommandRequestStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCommandRequestStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCommandRequestStreamResponse& from);
  void MergeFrom(const GetCommandRequestStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCommandRequestStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCommandRequestStreamResponse";
  }
  protected:
  explicit GetCommandRequestStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
  };
  // .v1.model.CommandRequest request = 1 [json_name = "request"];
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::v1::model::CommandRequest& request() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::CommandRequest* release_request();
  ::v1::model::CommandRequest* mutable_request();
  void set_allocated_request(::v1::model::CommandRequest* request);
  private:
  const ::v1::model::CommandRequest& _internal_request() const;
  ::v1::model::CommandRequest* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::v1::model::CommandRequest* request);
  ::v1::model::CommandRequest* unsafe_arena_release_request();

  // @@protoc_insertion_point(class_scope:v1.agent.GetCommandRequestStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::CommandRequest* request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopControlDataStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopControlDataStreamRequest) */ {
 public:
  inline GetTeleopControlDataStreamRequest() : GetTeleopControlDataStreamRequest(nullptr) {}
  ~GetTeleopControlDataStreamRequest() override;
  explicit constexpr GetTeleopControlDataStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopControlDataStreamRequest(const GetTeleopControlDataStreamRequest& from);
  GetTeleopControlDataStreamRequest(GetTeleopControlDataStreamRequest&& from) noexcept
    : GetTeleopControlDataStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetTeleopControlDataStreamRequest& operator=(const GetTeleopControlDataStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopControlDataStreamRequest& operator=(GetTeleopControlDataStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopControlDataStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopControlDataStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetTeleopControlDataStreamRequest*>(
               &_GetTeleopControlDataStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(GetTeleopControlDataStreamRequest& a, GetTeleopControlDataStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopControlDataStreamRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopControlDataStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopControlDataStreamRequest* New() const final {
    return new GetTeleopControlDataStreamRequest();
  }

  GetTeleopControlDataStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopControlDataStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopControlDataStreamRequest& from);
  void MergeFrom(const GetTeleopControlDataStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopControlDataStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopControlDataStreamRequest";
  }
  protected:
  explicit GetTeleopControlDataStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFilterFieldNumber = 1,
  };
  // repeated string stream_filter = 1 [json_name = "streamFilter"];
  int stream_filter_size() const;
  private:
  int _internal_stream_filter_size() const;
  public:
  void clear_stream_filter();
  const std::string& stream_filter(int index) const;
  std::string* mutable_stream_filter(int index);
  void set_stream_filter(int index, const std::string& value);
  void set_stream_filter(int index, std::string&& value);
  void set_stream_filter(int index, const char* value);
  void set_stream_filter(int index, const char* value, size_t size);
  std::string* add_stream_filter();
  void add_stream_filter(const std::string& value);
  void add_stream_filter(std::string&& value);
  void add_stream_filter(const char* value);
  void add_stream_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stream_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stream_filter();
  private:
  const std::string& _internal_stream_filter(int index) const;
  std::string* _internal_add_stream_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopControlDataStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stream_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopControlDataStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopControlDataStreamResponse) */ {
 public:
  inline GetTeleopControlDataStreamResponse() : GetTeleopControlDataStreamResponse(nullptr) {}
  ~GetTeleopControlDataStreamResponse() override;
  explicit constexpr GetTeleopControlDataStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopControlDataStreamResponse(const GetTeleopControlDataStreamResponse& from);
  GetTeleopControlDataStreamResponse(GetTeleopControlDataStreamResponse&& from) noexcept
    : GetTeleopControlDataStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetTeleopControlDataStreamResponse& operator=(const GetTeleopControlDataStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopControlDataStreamResponse& operator=(GetTeleopControlDataStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopControlDataStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopControlDataStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetTeleopControlDataStreamResponse*>(
               &_GetTeleopControlDataStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(GetTeleopControlDataStreamResponse& a, GetTeleopControlDataStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopControlDataStreamResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopControlDataStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopControlDataStreamResponse* New() const final {
    return new GetTeleopControlDataStreamResponse();
  }

  GetTeleopControlDataStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopControlDataStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopControlDataStreamResponse& from);
  void MergeFrom(const GetTeleopControlDataStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopControlDataStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopControlDataStreamResponse";
  }
  protected:
  explicit GetTeleopControlDataStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlDatapointFieldNumber = 1,
  };
  // .v1.model.ControlDatapoint control_datapoint = 1 [json_name = "controlDatapoint"];
  bool has_control_datapoint() const;
  private:
  bool _internal_has_control_datapoint() const;
  public:
  void clear_control_datapoint();
  const ::v1::model::ControlDatapoint& control_datapoint() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::ControlDatapoint* release_control_datapoint();
  ::v1::model::ControlDatapoint* mutable_control_datapoint();
  void set_allocated_control_datapoint(::v1::model::ControlDatapoint* control_datapoint);
  private:
  const ::v1::model::ControlDatapoint& _internal_control_datapoint() const;
  ::v1::model::ControlDatapoint* _internal_mutable_control_datapoint();
  public:
  void unsafe_arena_set_allocated_control_datapoint(
      ::v1::model::ControlDatapoint* control_datapoint);
  ::v1::model::ControlDatapoint* unsafe_arena_release_control_datapoint();

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopControlDataStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::ControlDatapoint* control_datapoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopHeartbeatStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopHeartbeatStreamRequest) */ {
 public:
  inline GetTeleopHeartbeatStreamRequest() : GetTeleopHeartbeatStreamRequest(nullptr) {}
  ~GetTeleopHeartbeatStreamRequest() override;
  explicit constexpr GetTeleopHeartbeatStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopHeartbeatStreamRequest(const GetTeleopHeartbeatStreamRequest& from);
  GetTeleopHeartbeatStreamRequest(GetTeleopHeartbeatStreamRequest&& from) noexcept
    : GetTeleopHeartbeatStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetTeleopHeartbeatStreamRequest& operator=(const GetTeleopHeartbeatStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopHeartbeatStreamRequest& operator=(GetTeleopHeartbeatStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopHeartbeatStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopHeartbeatStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetTeleopHeartbeatStreamRequest*>(
               &_GetTeleopHeartbeatStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(GetTeleopHeartbeatStreamRequest& a, GetTeleopHeartbeatStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopHeartbeatStreamRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopHeartbeatStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopHeartbeatStreamRequest* New() const final {
    return new GetTeleopHeartbeatStreamRequest();
  }

  GetTeleopHeartbeatStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopHeartbeatStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopHeartbeatStreamRequest& from);
  void MergeFrom(const GetTeleopHeartbeatStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopHeartbeatStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopHeartbeatStreamRequest";
  }
  protected:
  explicit GetTeleopHeartbeatStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopHeartbeatStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopHeartbeatStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopHeartbeatStreamResponse) */ {
 public:
  inline GetTeleopHeartbeatStreamResponse() : GetTeleopHeartbeatStreamResponse(nullptr) {}
  ~GetTeleopHeartbeatStreamResponse() override;
  explicit constexpr GetTeleopHeartbeatStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopHeartbeatStreamResponse(const GetTeleopHeartbeatStreamResponse& from);
  GetTeleopHeartbeatStreamResponse(GetTeleopHeartbeatStreamResponse&& from) noexcept
    : GetTeleopHeartbeatStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetTeleopHeartbeatStreamResponse& operator=(const GetTeleopHeartbeatStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopHeartbeatStreamResponse& operator=(GetTeleopHeartbeatStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopHeartbeatStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopHeartbeatStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetTeleopHeartbeatStreamResponse*>(
               &_GetTeleopHeartbeatStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetTeleopHeartbeatStreamResponse& a, GetTeleopHeartbeatStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopHeartbeatStreamResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopHeartbeatStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopHeartbeatStreamResponse* New() const final {
    return new GetTeleopHeartbeatStreamResponse();
  }

  GetTeleopHeartbeatStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopHeartbeatStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopHeartbeatStreamResponse& from);
  void MergeFrom(const GetTeleopHeartbeatStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopHeartbeatStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopHeartbeatStreamResponse";
  }
  protected:
  explicit GetTeleopHeartbeatStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIdFieldNumber = 1,
    kSessionTypeFieldNumber = 3,
    kIsDisconnectFieldNumber = 2,
  };
  // string peer_id = 1 [json_name = "peerId"];
  void clear_peer_id();
  const std::string& peer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // string session_type = 3 [json_name = "sessionType"];
  void clear_session_type();
  const std::string& session_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_session_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_session_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_session_type();
  void set_allocated_session_type(std::string* session_type);
  private:
  const std::string& _internal_session_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_type(const std::string& value);
  std::string* _internal_mutable_session_type();
  public:

  // bool is_disconnect = 2 [json_name = "isDisconnect"];
  void clear_is_disconnect();
  bool is_disconnect() const;
  void set_is_disconnect(bool value);
  private:
  bool _internal_is_disconnect() const;
  void _internal_set_is_disconnect(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopHeartbeatStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_type_;
  bool is_disconnect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryListenerStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTelemetryListenerStreamRequest) */ {
 public:
  inline GetTelemetryListenerStreamRequest() : GetTelemetryListenerStreamRequest(nullptr) {}
  ~GetTelemetryListenerStreamRequest() override;
  explicit constexpr GetTelemetryListenerStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryListenerStreamRequest(const GetTelemetryListenerStreamRequest& from);
  GetTelemetryListenerStreamRequest(GetTelemetryListenerStreamRequest&& from) noexcept
    : GetTelemetryListenerStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetTelemetryListenerStreamRequest& operator=(const GetTelemetryListenerStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryListenerStreamRequest& operator=(GetTelemetryListenerStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTelemetryListenerStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryListenerStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryListenerStreamRequest*>(
               &_GetTelemetryListenerStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetTelemetryListenerStreamRequest& a, GetTelemetryListenerStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryListenerStreamRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryListenerStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryListenerStreamRequest* New() const final {
    return new GetTelemetryListenerStreamRequest();
  }

  GetTelemetryListenerStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryListenerStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryListenerStreamRequest& from);
  void MergeFrom(const GetTelemetryListenerStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryListenerStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTelemetryListenerStreamRequest";
  }
  protected:
  explicit GetTelemetryListenerStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamFilterFieldNumber = 1,
  };
  // repeated string stream_filter = 1 [json_name = "streamFilter"];
  int stream_filter_size() const;
  private:
  int _internal_stream_filter_size() const;
  public:
  void clear_stream_filter();
  const std::string& stream_filter(int index) const;
  std::string* mutable_stream_filter(int index);
  void set_stream_filter(int index, const std::string& value);
  void set_stream_filter(int index, std::string&& value);
  void set_stream_filter(int index, const char* value);
  void set_stream_filter(int index, const char* value, size_t size);
  std::string* add_stream_filter();
  void add_stream_filter(const std::string& value);
  void add_stream_filter(std::string&& value);
  void add_stream_filter(const char* value);
  void add_stream_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& stream_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_stream_filter();
  private:
  const std::string& _internal_stream_filter(int index) const;
  std::string* _internal_add_stream_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetTelemetryListenerStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> stream_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTelemetryListenerStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTelemetryListenerStreamResponse) */ {
 public:
  inline GetTelemetryListenerStreamResponse() : GetTelemetryListenerStreamResponse(nullptr) {}
  ~GetTelemetryListenerStreamResponse() override;
  explicit constexpr GetTelemetryListenerStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTelemetryListenerStreamResponse(const GetTelemetryListenerStreamResponse& from);
  GetTelemetryListenerStreamResponse(GetTelemetryListenerStreamResponse&& from) noexcept
    : GetTelemetryListenerStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetTelemetryListenerStreamResponse& operator=(const GetTelemetryListenerStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTelemetryListenerStreamResponse& operator=(GetTelemetryListenerStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTelemetryListenerStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTelemetryListenerStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetTelemetryListenerStreamResponse*>(
               &_GetTelemetryListenerStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(GetTelemetryListenerStreamResponse& a, GetTelemetryListenerStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTelemetryListenerStreamResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTelemetryListenerStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTelemetryListenerStreamResponse* New() const final {
    return new GetTelemetryListenerStreamResponse();
  }

  GetTelemetryListenerStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTelemetryListenerStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTelemetryListenerStreamResponse& from);
  void MergeFrom(const GetTelemetryListenerStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTelemetryListenerStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTelemetryListenerStreamResponse";
  }
  protected:
  explicit GetTelemetryListenerStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDatapointFieldNumber = 1,
  };
  // .v1.model.Datapoint datapoint = 1 [json_name = "datapoint"];
  bool has_datapoint() const;
  private:
  bool _internal_has_datapoint() const;
  public:
  void clear_datapoint();
  const ::v1::model::Datapoint& datapoint() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Datapoint* release_datapoint();
  ::v1::model::Datapoint* mutable_datapoint();
  void set_allocated_datapoint(::v1::model::Datapoint* datapoint);
  private:
  const ::v1::model::Datapoint& _internal_datapoint() const;
  ::v1::model::Datapoint* _internal_mutable_datapoint();
  public:
  void unsafe_arena_set_allocated_datapoint(
      ::v1::model::Datapoint* datapoint);
  ::v1::model::Datapoint* unsafe_arena_release_datapoint();

  // @@protoc_insertion_point(class_scope:v1.agent.GetTelemetryListenerStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Datapoint* datapoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostTransformFrameResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostTransformFrameResponse) */ {
 public:
  inline PostTransformFrameResponse() : PostTransformFrameResponse(nullptr) {}
  ~PostTransformFrameResponse() override;
  explicit constexpr PostTransformFrameResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostTransformFrameResponse(const PostTransformFrameResponse& from);
  PostTransformFrameResponse(PostTransformFrameResponse&& from) noexcept
    : PostTransformFrameResponse() {
    *this = ::std::move(from);
  }

  inline PostTransformFrameResponse& operator=(const PostTransformFrameResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostTransformFrameResponse& operator=(PostTransformFrameResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostTransformFrameResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostTransformFrameResponse* internal_default_instance() {
    return reinterpret_cast<const PostTransformFrameResponse*>(
               &_PostTransformFrameResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(PostTransformFrameResponse& a, PostTransformFrameResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostTransformFrameResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostTransformFrameResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostTransformFrameResponse* New() const final {
    return new PostTransformFrameResponse();
  }

  PostTransformFrameResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostTransformFrameResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostTransformFrameResponse& from);
  void MergeFrom(const PostTransformFrameResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostTransformFrameResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostTransformFrameResponse";
  }
  protected:
  explicit PostTransformFrameResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.PostTransformFrameResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SetBaseFrameIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SetBaseFrameIDRequest) */ {
 public:
  inline SetBaseFrameIDRequest() : SetBaseFrameIDRequest(nullptr) {}
  ~SetBaseFrameIDRequest() override;
  explicit constexpr SetBaseFrameIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBaseFrameIDRequest(const SetBaseFrameIDRequest& from);
  SetBaseFrameIDRequest(SetBaseFrameIDRequest&& from) noexcept
    : SetBaseFrameIDRequest() {
    *this = ::std::move(from);
  }

  inline SetBaseFrameIDRequest& operator=(const SetBaseFrameIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBaseFrameIDRequest& operator=(SetBaseFrameIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBaseFrameIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBaseFrameIDRequest* internal_default_instance() {
    return reinterpret_cast<const SetBaseFrameIDRequest*>(
               &_SetBaseFrameIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(SetBaseFrameIDRequest& a, SetBaseFrameIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBaseFrameIDRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBaseFrameIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBaseFrameIDRequest* New() const final {
    return new SetBaseFrameIDRequest();
  }

  SetBaseFrameIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBaseFrameIDRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBaseFrameIDRequest& from);
  void MergeFrom(const SetBaseFrameIDRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBaseFrameIDRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SetBaseFrameIDRequest";
  }
  protected:
  explicit SetBaseFrameIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.SetBaseFrameIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SetBaseFrameIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SetBaseFrameIDResponse) */ {
 public:
  inline SetBaseFrameIDResponse() : SetBaseFrameIDResponse(nullptr) {}
  ~SetBaseFrameIDResponse() override;
  explicit constexpr SetBaseFrameIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetBaseFrameIDResponse(const SetBaseFrameIDResponse& from);
  SetBaseFrameIDResponse(SetBaseFrameIDResponse&& from) noexcept
    : SetBaseFrameIDResponse() {
    *this = ::std::move(from);
  }

  inline SetBaseFrameIDResponse& operator=(const SetBaseFrameIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetBaseFrameIDResponse& operator=(SetBaseFrameIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetBaseFrameIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetBaseFrameIDResponse* internal_default_instance() {
    return reinterpret_cast<const SetBaseFrameIDResponse*>(
               &_SetBaseFrameIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(SetBaseFrameIDResponse& a, SetBaseFrameIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetBaseFrameIDResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetBaseFrameIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetBaseFrameIDResponse* New() const final {
    return new SetBaseFrameIDResponse();
  }

  SetBaseFrameIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetBaseFrameIDResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetBaseFrameIDResponse& from);
  void MergeFrom(const SetBaseFrameIDResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetBaseFrameIDResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SetBaseFrameIDResponse";
  }
  protected:
  explicit SetBaseFrameIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.SetBaseFrameIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ClearTransformTreeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.ClearTransformTreeRequest) */ {
 public:
  inline ClearTransformTreeRequest() : ClearTransformTreeRequest(nullptr) {}
  ~ClearTransformTreeRequest() override;
  explicit constexpr ClearTransformTreeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearTransformTreeRequest(const ClearTransformTreeRequest& from);
  ClearTransformTreeRequest(ClearTransformTreeRequest&& from) noexcept
    : ClearTransformTreeRequest() {
    *this = ::std::move(from);
  }

  inline ClearTransformTreeRequest& operator=(const ClearTransformTreeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearTransformTreeRequest& operator=(ClearTransformTreeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearTransformTreeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearTransformTreeRequest* internal_default_instance() {
    return reinterpret_cast<const ClearTransformTreeRequest*>(
               &_ClearTransformTreeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ClearTransformTreeRequest& a, ClearTransformTreeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearTransformTreeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearTransformTreeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearTransformTreeRequest* New() const final {
    return new ClearTransformTreeRequest();
  }

  ClearTransformTreeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearTransformTreeRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearTransformTreeRequest& from);
  void MergeFrom(const ClearTransformTreeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearTransformTreeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.ClearTransformTreeRequest";
  }
  protected:
  explicit ClearTransformTreeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.ClearTransformTreeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class ClearTransformTreeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.ClearTransformTreeResponse) */ {
 public:
  inline ClearTransformTreeResponse() : ClearTransformTreeResponse(nullptr) {}
  ~ClearTransformTreeResponse() override;
  explicit constexpr ClearTransformTreeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearTransformTreeResponse(const ClearTransformTreeResponse& from);
  ClearTransformTreeResponse(ClearTransformTreeResponse&& from) noexcept
    : ClearTransformTreeResponse() {
    *this = ::std::move(from);
  }

  inline ClearTransformTreeResponse& operator=(const ClearTransformTreeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearTransformTreeResponse& operator=(ClearTransformTreeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearTransformTreeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearTransformTreeResponse* internal_default_instance() {
    return reinterpret_cast<const ClearTransformTreeResponse*>(
               &_ClearTransformTreeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ClearTransformTreeResponse& a, ClearTransformTreeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearTransformTreeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearTransformTreeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ClearTransformTreeResponse* New() const final {
    return new ClearTransformTreeResponse();
  }

  ClearTransformTreeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ClearTransformTreeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ClearTransformTreeResponse& from);
  void MergeFrom(const ClearTransformTreeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearTransformTreeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.ClearTransformTreeResponse";
  }
  protected:
  explicit ClearTransformTreeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.ClearTransformTreeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventRequest) */ {
 public:
  inline CreateEventRequest() : CreateEventRequest(nullptr) {}
  ~CreateEventRequest() override;
  explicit constexpr CreateEventRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEventRequest(const CreateEventRequest& from);
  CreateEventRequest(CreateEventRequest&& from) noexcept
    : CreateEventRequest() {
    *this = ::std::move(from);
  }

  inline CreateEventRequest& operator=(const CreateEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventRequest& operator=(CreateEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEventRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEventRequest*>(
               &_CreateEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CreateEventRequest& a, CreateEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventRequest* New() const final {
    return new CreateEventRequest();
  }

  CreateEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventRequest& from);
  void MergeFrom(const CreateEventRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventRequest";
  }
  protected:
  explicit CreateEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .v1.model.Event event = 1 [json_name = "event"];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::v1::model::Event& event() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::v1::model::Event* release_event();
  ::v1::model::Event* mutable_event();
  void set_allocated_event(::v1::model::Event* event);
  private:
  const ::v1::model::Event& _internal_event() const;
  ::v1::model::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::v1::model::Event* event);
  ::v1::model::Event* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::v1::model::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventResponse) */ {
 public:
  inline CreateEventResponse() : CreateEventResponse(nullptr) {}
  ~CreateEventResponse() override;
  explicit constexpr CreateEventResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEventResponse(const CreateEventResponse& from);
  CreateEventResponse(CreateEventResponse&& from) noexcept
    : CreateEventResponse() {
    *this = ::std::move(from);
  }

  inline CreateEventResponse& operator=(const CreateEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventResponse& operator=(CreateEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEventResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEventResponse*>(
               &_CreateEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CreateEventResponse& a, CreateEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventResponse* New() const final {
    return new CreateEventResponse();
  }

  CreateEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventResponse& from);
  void MergeFrom(const CreateEventResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventResponse";
  }
  protected:
  explicit CreateEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class CreateEventError final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.CreateEventError) */ {
 public:
  inline CreateEventError() : CreateEventError(nullptr) {}
  ~CreateEventError() override;
  explicit constexpr CreateEventError(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEventError(const CreateEventError& from);
  CreateEventError(CreateEventError&& from) noexcept
    : CreateEventError() {
    *this = ::std::move(from);
  }

  inline CreateEventError& operator=(const CreateEventError& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEventError& operator=(CreateEventError&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEventError& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEventError* internal_default_instance() {
    return reinterpret_cast<const CreateEventError*>(
               &_CreateEventError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CreateEventError& a, CreateEventError& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEventError* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEventError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEventError* New() const final {
    return new CreateEventError();
  }

  CreateEventError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEventError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateEventError& from);
  void MergeFrom(const CreateEventError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEventError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.CreateEventError";
  }
  protected:
  explicit CreateEventError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetryableFieldNumber = 1,
  };
  // bool retryable = 1 [json_name = "retryable"];
  void clear_retryable();
  bool retryable() const;
  void set_retryable(bool value);
  private:
  bool _internal_retryable() const;
  void _internal_set_retryable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.CreateEventError)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool retryable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopInfoRequest) */ {
 public:
  inline GetTeleopInfoRequest() : GetTeleopInfoRequest(nullptr) {}
  ~GetTeleopInfoRequest() override;
  explicit constexpr GetTeleopInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopInfoRequest(const GetTeleopInfoRequest& from);
  GetTeleopInfoRequest(GetTeleopInfoRequest&& from) noexcept
    : GetTeleopInfoRequest() {
    *this = ::std::move(from);
  }

  inline GetTeleopInfoRequest& operator=(const GetTeleopInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopInfoRequest& operator=(GetTeleopInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopInfoRequest* internal_default_instance() {
    return reinterpret_cast<const GetTeleopInfoRequest*>(
               &_GetTeleopInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(GetTeleopInfoRequest& a, GetTeleopInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopInfoRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopInfoRequest* New() const final {
    return new GetTeleopInfoRequest();
  }

  GetTeleopInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopInfoRequest& from);
  void MergeFrom(const GetTeleopInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopInfoRequest";
  }
  protected:
  explicit GetTeleopInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetTeleopInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetTeleopInfoResponse) */ {
 public:
  inline GetTeleopInfoResponse() : GetTeleopInfoResponse(nullptr) {}
  ~GetTeleopInfoResponse() override;
  explicit constexpr GetTeleopInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTeleopInfoResponse(const GetTeleopInfoResponse& from);
  GetTeleopInfoResponse(GetTeleopInfoResponse&& from) noexcept
    : GetTeleopInfoResponse() {
    *this = ::std::move(from);
  }

  inline GetTeleopInfoResponse& operator=(const GetTeleopInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTeleopInfoResponse& operator=(GetTeleopInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTeleopInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTeleopInfoResponse* internal_default_instance() {
    return reinterpret_cast<const GetTeleopInfoResponse*>(
               &_GetTeleopInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(GetTeleopInfoResponse& a, GetTeleopInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTeleopInfoResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTeleopInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetTeleopInfoResponse* New() const final {
    return new GetTeleopInfoResponse();
  }

  GetTeleopInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetTeleopInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetTeleopInfoResponse& from);
  void MergeFrom(const GetTeleopInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTeleopInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetTeleopInfoResponse";
  }
  protected:
  explicit GetTeleopInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionCountFieldNumber = 1,
  };
  // uint32 connection_count = 1 [json_name = "connectionCount"];
  void clear_connection_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_count() const;
  void set_connection_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_connection_count() const;
  void _internal_set_connection_count(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetTeleopInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 connection_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostLanRtcOfferRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostLanRtcOfferRequest) */ {
 public:
  inline PostLanRtcOfferRequest() : PostLanRtcOfferRequest(nullptr) {}
  ~PostLanRtcOfferRequest() override;
  explicit constexpr PostLanRtcOfferRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostLanRtcOfferRequest(const PostLanRtcOfferRequest& from);
  PostLanRtcOfferRequest(PostLanRtcOfferRequest&& from) noexcept
    : PostLanRtcOfferRequest() {
    *this = ::std::move(from);
  }

  inline PostLanRtcOfferRequest& operator=(const PostLanRtcOfferRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostLanRtcOfferRequest& operator=(PostLanRtcOfferRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostLanRtcOfferRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostLanRtcOfferRequest* internal_default_instance() {
    return reinterpret_cast<const PostLanRtcOfferRequest*>(
               &_PostLanRtcOfferRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(PostLanRtcOfferRequest& a, PostLanRtcOfferRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PostLanRtcOfferRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostLanRtcOfferRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostLanRtcOfferRequest* New() const final {
    return new PostLanRtcOfferRequest();
  }

  PostLanRtcOfferRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostLanRtcOfferRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostLanRtcOfferRequest& from);
  void MergeFrom(const PostLanRtcOfferRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostLanRtcOfferRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostLanRtcOfferRequest";
  }
  protected:
  explicit PostLanRtcOfferRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOfferFieldNumber = 1,
  };
  // string offer = 1 [json_name = "offer"];
  void clear_offer();
  const std::string& offer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_offer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_offer();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_offer();
  void set_allocated_offer(std::string* offer);
  private:
  const std::string& _internal_offer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_offer(const std::string& value);
  std::string* _internal_mutable_offer();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.PostLanRtcOfferRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr offer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class PostLanRtcOfferResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.PostLanRtcOfferResponse) */ {
 public:
  inline PostLanRtcOfferResponse() : PostLanRtcOfferResponse(nullptr) {}
  ~PostLanRtcOfferResponse() override;
  explicit constexpr PostLanRtcOfferResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PostLanRtcOfferResponse(const PostLanRtcOfferResponse& from);
  PostLanRtcOfferResponse(PostLanRtcOfferResponse&& from) noexcept
    : PostLanRtcOfferResponse() {
    *this = ::std::move(from);
  }

  inline PostLanRtcOfferResponse& operator=(const PostLanRtcOfferResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PostLanRtcOfferResponse& operator=(PostLanRtcOfferResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PostLanRtcOfferResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PostLanRtcOfferResponse* internal_default_instance() {
    return reinterpret_cast<const PostLanRtcOfferResponse*>(
               &_PostLanRtcOfferResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(PostLanRtcOfferResponse& a, PostLanRtcOfferResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PostLanRtcOfferResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PostLanRtcOfferResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PostLanRtcOfferResponse* New() const final {
    return new PostLanRtcOfferResponse();
  }

  PostLanRtcOfferResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PostLanRtcOfferResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PostLanRtcOfferResponse& from);
  void MergeFrom(const PostLanRtcOfferResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PostLanRtcOfferResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.PostLanRtcOfferResponse";
  }
  protected:
  explicit PostLanRtcOfferResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
  };
  // string answer = 1 [json_name = "answer"];
  void clear_answer();
  const std::string& answer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_answer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_answer();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_answer();
  void set_allocated_answer(std::string* answer);
  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(const std::string& value);
  std::string* _internal_mutable_answer();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.PostLanRtcOfferResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr answer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendOnCustomDataChannelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendOnCustomDataChannelRequest) */ {
 public:
  inline SendOnCustomDataChannelRequest() : SendOnCustomDataChannelRequest(nullptr) {}
  ~SendOnCustomDataChannelRequest() override;
  explicit constexpr SendOnCustomDataChannelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendOnCustomDataChannelRequest(const SendOnCustomDataChannelRequest& from);
  SendOnCustomDataChannelRequest(SendOnCustomDataChannelRequest&& from) noexcept
    : SendOnCustomDataChannelRequest() {
    *this = ::std::move(from);
  }

  inline SendOnCustomDataChannelRequest& operator=(const SendOnCustomDataChannelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOnCustomDataChannelRequest& operator=(SendOnCustomDataChannelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendOnCustomDataChannelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendOnCustomDataChannelRequest* internal_default_instance() {
    return reinterpret_cast<const SendOnCustomDataChannelRequest*>(
               &_SendOnCustomDataChannelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(SendOnCustomDataChannelRequest& a, SendOnCustomDataChannelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOnCustomDataChannelRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOnCustomDataChannelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOnCustomDataChannelRequest* New() const final {
    return new SendOnCustomDataChannelRequest();
  }

  SendOnCustomDataChannelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOnCustomDataChannelRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOnCustomDataChannelRequest& from);
  void MergeFrom(const SendOnCustomDataChannelRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOnCustomDataChannelRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendOnCustomDataChannelRequest";
  }
  protected:
  explicit SendOnCustomDataChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // string channel_name = 1 [json_name = "channelName"];
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // bytes payload = 2 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.SendOnCustomDataChannelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class SendOnCustomDataChannelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.SendOnCustomDataChannelResponse) */ {
 public:
  inline SendOnCustomDataChannelResponse() : SendOnCustomDataChannelResponse(nullptr) {}
  ~SendOnCustomDataChannelResponse() override;
  explicit constexpr SendOnCustomDataChannelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendOnCustomDataChannelResponse(const SendOnCustomDataChannelResponse& from);
  SendOnCustomDataChannelResponse(SendOnCustomDataChannelResponse&& from) noexcept
    : SendOnCustomDataChannelResponse() {
    *this = ::std::move(from);
  }

  inline SendOnCustomDataChannelResponse& operator=(const SendOnCustomDataChannelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendOnCustomDataChannelResponse& operator=(SendOnCustomDataChannelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SendOnCustomDataChannelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendOnCustomDataChannelResponse* internal_default_instance() {
    return reinterpret_cast<const SendOnCustomDataChannelResponse*>(
               &_SendOnCustomDataChannelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(SendOnCustomDataChannelResponse& a, SendOnCustomDataChannelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SendOnCustomDataChannelResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendOnCustomDataChannelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendOnCustomDataChannelResponse* New() const final {
    return new SendOnCustomDataChannelResponse();
  }

  SendOnCustomDataChannelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendOnCustomDataChannelResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendOnCustomDataChannelResponse& from);
  void MergeFrom(const SendOnCustomDataChannelResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendOnCustomDataChannelResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.SendOnCustomDataChannelResponse";
  }
  protected:
  explicit SendOnCustomDataChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:v1.agent.SendOnCustomDataChannelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCustomDataChannelMessageStreamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCustomDataChannelMessageStreamRequest) */ {
 public:
  inline GetCustomDataChannelMessageStreamRequest() : GetCustomDataChannelMessageStreamRequest(nullptr) {}
  ~GetCustomDataChannelMessageStreamRequest() override;
  explicit constexpr GetCustomDataChannelMessageStreamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomDataChannelMessageStreamRequest(const GetCustomDataChannelMessageStreamRequest& from);
  GetCustomDataChannelMessageStreamRequest(GetCustomDataChannelMessageStreamRequest&& from) noexcept
    : GetCustomDataChannelMessageStreamRequest() {
    *this = ::std::move(from);
  }

  inline GetCustomDataChannelMessageStreamRequest& operator=(const GetCustomDataChannelMessageStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomDataChannelMessageStreamRequest& operator=(GetCustomDataChannelMessageStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomDataChannelMessageStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomDataChannelMessageStreamRequest* internal_default_instance() {
    return reinterpret_cast<const GetCustomDataChannelMessageStreamRequest*>(
               &_GetCustomDataChannelMessageStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(GetCustomDataChannelMessageStreamRequest& a, GetCustomDataChannelMessageStreamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomDataChannelMessageStreamRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomDataChannelMessageStreamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomDataChannelMessageStreamRequest* New() const final {
    return new GetCustomDataChannelMessageStreamRequest();
  }

  GetCustomDataChannelMessageStreamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomDataChannelMessageStreamRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomDataChannelMessageStreamRequest& from);
  void MergeFrom(const GetCustomDataChannelMessageStreamRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomDataChannelMessageStreamRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCustomDataChannelMessageStreamRequest";
  }
  protected:
  explicit GetCustomDataChannelMessageStreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelNameFilterFieldNumber = 1,
  };
  // repeated string channel_name_filter = 1 [json_name = "channelNameFilter"];
  int channel_name_filter_size() const;
  private:
  int _internal_channel_name_filter_size() const;
  public:
  void clear_channel_name_filter();
  const std::string& channel_name_filter(int index) const;
  std::string* mutable_channel_name_filter(int index);
  void set_channel_name_filter(int index, const std::string& value);
  void set_channel_name_filter(int index, std::string&& value);
  void set_channel_name_filter(int index, const char* value);
  void set_channel_name_filter(int index, const char* value, size_t size);
  std::string* add_channel_name_filter();
  void add_channel_name_filter(const std::string& value);
  void add_channel_name_filter(std::string&& value);
  void add_channel_name_filter(const char* value);
  void add_channel_name_filter(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& channel_name_filter() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_channel_name_filter();
  private:
  const std::string& _internal_channel_name_filter(int index) const;
  std::string* _internal_add_channel_name_filter();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCustomDataChannelMessageStreamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> channel_name_filter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// -------------------------------------------------------------------

class GetCustomDataChannelMessageStreamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:v1.agent.GetCustomDataChannelMessageStreamResponse) */ {
 public:
  inline GetCustomDataChannelMessageStreamResponse() : GetCustomDataChannelMessageStreamResponse(nullptr) {}
  ~GetCustomDataChannelMessageStreamResponse() override;
  explicit constexpr GetCustomDataChannelMessageStreamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCustomDataChannelMessageStreamResponse(const GetCustomDataChannelMessageStreamResponse& from);
  GetCustomDataChannelMessageStreamResponse(GetCustomDataChannelMessageStreamResponse&& from) noexcept
    : GetCustomDataChannelMessageStreamResponse() {
    *this = ::std::move(from);
  }

  inline GetCustomDataChannelMessageStreamResponse& operator=(const GetCustomDataChannelMessageStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomDataChannelMessageStreamResponse& operator=(GetCustomDataChannelMessageStreamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCustomDataChannelMessageStreamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCustomDataChannelMessageStreamResponse* internal_default_instance() {
    return reinterpret_cast<const GetCustomDataChannelMessageStreamResponse*>(
               &_GetCustomDataChannelMessageStreamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(GetCustomDataChannelMessageStreamResponse& a, GetCustomDataChannelMessageStreamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomDataChannelMessageStreamResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomDataChannelMessageStreamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomDataChannelMessageStreamResponse* New() const final {
    return new GetCustomDataChannelMessageStreamResponse();
  }

  GetCustomDataChannelMessageStreamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomDataChannelMessageStreamResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomDataChannelMessageStreamResponse& from);
  void MergeFrom(const GetCustomDataChannelMessageStreamResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomDataChannelMessageStreamResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "v1.agent.GetCustomDataChannelMessageStreamResponse";
  }
  protected:
  explicit GetCustomDataChannelMessageStreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPeerIdFieldNumber = 1,
    kChannelNameFieldNumber = 2,
    kPayloadFieldNumber = 3,
  };
  // string peer_id = 1 [json_name = "peerId"];
  void clear_peer_id();
  const std::string& peer_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_peer_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_peer_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_peer_id();
  void set_allocated_peer_id(std::string* peer_id);
  private:
  const std::string& _internal_peer_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_peer_id(const std::string& value);
  std::string* _internal_mutable_peer_id();
  public:

  // string channel_name = 2 [json_name = "channelName"];
  void clear_channel_name();
  const std::string& channel_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_channel_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_channel_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_channel_name();
  void set_allocated_channel_name(std::string* channel_name);
  private:
  const std::string& _internal_channel_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_channel_name(const std::string& value);
  std::string* _internal_mutable_channel_name();
  public:

  // bytes payload = 3 [json_name = "payload"];
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:v1.agent.GetCustomDataChannelMessageStreamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr peer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr channel_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_protos_2fagent_2fv1_2fagent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PostGenericAPIUnbufferedRequestResponse

// uint32 statusCode = 1 [json_name = "statusCode"];
inline void PostGenericAPIUnbufferedRequestResponse::clear_statuscode() {
  statuscode_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostGenericAPIUnbufferedRequestResponse::_internal_statuscode() const {
  return statuscode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostGenericAPIUnbufferedRequestResponse::statuscode() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostGenericAPIUnbufferedRequestResponse.statusCode)
  return _internal_statuscode();
}
inline void PostGenericAPIUnbufferedRequestResponse::_internal_set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  statuscode_ = value;
}
inline void PostGenericAPIUnbufferedRequestResponse::set_statuscode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_statuscode(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostGenericAPIUnbufferedRequestResponse.statusCode)
}

// string responseBody = 2 [json_name = "responseBody"];
inline void PostGenericAPIUnbufferedRequestResponse::clear_responsebody() {
  responsebody_.ClearToEmpty();
}
inline const std::string& PostGenericAPIUnbufferedRequestResponse::responsebody() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostGenericAPIUnbufferedRequestResponse.responseBody)
  return _internal_responsebody();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostGenericAPIUnbufferedRequestResponse::set_responsebody(ArgT0&& arg0, ArgT... args) {
 
 responsebody_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.PostGenericAPIUnbufferedRequestResponse.responseBody)
}
inline std::string* PostGenericAPIUnbufferedRequestResponse::mutable_responsebody() {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostGenericAPIUnbufferedRequestResponse.responseBody)
  return _internal_mutable_responsebody();
}
inline const std::string& PostGenericAPIUnbufferedRequestResponse::_internal_responsebody() const {
  return responsebody_.Get();
}
inline void PostGenericAPIUnbufferedRequestResponse::_internal_set_responsebody(const std::string& value) {
  
  responsebody_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostGenericAPIUnbufferedRequestResponse::_internal_mutable_responsebody() {
  
  return responsebody_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostGenericAPIUnbufferedRequestResponse::release_responsebody() {
  // @@protoc_insertion_point(field_release:v1.agent.PostGenericAPIUnbufferedRequestResponse.responseBody)
  return responsebody_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostGenericAPIUnbufferedRequestResponse::set_allocated_responsebody(std::string* responsebody) {
  if (responsebody != nullptr) {
    
  } else {
    
  }
  responsebody_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), responsebody,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.PostGenericAPIUnbufferedRequestResponse.responseBody)
}

// -------------------------------------------------------------------

// PostGenericAPIRequestResponse

// -------------------------------------------------------------------

// StreamDataResponse

// -------------------------------------------------------------------

// PostDataResponse

// -------------------------------------------------------------------

// PostDataError

// uint32 index = 1 [json_name = "index"];
inline void PostDataError::clear_index() {
  index_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::index() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.index)
  return _internal_index();
}
inline void PostDataError::_internal_set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  index_ = value;
}
inline void PostDataError::set_index(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.index)
}

// uint32 code = 2 [json_name = "code"];
inline void PostDataError::clear_code() {
  code_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::_internal_code() const {
  return code_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PostDataError::code() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.code)
  return _internal_code();
}
inline void PostDataError::_internal_set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  code_ = value;
}
inline void PostDataError::set_code(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.code)
}

// bool retryable = 3 [json_name = "retryable"];
inline void PostDataError::clear_retryable() {
  retryable_ = false;
}
inline bool PostDataError::_internal_retryable() const {
  return retryable_;
}
inline bool PostDataError::retryable() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.retryable)
  return _internal_retryable();
}
inline void PostDataError::_internal_set_retryable(bool value) {
  
  retryable_ = value;
}
inline void PostDataError::set_retryable(bool value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.retryable)
}

// string message = 4 [json_name = "message"];
inline void PostDataError::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PostDataError::message() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataError.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostDataError::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.PostDataError.message)
}
inline std::string* PostDataError::mutable_message() {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataError.message)
  return _internal_mutable_message();
}
inline const std::string& PostDataError::_internal_message() const {
  return message_.Get();
}
inline void PostDataError::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostDataError::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostDataError::release_message() {
  // @@protoc_insertion_point(field_release:v1.agent.PostDataError.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostDataError::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.PostDataError.message)
}

// -------------------------------------------------------------------

// PostDataMultiRequest

// repeated .v1.model.Datapoint datapoints = 1 [json_name = "datapoints"];
inline int PostDataMultiRequest::_internal_datapoints_size() const {
  return datapoints_.size();
}
inline int PostDataMultiRequest::datapoints_size() const {
  return _internal_datapoints_size();
}
inline ::v1::model::Datapoint* PostDataMultiRequest::mutable_datapoints(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataMultiRequest.datapoints)
  return datapoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
PostDataMultiRequest::mutable_datapoints() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.PostDataMultiRequest.datapoints)
  return &datapoints_;
}
inline const ::v1::model::Datapoint& PostDataMultiRequest::_internal_datapoints(int index) const {
  return datapoints_.Get(index);
}
inline const ::v1::model::Datapoint& PostDataMultiRequest::datapoints(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataMultiRequest.datapoints)
  return _internal_datapoints(index);
}
inline ::v1::model::Datapoint* PostDataMultiRequest::_internal_add_datapoints() {
  return datapoints_.Add();
}
inline ::v1::model::Datapoint* PostDataMultiRequest::add_datapoints() {
  // @@protoc_insertion_point(field_add:v1.agent.PostDataMultiRequest.datapoints)
  return _internal_add_datapoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
PostDataMultiRequest::datapoints() const {
  // @@protoc_insertion_point(field_list:v1.agent.PostDataMultiRequest.datapoints)
  return datapoints_;
}

// -------------------------------------------------------------------

// PostDataMultiResponse

// -------------------------------------------------------------------

// PostDataMultiError

// repeated .v1.agent.PostDataError errors = 1 [json_name = "errors"];
inline int PostDataMultiError::_internal_errors_size() const {
  return errors_.size();
}
inline int PostDataMultiError::errors_size() const {
  return _internal_errors_size();
}
inline void PostDataMultiError::clear_errors() {
  errors_.Clear();
}
inline ::v1::agent::PostDataError* PostDataMultiError::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostDataMultiError.errors)
  return errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >*
PostDataMultiError::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.PostDataMultiError.errors)
  return &errors_;
}
inline const ::v1::agent::PostDataError& PostDataMultiError::_internal_errors(int index) const {
  return errors_.Get(index);
}
inline const ::v1::agent::PostDataError& PostDataMultiError::errors(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.PostDataMultiError.errors)
  return _internal_errors(index);
}
inline ::v1::agent::PostDataError* PostDataMultiError::_internal_add_errors() {
  return errors_.Add();
}
inline ::v1::agent::PostDataError* PostDataMultiError::add_errors() {
  // @@protoc_insertion_point(field_add:v1.agent.PostDataMultiError.errors)
  return _internal_add_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::agent::PostDataError >&
PostDataMultiError::errors() const {
  // @@protoc_insertion_point(field_list:v1.agent.PostDataMultiError.errors)
  return errors_;
}

// -------------------------------------------------------------------

// GetInterventionRequestRequest

// string id = 1 [json_name = "id"];
inline void GetInterventionRequestRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetInterventionRequestRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetInterventionRequestRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInterventionRequestRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetInterventionRequestRequest.id)
}
inline std::string* GetInterventionRequestRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetInterventionRequestRequest.id)
  return _internal_mutable_id();
}
inline const std::string& GetInterventionRequestRequest::_internal_id() const {
  return id_.Get();
}
inline void GetInterventionRequestRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInterventionRequestRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInterventionRequestRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetInterventionRequestRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInterventionRequestRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetInterventionRequestRequest.id)
}

// -------------------------------------------------------------------

// GetInterventionResponseRequest

// string request_id = 1 [json_name = "requestId"];
inline void GetInterventionResponseRequest::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& GetInterventionResponseRequest::request_id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetInterventionResponseRequest.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetInterventionResponseRequest::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetInterventionResponseRequest.request_id)
}
inline std::string* GetInterventionResponseRequest::mutable_request_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetInterventionResponseRequest.request_id)
  return _internal_mutable_request_id();
}
inline const std::string& GetInterventionResponseRequest::_internal_request_id() const {
  return request_id_.Get();
}
inline void GetInterventionResponseRequest::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetInterventionResponseRequest::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetInterventionResponseRequest::release_request_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetInterventionResponseRequest.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetInterventionResponseRequest::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetInterventionResponseRequest.request_id)
}

// -------------------------------------------------------------------

// GetStreamsConfigurationRequest

// -------------------------------------------------------------------

// GetStreamsConfigurationResponse

// repeated .v1.model.StreamConfiguration streams = 1 [json_name = "streams"];
inline int GetStreamsConfigurationResponse::_internal_streams_size() const {
  return streams_.size();
}
inline int GetStreamsConfigurationResponse::streams_size() const {
  return _internal_streams_size();
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::mutable_streams(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetStreamsConfigurationResponse.streams)
  return streams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >*
GetStreamsConfigurationResponse::mutable_streams() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetStreamsConfigurationResponse.streams)
  return &streams_;
}
inline const ::v1::model::StreamConfiguration& GetStreamsConfigurationResponse::_internal_streams(int index) const {
  return streams_.Get(index);
}
inline const ::v1::model::StreamConfiguration& GetStreamsConfigurationResponse::streams(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetStreamsConfigurationResponse.streams)
  return _internal_streams(index);
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::_internal_add_streams() {
  return streams_.Add();
}
inline ::v1::model::StreamConfiguration* GetStreamsConfigurationResponse::add_streams() {
  // @@protoc_insertion_point(field_add:v1.agent.GetStreamsConfigurationResponse.streams)
  return _internal_add_streams();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::StreamConfiguration >&
GetStreamsConfigurationResponse::streams() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetStreamsConfigurationResponse.streams)
  return streams_;
}

// -------------------------------------------------------------------

// GetApplicationConfigurationRequest

// -------------------------------------------------------------------

// GetApplicationConfigurationResponse

// .v1.model.ApplicationConfiguration configuration = 1 [json_name = "configuration"];
inline bool GetApplicationConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetApplicationConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::v1::model::ApplicationConfiguration& GetApplicationConfigurationResponse::_internal_configuration() const {
  const ::v1::model::ApplicationConfiguration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::ApplicationConfiguration&>(
      ::v1::model::_ApplicationConfiguration_default_instance_);
}
inline const ::v1::model::ApplicationConfiguration& GetApplicationConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetApplicationConfigurationResponse.configuration)
  return _internal_configuration();
}
inline void GetApplicationConfigurationResponse::unsafe_arena_set_allocated_configuration(
    ::v1::model::ApplicationConfiguration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetApplicationConfigurationResponse.configuration)
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::release_configuration() {
  
  ::v1::model::ApplicationConfiguration* temp = configuration_;
  configuration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.agent.GetApplicationConfigurationResponse.configuration)
  
  ::v1::model::ApplicationConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ApplicationConfiguration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::v1::model::ApplicationConfiguration* GetApplicationConfigurationResponse::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetApplicationConfigurationResponse.configuration)
  return _internal_mutable_configuration();
}
inline void GetApplicationConfigurationResponse::set_allocated_configuration(::v1::model::ApplicationConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetApplicationConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// GetConfigBlobDataRequest

// -------------------------------------------------------------------

// GetConfigBlobDataResponse

// .v1.model.BlobData blob_data = 1 [json_name = "blobData"];
inline bool GetConfigBlobDataResponse::_internal_has_blob_data() const {
  return this != internal_default_instance() && blob_data_ != nullptr;
}
inline bool GetConfigBlobDataResponse::has_blob_data() const {
  return _internal_has_blob_data();
}
inline const ::v1::model::BlobData& GetConfigBlobDataResponse::_internal_blob_data() const {
  const ::v1::model::BlobData* p = blob_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::BlobData&>(
      ::v1::model::_BlobData_default_instance_);
}
inline const ::v1::model::BlobData& GetConfigBlobDataResponse::blob_data() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetConfigBlobDataResponse.blob_data)
  return _internal_blob_data();
}
inline void GetConfigBlobDataResponse::unsafe_arena_set_allocated_blob_data(
    ::v1::model::BlobData* blob_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_data_);
  }
  blob_data_ = blob_data;
  if (blob_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetConfigBlobDataResponse.blob_data)
}
inline ::v1::model::BlobData* GetConfigBlobDataResponse::release_blob_data() {
  
  ::v1::model::BlobData* temp = blob_data_;
  blob_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::BlobData* GetConfigBlobDataResponse::unsafe_arena_release_blob_data() {
  // @@protoc_insertion_point(field_release:v1.agent.GetConfigBlobDataResponse.blob_data)
  
  ::v1::model::BlobData* temp = blob_data_;
  blob_data_ = nullptr;
  return temp;
}
inline ::v1::model::BlobData* GetConfigBlobDataResponse::_internal_mutable_blob_data() {
  
  if (blob_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::BlobData>(GetArenaForAllocation());
    blob_data_ = p;
  }
  return blob_data_;
}
inline ::v1::model::BlobData* GetConfigBlobDataResponse::mutable_blob_data() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetConfigBlobDataResponse.blob_data)
  return _internal_mutable_blob_data();
}
inline void GetConfigBlobDataResponse::set_allocated_blob_data(::v1::model::BlobData* blob_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_data_);
  }
  if (blob_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blob_data));
    if (message_arena != submessage_arena) {
      blob_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blob_data, submessage_arena);
    }
    
  } else {
    
  }
  blob_data_ = blob_data;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetConfigBlobDataResponse.blob_data)
}

// -------------------------------------------------------------------

// GetAgentConfigurationRequest

// -------------------------------------------------------------------

// GetAgentConfigurationResponse

// .v1.model.AgentConfiguration configuration = 1 [json_name = "configuration"];
inline bool GetAgentConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetAgentConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::v1::model::AgentConfiguration& GetAgentConfigurationResponse::_internal_configuration() const {
  const ::v1::model::AgentConfiguration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::AgentConfiguration&>(
      ::v1::model::_AgentConfiguration_default_instance_);
}
inline const ::v1::model::AgentConfiguration& GetAgentConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetAgentConfigurationResponse.configuration)
  return _internal_configuration();
}
inline void GetAgentConfigurationResponse::unsafe_arena_set_allocated_configuration(
    ::v1::model::AgentConfiguration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetAgentConfigurationResponse.configuration)
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::release_configuration() {
  
  ::v1::model::AgentConfiguration* temp = configuration_;
  configuration_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:v1.agent.GetAgentConfigurationResponse.configuration)
  
  ::v1::model::AgentConfiguration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::AgentConfiguration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::v1::model::AgentConfiguration* GetAgentConfigurationResponse::mutable_configuration() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetAgentConfigurationResponse.configuration)
  return _internal_mutable_configuration();
}
inline void GetAgentConfigurationResponse::set_allocated_configuration(::v1::model::AgentConfiguration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetAgentConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// GetBufferMetadataRequest

// -------------------------------------------------------------------

// QueryDatapointsRequest

// string stream_name = 1 [json_name = "streamName"];
inline void QueryDatapointsRequest::clear_stream_name() {
  stream_name_.ClearToEmpty();
}
inline const std::string& QueryDatapointsRequest::stream_name() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsRequest.stream_name)
  return _internal_stream_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryDatapointsRequest::set_stream_name(ArgT0&& arg0, ArgT... args) {
 
 stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.QueryDatapointsRequest.stream_name)
}
inline std::string* QueryDatapointsRequest::mutable_stream_name() {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryDatapointsRequest.stream_name)
  return _internal_mutable_stream_name();
}
inline const std::string& QueryDatapointsRequest::_internal_stream_name() const {
  return stream_name_.Get();
}
inline void QueryDatapointsRequest::_internal_set_stream_name(const std::string& value) {
  
  stream_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::_internal_mutable_stream_name() {
  
  return stream_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::release_stream_name() {
  // @@protoc_insertion_point(field_release:v1.agent.QueryDatapointsRequest.stream_name)
  return stream_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryDatapointsRequest::set_allocated_stream_name(std::string* stream_name) {
  if (stream_name != nullptr) {
    
  } else {
    
  }
  stream_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stream_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.QueryDatapointsRequest.stream_name)
}

// string start = 2 [json_name = "start"];
inline void QueryDatapointsRequest::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& QueryDatapointsRequest::start() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsRequest.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryDatapointsRequest::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.QueryDatapointsRequest.start)
}
inline std::string* QueryDatapointsRequest::mutable_start() {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryDatapointsRequest.start)
  return _internal_mutable_start();
}
inline const std::string& QueryDatapointsRequest::_internal_start() const {
  return start_.Get();
}
inline void QueryDatapointsRequest::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::release_start() {
  // @@protoc_insertion_point(field_release:v1.agent.QueryDatapointsRequest.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryDatapointsRequest::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.QueryDatapointsRequest.start)
}

// string end = 3 [json_name = "end"];
inline void QueryDatapointsRequest::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& QueryDatapointsRequest::end() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsRequest.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryDatapointsRequest::set_end(ArgT0&& arg0, ArgT... args) {
 
 end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.QueryDatapointsRequest.end)
}
inline std::string* QueryDatapointsRequest::mutable_end() {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryDatapointsRequest.end)
  return _internal_mutable_end();
}
inline const std::string& QueryDatapointsRequest::_internal_end() const {
  return end_.Get();
}
inline void QueryDatapointsRequest::_internal_set_end(const std::string& value) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::_internal_mutable_end() {
  
  return end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryDatapointsRequest::release_end() {
  // @@protoc_insertion_point(field_release:v1.agent.QueryDatapointsRequest.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryDatapointsRequest::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.QueryDatapointsRequest.end)
}

// uint32 limit = 4 [json_name = "limit"];
inline void QueryDatapointsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDatapointsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDatapointsRequest::limit() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsRequest.limit)
  return _internal_limit();
}
inline void QueryDatapointsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void QueryDatapointsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:v1.agent.QueryDatapointsRequest.limit)
}

// uint32 offset = 5 [json_name = "offset"];
inline void QueryDatapointsRequest::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDatapointsRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryDatapointsRequest::offset() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsRequest.offset)
  return _internal_offset();
}
inline void QueryDatapointsRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void QueryDatapointsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:v1.agent.QueryDatapointsRequest.offset)
}

// -------------------------------------------------------------------

// QueryDatapointsResponse

// repeated .v1.model.Datapoint results = 1 [json_name = "results"];
inline int QueryDatapointsResponse::_internal_results_size() const {
  return results_.size();
}
inline int QueryDatapointsResponse::results_size() const {
  return _internal_results_size();
}
inline ::v1::model::Datapoint* QueryDatapointsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryDatapointsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >*
QueryDatapointsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.QueryDatapointsResponse.results)
  return &results_;
}
inline const ::v1::model::Datapoint& QueryDatapointsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::v1::model::Datapoint& QueryDatapointsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryDatapointsResponse.results)
  return _internal_results(index);
}
inline ::v1::model::Datapoint* QueryDatapointsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::v1::model::Datapoint* QueryDatapointsResponse::add_results() {
  // @@protoc_insertion_point(field_add:v1.agent.QueryDatapointsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Datapoint >&
QueryDatapointsResponse::results() const {
  // @@protoc_insertion_point(field_list:v1.agent.QueryDatapointsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// QueryEventsRequest

// string start = 1 [json_name = "start"];
inline void QueryEventsRequest::clear_start() {
  start_.ClearToEmpty();
}
inline const std::string& QueryEventsRequest::start() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryEventsRequest.start)
  return _internal_start();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryEventsRequest::set_start(ArgT0&& arg0, ArgT... args) {
 
 start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.QueryEventsRequest.start)
}
inline std::string* QueryEventsRequest::mutable_start() {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryEventsRequest.start)
  return _internal_mutable_start();
}
inline const std::string& QueryEventsRequest::_internal_start() const {
  return start_.Get();
}
inline void QueryEventsRequest::_internal_set_start(const std::string& value) {
  
  start_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryEventsRequest::_internal_mutable_start() {
  
  return start_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryEventsRequest::release_start() {
  // @@protoc_insertion_point(field_release:v1.agent.QueryEventsRequest.start)
  return start_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryEventsRequest::set_allocated_start(std::string* start) {
  if (start != nullptr) {
    
  } else {
    
  }
  start_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.QueryEventsRequest.start)
}

// string end = 2 [json_name = "end"];
inline void QueryEventsRequest::clear_end() {
  end_.ClearToEmpty();
}
inline const std::string& QueryEventsRequest::end() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryEventsRequest.end)
  return _internal_end();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void QueryEventsRequest::set_end(ArgT0&& arg0, ArgT... args) {
 
 end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.QueryEventsRequest.end)
}
inline std::string* QueryEventsRequest::mutable_end() {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryEventsRequest.end)
  return _internal_mutable_end();
}
inline const std::string& QueryEventsRequest::_internal_end() const {
  return end_.Get();
}
inline void QueryEventsRequest::_internal_set_end(const std::string& value) {
  
  end_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* QueryEventsRequest::_internal_mutable_end() {
  
  return end_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* QueryEventsRequest::release_end() {
  // @@protoc_insertion_point(field_release:v1.agent.QueryEventsRequest.end)
  return end_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void QueryEventsRequest::set_allocated_end(std::string* end) {
  if (end != nullptr) {
    
  } else {
    
  }
  end_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), end,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.QueryEventsRequest.end)
}

// uint32 limit = 3 [json_name = "limit"];
inline void QueryEventsRequest::clear_limit() {
  limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryEventsRequest::_internal_limit() const {
  return limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryEventsRequest::limit() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryEventsRequest.limit)
  return _internal_limit();
}
inline void QueryEventsRequest::_internal_set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  limit_ = value;
}
inline void QueryEventsRequest::set_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:v1.agent.QueryEventsRequest.limit)
}

// uint32 offset = 4 [json_name = "offset"];
inline void QueryEventsRequest::clear_offset() {
  offset_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryEventsRequest::_internal_offset() const {
  return offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 QueryEventsRequest::offset() const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryEventsRequest.offset)
  return _internal_offset();
}
inline void QueryEventsRequest::_internal_set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_ = value;
}
inline void QueryEventsRequest::set_offset(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_offset(value);
  // @@protoc_insertion_point(field_set:v1.agent.QueryEventsRequest.offset)
}

// -------------------------------------------------------------------

// QueryEventsResponse

// repeated .v1.model.Event results = 1 [json_name = "results"];
inline int QueryEventsResponse::_internal_results_size() const {
  return results_.size();
}
inline int QueryEventsResponse::results_size() const {
  return _internal_results_size();
}
inline ::v1::model::Event* QueryEventsResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.QueryEventsResponse.results)
  return results_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Event >*
QueryEventsResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.QueryEventsResponse.results)
  return &results_;
}
inline const ::v1::model::Event& QueryEventsResponse::_internal_results(int index) const {
  return results_.Get(index);
}
inline const ::v1::model::Event& QueryEventsResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.QueryEventsResponse.results)
  return _internal_results(index);
}
inline ::v1::model::Event* QueryEventsResponse::_internal_add_results() {
  return results_.Add();
}
inline ::v1::model::Event* QueryEventsResponse::add_results() {
  // @@protoc_insertion_point(field_add:v1.agent.QueryEventsResponse.results)
  return _internal_add_results();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::Event >&
QueryEventsResponse::results() const {
  // @@protoc_insertion_point(field_list:v1.agent.QueryEventsResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// GetBufferMetadataResponse

// repeated .v1.model.BufferMetadata connections = 1 [json_name = "connections"];
inline int GetBufferMetadataResponse::_internal_connections_size() const {
  return connections_.size();
}
inline int GetBufferMetadataResponse::connections_size() const {
  return _internal_connections_size();
}
inline ::v1::model::BufferMetadata* GetBufferMetadataResponse::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetBufferMetadataResponse.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::BufferMetadata >*
GetBufferMetadataResponse::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetBufferMetadataResponse.connections)
  return &connections_;
}
inline const ::v1::model::BufferMetadata& GetBufferMetadataResponse::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::v1::model::BufferMetadata& GetBufferMetadataResponse::connections(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetBufferMetadataResponse.connections)
  return _internal_connections(index);
}
inline ::v1::model::BufferMetadata* GetBufferMetadataResponse::_internal_add_connections() {
  return connections_.Add();
}
inline ::v1::model::BufferMetadata* GetBufferMetadataResponse::add_connections() {
  // @@protoc_insertion_point(field_add:v1.agent.GetBufferMetadataResponse.connections)
  return _internal_add_connections();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::v1::model::BufferMetadata >&
GetBufferMetadataResponse::connections() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetBufferMetadataResponse.connections)
  return connections_;
}

// -------------------------------------------------------------------

// HealthRequest

// -------------------------------------------------------------------

// HealthResponse

// -------------------------------------------------------------------

// GetCommandRequestRequest

// repeated string command_filter = 1 [json_name = "commandFilter"];
inline int GetCommandRequestRequest::_internal_command_filter_size() const {
  return command_filter_.size();
}
inline int GetCommandRequestRequest::command_filter_size() const {
  return _internal_command_filter_size();
}
inline void GetCommandRequestRequest::clear_command_filter() {
  command_filter_.Clear();
}
inline std::string* GetCommandRequestRequest::add_command_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetCommandRequestRequest.command_filter)
  return _internal_add_command_filter();
}
inline const std::string& GetCommandRequestRequest::_internal_command_filter(int index) const {
  return command_filter_.Get(index);
}
inline const std::string& GetCommandRequestRequest::command_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestRequest.command_filter)
  return _internal_command_filter(index);
}
inline std::string* GetCommandRequestRequest::mutable_command_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestRequest.command_filter)
  return command_filter_.Mutable(index);
}
inline void GetCommandRequestRequest::set_command_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestRequest.command_filter)
  command_filter_.Mutable(index)->assign(value);
}
inline void GetCommandRequestRequest::set_command_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestRequest.command_filter)
  command_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetCommandRequestRequest::set_command_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::set_command_filter(int index, const char* value, size_t size) {
  command_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetCommandRequestRequest.command_filter)
}
inline std::string* GetCommandRequestRequest::_internal_add_command_filter() {
  return command_filter_.Add();
}
inline void GetCommandRequestRequest::add_command_filter(const std::string& value) {
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(std::string&& value) {
  command_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetCommandRequestRequest.command_filter)
}
inline void GetCommandRequestRequest::add_command_filter(const char* value, size_t size) {
  command_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetCommandRequestRequest.command_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCommandRequestRequest::command_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetCommandRequestRequest.command_filter)
  return command_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCommandRequestRequest::mutable_command_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetCommandRequestRequest.command_filter)
  return &command_filter_;
}

// -------------------------------------------------------------------

// GetCommandRequestResponse

// .v1.model.CommandRequest request = 1 [json_name = "request"];
inline bool GetCommandRequestResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool GetCommandRequestResponse::has_request() const {
  return _internal_has_request();
}
inline const ::v1::model::CommandRequest& GetCommandRequestResponse::_internal_request() const {
  const ::v1::model::CommandRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::CommandRequest&>(
      ::v1::model::_CommandRequest_default_instance_);
}
inline const ::v1::model::CommandRequest& GetCommandRequestResponse::request() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestResponse.request)
  return _internal_request();
}
inline void GetCommandRequestResponse::unsafe_arena_set_allocated_request(
    ::v1::model::CommandRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetCommandRequestResponse.request)
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::release_request() {
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCommandRequestResponse.request)
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandRequest>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline ::v1::model::CommandRequest* GetCommandRequestResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestResponse.request)
  return _internal_mutable_request();
}
inline void GetCommandRequestResponse::set_allocated_request(::v1::model::CommandRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCommandRequestResponse.request)
}

// -------------------------------------------------------------------

// SendCommandResponseRequest

// .v1.model.CommandResponse response = 1 [json_name = "response"];
inline bool SendCommandResponseRequest::_internal_has_response() const {
  return this != internal_default_instance() && response_ != nullptr;
}
inline bool SendCommandResponseRequest::has_response() const {
  return _internal_has_response();
}
inline const ::v1::model::CommandResponse& SendCommandResponseRequest::_internal_response() const {
  const ::v1::model::CommandResponse* p = response_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::CommandResponse&>(
      ::v1::model::_CommandResponse_default_instance_);
}
inline const ::v1::model::CommandResponse& SendCommandResponseRequest::response() const {
  // @@protoc_insertion_point(field_get:v1.agent.SendCommandResponseRequest.response)
  return _internal_response();
}
inline void SendCommandResponseRequest::unsafe_arena_set_allocated_response(
    ::v1::model::CommandResponse* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.SendCommandResponseRequest.response)
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::release_response() {
  
  ::v1::model::CommandResponse* temp = response_;
  response_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:v1.agent.SendCommandResponseRequest.response)
  
  ::v1::model::CommandResponse* temp = response_;
  response_ = nullptr;
  return temp;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::_internal_mutable_response() {
  
  if (response_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandResponse>(GetArenaForAllocation());
    response_ = p;
  }
  return response_;
}
inline ::v1::model::CommandResponse* SendCommandResponseRequest::mutable_response() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SendCommandResponseRequest.response)
  return _internal_mutable_response();
}
inline void SendCommandResponseRequest::set_allocated_response(::v1::model::CommandResponse* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(response_);
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(response));
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SendCommandResponseRequest.response)
}

// -------------------------------------------------------------------

// SendCommandResponseResponse

// -------------------------------------------------------------------

// GetCommandRequestStreamRequest

// repeated string command_filter = 1 [json_name = "commandFilter"];
inline int GetCommandRequestStreamRequest::_internal_command_filter_size() const {
  return command_filter_.size();
}
inline int GetCommandRequestStreamRequest::command_filter_size() const {
  return _internal_command_filter_size();
}
inline void GetCommandRequestStreamRequest::clear_command_filter() {
  command_filter_.Clear();
}
inline std::string* GetCommandRequestStreamRequest::add_command_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return _internal_add_command_filter();
}
inline const std::string& GetCommandRequestStreamRequest::_internal_command_filter(int index) const {
  return command_filter_.Get(index);
}
inline const std::string& GetCommandRequestStreamRequest::command_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return _internal_command_filter(index);
}
inline std::string* GetCommandRequestStreamRequest::mutable_command_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return command_filter_.Mutable(index);
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestStreamRequest.command_filter)
  command_filter_.Mutable(index)->assign(value);
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCommandRequestStreamRequest.command_filter)
  command_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::set_command_filter(int index, const char* value, size_t size) {
  command_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline std::string* GetCommandRequestStreamRequest::_internal_add_command_filter() {
  return command_filter_.Add();
}
inline void GetCommandRequestStreamRequest::add_command_filter(const std::string& value) {
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(std::string&& value) {
  command_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  command_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline void GetCommandRequestStreamRequest::add_command_filter(const char* value, size_t size) {
  command_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetCommandRequestStreamRequest.command_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCommandRequestStreamRequest::command_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return command_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCommandRequestStreamRequest::mutable_command_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetCommandRequestStreamRequest.command_filter)
  return &command_filter_;
}

// -------------------------------------------------------------------

// GetCommandRequestStreamResponse

// .v1.model.CommandRequest request = 1 [json_name = "request"];
inline bool GetCommandRequestStreamResponse::_internal_has_request() const {
  return this != internal_default_instance() && request_ != nullptr;
}
inline bool GetCommandRequestStreamResponse::has_request() const {
  return _internal_has_request();
}
inline const ::v1::model::CommandRequest& GetCommandRequestStreamResponse::_internal_request() const {
  const ::v1::model::CommandRequest* p = request_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::CommandRequest&>(
      ::v1::model::_CommandRequest_default_instance_);
}
inline const ::v1::model::CommandRequest& GetCommandRequestStreamResponse::request() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCommandRequestStreamResponse.request)
  return _internal_request();
}
inline void GetCommandRequestStreamResponse::unsafe_arena_set_allocated_request(
    ::v1::model::CommandRequest* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetCommandRequestStreamResponse.request)
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::release_request() {
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCommandRequestStreamResponse.request)
  
  ::v1::model::CommandRequest* temp = request_;
  request_ = nullptr;
  return temp;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::_internal_mutable_request() {
  
  if (request_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::CommandRequest>(GetArenaForAllocation());
    request_ = p;
  }
  return request_;
}
inline ::v1::model::CommandRequest* GetCommandRequestStreamResponse::mutable_request() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCommandRequestStreamResponse.request)
  return _internal_mutable_request();
}
inline void GetCommandRequestStreamResponse::set_allocated_request(::v1::model::CommandRequest* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(request_);
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(request));
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  request_ = request;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCommandRequestStreamResponse.request)
}

// -------------------------------------------------------------------

// GetTeleopControlDataStreamRequest

// repeated string stream_filter = 1 [json_name = "streamFilter"];
inline int GetTeleopControlDataStreamRequest::_internal_stream_filter_size() const {
  return stream_filter_.size();
}
inline int GetTeleopControlDataStreamRequest::stream_filter_size() const {
  return _internal_stream_filter_size();
}
inline void GetTeleopControlDataStreamRequest::clear_stream_filter() {
  stream_filter_.Clear();
}
inline std::string* GetTeleopControlDataStreamRequest::add_stream_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  return _internal_add_stream_filter();
}
inline const std::string& GetTeleopControlDataStreamRequest::_internal_stream_filter(int index) const {
  return stream_filter_.Get(index);
}
inline const std::string& GetTeleopControlDataStreamRequest::stream_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  return _internal_stream_filter(index);
}
inline std::string* GetTeleopControlDataStreamRequest::mutable_stream_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  return stream_filter_.Mutable(index);
}
inline void GetTeleopControlDataStreamRequest::set_stream_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  stream_filter_.Mutable(index)->assign(value);
}
inline void GetTeleopControlDataStreamRequest::set_stream_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  stream_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetTeleopControlDataStreamRequest::set_stream_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline void GetTeleopControlDataStreamRequest::set_stream_filter(int index, const char* value, size_t size) {
  stream_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline std::string* GetTeleopControlDataStreamRequest::_internal_add_stream_filter() {
  return stream_filter_.Add();
}
inline void GetTeleopControlDataStreamRequest::add_stream_filter(const std::string& value) {
  stream_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline void GetTeleopControlDataStreamRequest::add_stream_filter(std::string&& value) {
  stream_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline void GetTeleopControlDataStreamRequest::add_stream_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline void GetTeleopControlDataStreamRequest::add_stream_filter(const char* value, size_t size) {
  stream_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTeleopControlDataStreamRequest::stream_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  return stream_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTeleopControlDataStreamRequest::mutable_stream_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetTeleopControlDataStreamRequest.stream_filter)
  return &stream_filter_;
}

// -------------------------------------------------------------------

// GetTeleopControlDataStreamResponse

// .v1.model.ControlDatapoint control_datapoint = 1 [json_name = "controlDatapoint"];
inline bool GetTeleopControlDataStreamResponse::_internal_has_control_datapoint() const {
  return this != internal_default_instance() && control_datapoint_ != nullptr;
}
inline bool GetTeleopControlDataStreamResponse::has_control_datapoint() const {
  return _internal_has_control_datapoint();
}
inline const ::v1::model::ControlDatapoint& GetTeleopControlDataStreamResponse::_internal_control_datapoint() const {
  const ::v1::model::ControlDatapoint* p = control_datapoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::ControlDatapoint&>(
      ::v1::model::_ControlDatapoint_default_instance_);
}
inline const ::v1::model::ControlDatapoint& GetTeleopControlDataStreamResponse::control_datapoint() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopControlDataStreamResponse.control_datapoint)
  return _internal_control_datapoint();
}
inline void GetTeleopControlDataStreamResponse::unsafe_arena_set_allocated_control_datapoint(
    ::v1::model::ControlDatapoint* control_datapoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_datapoint_);
  }
  control_datapoint_ = control_datapoint;
  if (control_datapoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetTeleopControlDataStreamResponse.control_datapoint)
}
inline ::v1::model::ControlDatapoint* GetTeleopControlDataStreamResponse::release_control_datapoint() {
  
  ::v1::model::ControlDatapoint* temp = control_datapoint_;
  control_datapoint_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::ControlDatapoint* GetTeleopControlDataStreamResponse::unsafe_arena_release_control_datapoint() {
  // @@protoc_insertion_point(field_release:v1.agent.GetTeleopControlDataStreamResponse.control_datapoint)
  
  ::v1::model::ControlDatapoint* temp = control_datapoint_;
  control_datapoint_ = nullptr;
  return temp;
}
inline ::v1::model::ControlDatapoint* GetTeleopControlDataStreamResponse::_internal_mutable_control_datapoint() {
  
  if (control_datapoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::ControlDatapoint>(GetArenaForAllocation());
    control_datapoint_ = p;
  }
  return control_datapoint_;
}
inline ::v1::model::ControlDatapoint* GetTeleopControlDataStreamResponse::mutable_control_datapoint() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTeleopControlDataStreamResponse.control_datapoint)
  return _internal_mutable_control_datapoint();
}
inline void GetTeleopControlDataStreamResponse::set_allocated_control_datapoint(::v1::model::ControlDatapoint* control_datapoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_datapoint_);
  }
  if (control_datapoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(control_datapoint));
    if (message_arena != submessage_arena) {
      control_datapoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_datapoint, submessage_arena);
    }
    
  } else {
    
  }
  control_datapoint_ = control_datapoint;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetTeleopControlDataStreamResponse.control_datapoint)
}

// -------------------------------------------------------------------

// GetTeleopHeartbeatStreamRequest

// -------------------------------------------------------------------

// GetTeleopHeartbeatStreamResponse

// string peer_id = 1 [json_name = "peerId"];
inline void GetTeleopHeartbeatStreamResponse::clear_peer_id() {
  peer_id_.ClearToEmpty();
}
inline const std::string& GetTeleopHeartbeatStreamResponse::peer_id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopHeartbeatStreamResponse.peer_id)
  return _internal_peer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTeleopHeartbeatStreamResponse::set_peer_id(ArgT0&& arg0, ArgT... args) {
 
 peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopHeartbeatStreamResponse.peer_id)
}
inline std::string* GetTeleopHeartbeatStreamResponse::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTeleopHeartbeatStreamResponse.peer_id)
  return _internal_mutable_peer_id();
}
inline const std::string& GetTeleopHeartbeatStreamResponse::_internal_peer_id() const {
  return peer_id_.Get();
}
inline void GetTeleopHeartbeatStreamResponse::_internal_set_peer_id(const std::string& value) {
  
  peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTeleopHeartbeatStreamResponse::_internal_mutable_peer_id() {
  
  return peer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTeleopHeartbeatStreamResponse::release_peer_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetTeleopHeartbeatStreamResponse.peer_id)
  return peer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTeleopHeartbeatStreamResponse::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetTeleopHeartbeatStreamResponse.peer_id)
}

// bool is_disconnect = 2 [json_name = "isDisconnect"];
inline void GetTeleopHeartbeatStreamResponse::clear_is_disconnect() {
  is_disconnect_ = false;
}
inline bool GetTeleopHeartbeatStreamResponse::_internal_is_disconnect() const {
  return is_disconnect_;
}
inline bool GetTeleopHeartbeatStreamResponse::is_disconnect() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopHeartbeatStreamResponse.is_disconnect)
  return _internal_is_disconnect();
}
inline void GetTeleopHeartbeatStreamResponse::_internal_set_is_disconnect(bool value) {
  
  is_disconnect_ = value;
}
inline void GetTeleopHeartbeatStreamResponse::set_is_disconnect(bool value) {
  _internal_set_is_disconnect(value);
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopHeartbeatStreamResponse.is_disconnect)
}

// string session_type = 3 [json_name = "sessionType"];
inline void GetTeleopHeartbeatStreamResponse::clear_session_type() {
  session_type_.ClearToEmpty();
}
inline const std::string& GetTeleopHeartbeatStreamResponse::session_type() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopHeartbeatStreamResponse.session_type)
  return _internal_session_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTeleopHeartbeatStreamResponse::set_session_type(ArgT0&& arg0, ArgT... args) {
 
 session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopHeartbeatStreamResponse.session_type)
}
inline std::string* GetTeleopHeartbeatStreamResponse::mutable_session_type() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTeleopHeartbeatStreamResponse.session_type)
  return _internal_mutable_session_type();
}
inline const std::string& GetTeleopHeartbeatStreamResponse::_internal_session_type() const {
  return session_type_.Get();
}
inline void GetTeleopHeartbeatStreamResponse::_internal_set_session_type(const std::string& value) {
  
  session_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTeleopHeartbeatStreamResponse::_internal_mutable_session_type() {
  
  return session_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTeleopHeartbeatStreamResponse::release_session_type() {
  // @@protoc_insertion_point(field_release:v1.agent.GetTeleopHeartbeatStreamResponse.session_type)
  return session_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTeleopHeartbeatStreamResponse::set_allocated_session_type(std::string* session_type) {
  if (session_type != nullptr) {
    
  } else {
    
  }
  session_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetTeleopHeartbeatStreamResponse.session_type)
}

// -------------------------------------------------------------------

// GetTelemetryListenerStreamRequest

// repeated string stream_filter = 1 [json_name = "streamFilter"];
inline int GetTelemetryListenerStreamRequest::_internal_stream_filter_size() const {
  return stream_filter_.size();
}
inline int GetTelemetryListenerStreamRequest::stream_filter_size() const {
  return _internal_stream_filter_size();
}
inline void GetTelemetryListenerStreamRequest::clear_stream_filter() {
  stream_filter_.Clear();
}
inline std::string* GetTelemetryListenerStreamRequest::add_stream_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  return _internal_add_stream_filter();
}
inline const std::string& GetTelemetryListenerStreamRequest::_internal_stream_filter(int index) const {
  return stream_filter_.Get(index);
}
inline const std::string& GetTelemetryListenerStreamRequest::stream_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  return _internal_stream_filter(index);
}
inline std::string* GetTelemetryListenerStreamRequest::mutable_stream_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  return stream_filter_.Mutable(index);
}
inline void GetTelemetryListenerStreamRequest::set_stream_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  stream_filter_.Mutable(index)->assign(value);
}
inline void GetTelemetryListenerStreamRequest::set_stream_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  stream_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetTelemetryListenerStreamRequest::set_stream_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline void GetTelemetryListenerStreamRequest::set_stream_filter(int index, const char* value, size_t size) {
  stream_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline std::string* GetTelemetryListenerStreamRequest::_internal_add_stream_filter() {
  return stream_filter_.Add();
}
inline void GetTelemetryListenerStreamRequest::add_stream_filter(const std::string& value) {
  stream_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline void GetTelemetryListenerStreamRequest::add_stream_filter(std::string&& value) {
  stream_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline void GetTelemetryListenerStreamRequest::add_stream_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  stream_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline void GetTelemetryListenerStreamRequest::add_stream_filter(const char* value, size_t size) {
  stream_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetTelemetryListenerStreamRequest::stream_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  return stream_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetTelemetryListenerStreamRequest::mutable_stream_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetTelemetryListenerStreamRequest.stream_filter)
  return &stream_filter_;
}

// -------------------------------------------------------------------

// GetTelemetryListenerStreamResponse

// .v1.model.Datapoint datapoint = 1 [json_name = "datapoint"];
inline bool GetTelemetryListenerStreamResponse::_internal_has_datapoint() const {
  return this != internal_default_instance() && datapoint_ != nullptr;
}
inline bool GetTelemetryListenerStreamResponse::has_datapoint() const {
  return _internal_has_datapoint();
}
inline const ::v1::model::Datapoint& GetTelemetryListenerStreamResponse::_internal_datapoint() const {
  const ::v1::model::Datapoint* p = datapoint_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Datapoint&>(
      ::v1::model::_Datapoint_default_instance_);
}
inline const ::v1::model::Datapoint& GetTelemetryListenerStreamResponse::datapoint() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTelemetryListenerStreamResponse.datapoint)
  return _internal_datapoint();
}
inline void GetTelemetryListenerStreamResponse::unsafe_arena_set_allocated_datapoint(
    ::v1::model::Datapoint* datapoint) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datapoint_);
  }
  datapoint_ = datapoint;
  if (datapoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.GetTelemetryListenerStreamResponse.datapoint)
}
inline ::v1::model::Datapoint* GetTelemetryListenerStreamResponse::release_datapoint() {
  
  ::v1::model::Datapoint* temp = datapoint_;
  datapoint_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Datapoint* GetTelemetryListenerStreamResponse::unsafe_arena_release_datapoint() {
  // @@protoc_insertion_point(field_release:v1.agent.GetTelemetryListenerStreamResponse.datapoint)
  
  ::v1::model::Datapoint* temp = datapoint_;
  datapoint_ = nullptr;
  return temp;
}
inline ::v1::model::Datapoint* GetTelemetryListenerStreamResponse::_internal_mutable_datapoint() {
  
  if (datapoint_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Datapoint>(GetArenaForAllocation());
    datapoint_ = p;
  }
  return datapoint_;
}
inline ::v1::model::Datapoint* GetTelemetryListenerStreamResponse::mutable_datapoint() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetTelemetryListenerStreamResponse.datapoint)
  return _internal_mutable_datapoint();
}
inline void GetTelemetryListenerStreamResponse::set_allocated_datapoint(::v1::model::Datapoint* datapoint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(datapoint_);
  }
  if (datapoint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(datapoint));
    if (message_arena != submessage_arena) {
      datapoint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datapoint, submessage_arena);
    }
    
  } else {
    
  }
  datapoint_ = datapoint;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetTelemetryListenerStreamResponse.datapoint)
}

// -------------------------------------------------------------------

// PostTransformFrameResponse

// -------------------------------------------------------------------

// SetBaseFrameIDRequest

// string id = 1 [json_name = "id"];
inline void SetBaseFrameIDRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& SetBaseFrameIDRequest::id() const {
  // @@protoc_insertion_point(field_get:v1.agent.SetBaseFrameIDRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SetBaseFrameIDRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.SetBaseFrameIDRequest.id)
}
inline std::string* SetBaseFrameIDRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SetBaseFrameIDRequest.id)
  return _internal_mutable_id();
}
inline const std::string& SetBaseFrameIDRequest::_internal_id() const {
  return id_.Get();
}
inline void SetBaseFrameIDRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SetBaseFrameIDRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SetBaseFrameIDRequest::release_id() {
  // @@protoc_insertion_point(field_release:v1.agent.SetBaseFrameIDRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SetBaseFrameIDRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SetBaseFrameIDRequest.id)
}

// -------------------------------------------------------------------

// SetBaseFrameIDResponse

// -------------------------------------------------------------------

// ClearTransformTreeRequest

// -------------------------------------------------------------------

// ClearTransformTreeResponse

// -------------------------------------------------------------------

// CreateEventRequest

// .v1.model.Event event = 1 [json_name = "event"];
inline bool CreateEventRequest::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool CreateEventRequest::has_event() const {
  return _internal_has_event();
}
inline const ::v1::model::Event& CreateEventRequest::_internal_event() const {
  const ::v1::model::Event* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::v1::model::Event&>(
      ::v1::model::_Event_default_instance_);
}
inline const ::v1::model::Event& CreateEventRequest::event() const {
  // @@protoc_insertion_point(field_get:v1.agent.CreateEventRequest.event)
  return _internal_event();
}
inline void CreateEventRequest::unsafe_arena_set_allocated_event(
    ::v1::model::Event* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:v1.agent.CreateEventRequest.event)
}
inline ::v1::model::Event* CreateEventRequest::release_event() {
  
  ::v1::model::Event* temp = event_;
  event_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::v1::model::Event* CreateEventRequest::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:v1.agent.CreateEventRequest.event)
  
  ::v1::model::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::v1::model::Event* CreateEventRequest::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::v1::model::Event>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::v1::model::Event* CreateEventRequest::mutable_event() {
  // @@protoc_insertion_point(field_mutable:v1.agent.CreateEventRequest.event)
  return _internal_mutable_event();
}
inline void CreateEventRequest::set_allocated_event(::v1::model::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:v1.agent.CreateEventRequest.event)
}

// -------------------------------------------------------------------

// CreateEventResponse

// -------------------------------------------------------------------

// CreateEventError

// bool retryable = 1 [json_name = "retryable"];
inline void CreateEventError::clear_retryable() {
  retryable_ = false;
}
inline bool CreateEventError::_internal_retryable() const {
  return retryable_;
}
inline bool CreateEventError::retryable() const {
  // @@protoc_insertion_point(field_get:v1.agent.CreateEventError.retryable)
  return _internal_retryable();
}
inline void CreateEventError::_internal_set_retryable(bool value) {
  
  retryable_ = value;
}
inline void CreateEventError::set_retryable(bool value) {
  _internal_set_retryable(value);
  // @@protoc_insertion_point(field_set:v1.agent.CreateEventError.retryable)
}

// -------------------------------------------------------------------

// GetTeleopInfoRequest

// -------------------------------------------------------------------

// GetTeleopInfoResponse

// uint32 connection_count = 1 [json_name = "connectionCount"];
inline void GetTeleopInfoResponse::clear_connection_count() {
  connection_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTeleopInfoResponse::_internal_connection_count() const {
  return connection_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GetTeleopInfoResponse::connection_count() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetTeleopInfoResponse.connection_count)
  return _internal_connection_count();
}
inline void GetTeleopInfoResponse::_internal_set_connection_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  connection_count_ = value;
}
inline void GetTeleopInfoResponse::set_connection_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_connection_count(value);
  // @@protoc_insertion_point(field_set:v1.agent.GetTeleopInfoResponse.connection_count)
}

// -------------------------------------------------------------------

// PostLanRtcOfferRequest

// string offer = 1 [json_name = "offer"];
inline void PostLanRtcOfferRequest::clear_offer() {
  offer_.ClearToEmpty();
}
inline const std::string& PostLanRtcOfferRequest::offer() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostLanRtcOfferRequest.offer)
  return _internal_offer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostLanRtcOfferRequest::set_offer(ArgT0&& arg0, ArgT... args) {
 
 offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.PostLanRtcOfferRequest.offer)
}
inline std::string* PostLanRtcOfferRequest::mutable_offer() {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostLanRtcOfferRequest.offer)
  return _internal_mutable_offer();
}
inline const std::string& PostLanRtcOfferRequest::_internal_offer() const {
  return offer_.Get();
}
inline void PostLanRtcOfferRequest::_internal_set_offer(const std::string& value) {
  
  offer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostLanRtcOfferRequest::_internal_mutable_offer() {
  
  return offer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostLanRtcOfferRequest::release_offer() {
  // @@protoc_insertion_point(field_release:v1.agent.PostLanRtcOfferRequest.offer)
  return offer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostLanRtcOfferRequest::set_allocated_offer(std::string* offer) {
  if (offer != nullptr) {
    
  } else {
    
  }
  offer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), offer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.PostLanRtcOfferRequest.offer)
}

// -------------------------------------------------------------------

// PostLanRtcOfferResponse

// string answer = 1 [json_name = "answer"];
inline void PostLanRtcOfferResponse::clear_answer() {
  answer_.ClearToEmpty();
}
inline const std::string& PostLanRtcOfferResponse::answer() const {
  // @@protoc_insertion_point(field_get:v1.agent.PostLanRtcOfferResponse.answer)
  return _internal_answer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PostLanRtcOfferResponse::set_answer(ArgT0&& arg0, ArgT... args) {
 
 answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.PostLanRtcOfferResponse.answer)
}
inline std::string* PostLanRtcOfferResponse::mutable_answer() {
  // @@protoc_insertion_point(field_mutable:v1.agent.PostLanRtcOfferResponse.answer)
  return _internal_mutable_answer();
}
inline const std::string& PostLanRtcOfferResponse::_internal_answer() const {
  return answer_.Get();
}
inline void PostLanRtcOfferResponse::_internal_set_answer(const std::string& value) {
  
  answer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PostLanRtcOfferResponse::_internal_mutable_answer() {
  
  return answer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PostLanRtcOfferResponse::release_answer() {
  // @@protoc_insertion_point(field_release:v1.agent.PostLanRtcOfferResponse.answer)
  return answer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PostLanRtcOfferResponse::set_allocated_answer(std::string* answer) {
  if (answer != nullptr) {
    
  } else {
    
  }
  answer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), answer,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.PostLanRtcOfferResponse.answer)
}

// -------------------------------------------------------------------

// SendOnCustomDataChannelRequest

// string channel_name = 1 [json_name = "channelName"];
inline void SendOnCustomDataChannelRequest::clear_channel_name() {
  channel_name_.ClearToEmpty();
}
inline const std::string& SendOnCustomDataChannelRequest::channel_name() const {
  // @@protoc_insertion_point(field_get:v1.agent.SendOnCustomDataChannelRequest.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendOnCustomDataChannelRequest::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.SendOnCustomDataChannelRequest.channel_name)
}
inline std::string* SendOnCustomDataChannelRequest::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SendOnCustomDataChannelRequest.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& SendOnCustomDataChannelRequest::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void SendOnCustomDataChannelRequest::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendOnCustomDataChannelRequest::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendOnCustomDataChannelRequest::release_channel_name() {
  // @@protoc_insertion_point(field_release:v1.agent.SendOnCustomDataChannelRequest.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendOnCustomDataChannelRequest::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SendOnCustomDataChannelRequest.channel_name)
}

// bytes payload = 2 [json_name = "payload"];
inline void SendOnCustomDataChannelRequest::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& SendOnCustomDataChannelRequest::payload() const {
  // @@protoc_insertion_point(field_get:v1.agent.SendOnCustomDataChannelRequest.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SendOnCustomDataChannelRequest::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.SendOnCustomDataChannelRequest.payload)
}
inline std::string* SendOnCustomDataChannelRequest::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:v1.agent.SendOnCustomDataChannelRequest.payload)
  return _internal_mutable_payload();
}
inline const std::string& SendOnCustomDataChannelRequest::_internal_payload() const {
  return payload_.Get();
}
inline void SendOnCustomDataChannelRequest::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SendOnCustomDataChannelRequest::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SendOnCustomDataChannelRequest::release_payload() {
  // @@protoc_insertion_point(field_release:v1.agent.SendOnCustomDataChannelRequest.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SendOnCustomDataChannelRequest::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.SendOnCustomDataChannelRequest.payload)
}

// -------------------------------------------------------------------

// SendOnCustomDataChannelResponse

// -------------------------------------------------------------------

// GetCustomDataChannelMessageStreamRequest

// repeated string channel_name_filter = 1 [json_name = "channelNameFilter"];
inline int GetCustomDataChannelMessageStreamRequest::_internal_channel_name_filter_size() const {
  return channel_name_filter_.size();
}
inline int GetCustomDataChannelMessageStreamRequest::channel_name_filter_size() const {
  return _internal_channel_name_filter_size();
}
inline void GetCustomDataChannelMessageStreamRequest::clear_channel_name_filter() {
  channel_name_filter_.Clear();
}
inline std::string* GetCustomDataChannelMessageStreamRequest::add_channel_name_filter() {
  // @@protoc_insertion_point(field_add_mutable:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  return _internal_add_channel_name_filter();
}
inline const std::string& GetCustomDataChannelMessageStreamRequest::_internal_channel_name_filter(int index) const {
  return channel_name_filter_.Get(index);
}
inline const std::string& GetCustomDataChannelMessageStreamRequest::channel_name_filter(int index) const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  return _internal_channel_name_filter(index);
}
inline std::string* GetCustomDataChannelMessageStreamRequest::mutable_channel_name_filter(int index) {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  return channel_name_filter_.Mutable(index);
}
inline void GetCustomDataChannelMessageStreamRequest::set_channel_name_filter(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  channel_name_filter_.Mutable(index)->assign(value);
}
inline void GetCustomDataChannelMessageStreamRequest::set_channel_name_filter(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  channel_name_filter_.Mutable(index)->assign(std::move(value));
}
inline void GetCustomDataChannelMessageStreamRequest::set_channel_name_filter(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channel_name_filter_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline void GetCustomDataChannelMessageStreamRequest::set_channel_name_filter(int index, const char* value, size_t size) {
  channel_name_filter_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline std::string* GetCustomDataChannelMessageStreamRequest::_internal_add_channel_name_filter() {
  return channel_name_filter_.Add();
}
inline void GetCustomDataChannelMessageStreamRequest::add_channel_name_filter(const std::string& value) {
  channel_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline void GetCustomDataChannelMessageStreamRequest::add_channel_name_filter(std::string&& value) {
  channel_name_filter_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline void GetCustomDataChannelMessageStreamRequest::add_channel_name_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  channel_name_filter_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline void GetCustomDataChannelMessageStreamRequest::add_channel_name_filter(const char* value, size_t size) {
  channel_name_filter_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetCustomDataChannelMessageStreamRequest::channel_name_filter() const {
  // @@protoc_insertion_point(field_list:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  return channel_name_filter_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetCustomDataChannelMessageStreamRequest::mutable_channel_name_filter() {
  // @@protoc_insertion_point(field_mutable_list:v1.agent.GetCustomDataChannelMessageStreamRequest.channel_name_filter)
  return &channel_name_filter_;
}

// -------------------------------------------------------------------

// GetCustomDataChannelMessageStreamResponse

// string peer_id = 1 [json_name = "peerId"];
inline void GetCustomDataChannelMessageStreamResponse::clear_peer_id() {
  peer_id_.ClearToEmpty();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::peer_id() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCustomDataChannelMessageStreamResponse.peer_id)
  return _internal_peer_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCustomDataChannelMessageStreamResponse::set_peer_id(ArgT0&& arg0, ArgT... args) {
 
 peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetCustomDataChannelMessageStreamResponse.peer_id)
}
inline std::string* GetCustomDataChannelMessageStreamResponse::mutable_peer_id() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCustomDataChannelMessageStreamResponse.peer_id)
  return _internal_mutable_peer_id();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::_internal_peer_id() const {
  return peer_id_.Get();
}
inline void GetCustomDataChannelMessageStreamResponse::_internal_set_peer_id(const std::string& value) {
  
  peer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::_internal_mutable_peer_id() {
  
  return peer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::release_peer_id() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCustomDataChannelMessageStreamResponse.peer_id)
  return peer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCustomDataChannelMessageStreamResponse::set_allocated_peer_id(std::string* peer_id) {
  if (peer_id != nullptr) {
    
  } else {
    
  }
  peer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), peer_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCustomDataChannelMessageStreamResponse.peer_id)
}

// string channel_name = 2 [json_name = "channelName"];
inline void GetCustomDataChannelMessageStreamResponse::clear_channel_name() {
  channel_name_.ClearToEmpty();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::channel_name() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCustomDataChannelMessageStreamResponse.channel_name)
  return _internal_channel_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCustomDataChannelMessageStreamResponse::set_channel_name(ArgT0&& arg0, ArgT... args) {
 
 channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetCustomDataChannelMessageStreamResponse.channel_name)
}
inline std::string* GetCustomDataChannelMessageStreamResponse::mutable_channel_name() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCustomDataChannelMessageStreamResponse.channel_name)
  return _internal_mutable_channel_name();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::_internal_channel_name() const {
  return channel_name_.Get();
}
inline void GetCustomDataChannelMessageStreamResponse::_internal_set_channel_name(const std::string& value) {
  
  channel_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::_internal_mutable_channel_name() {
  
  return channel_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::release_channel_name() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCustomDataChannelMessageStreamResponse.channel_name)
  return channel_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCustomDataChannelMessageStreamResponse::set_allocated_channel_name(std::string* channel_name) {
  if (channel_name != nullptr) {
    
  } else {
    
  }
  channel_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), channel_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCustomDataChannelMessageStreamResponse.channel_name)
}

// bytes payload = 3 [json_name = "payload"];
inline void GetCustomDataChannelMessageStreamResponse::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::payload() const {
  // @@protoc_insertion_point(field_get:v1.agent.GetCustomDataChannelMessageStreamResponse.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetCustomDataChannelMessageStreamResponse::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:v1.agent.GetCustomDataChannelMessageStreamResponse.payload)
}
inline std::string* GetCustomDataChannelMessageStreamResponse::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:v1.agent.GetCustomDataChannelMessageStreamResponse.payload)
  return _internal_mutable_payload();
}
inline const std::string& GetCustomDataChannelMessageStreamResponse::_internal_payload() const {
  return payload_.Get();
}
inline void GetCustomDataChannelMessageStreamResponse::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetCustomDataChannelMessageStreamResponse::release_payload() {
  // @@protoc_insertion_point(field_release:v1.agent.GetCustomDataChannelMessageStreamResponse.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetCustomDataChannelMessageStreamResponse::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:v1.agent.GetCustomDataChannelMessageStreamResponse.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace agent
}  // namespace v1

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fagent_2fv1_2fagent_2eproto

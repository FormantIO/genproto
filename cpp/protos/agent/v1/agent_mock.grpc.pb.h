// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: protos/agent/v1/agent.proto

#include "protos/agent/v1/agent.pb.h"
#include "protos/agent/v1/agent.grpc.pb.h"

#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/sync_stream.h>
#include <gmock/gmock.h>
namespace v1 {
namespace agent {

class MockAgentStub : public Agent::StubInterface {
 public:
  MOCK_METHOD2(StreamDataRaw, ::grpc::ClientWriterInterface< ::v1::model::Datapoint>*(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response));
  MOCK_METHOD4(AsyncStreamDataRaw, ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>*(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncStreamDataRaw, ::grpc::ClientAsyncWriterInterface< ::v1::model::Datapoint>*(::grpc::ClientContext* context, ::v1::agent::StreamDataResponse* response, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostData, ::grpc::Status(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::v1::agent::PostDataResponse* response));
  MOCK_METHOD3(AsyncPostDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>*(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataResponse>*(::grpc::ClientContext* context, const ::v1::model::Datapoint& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostDataMulti, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::PostDataMultiRequest& request, ::v1::agent::PostDataMultiResponse* response));
  MOCK_METHOD3(AsyncPostDataMultiRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataMultiResponse>*(::grpc::ClientContext* context, const ::v1::agent::PostDataMultiRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostDataMultiRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostDataMultiResponse>*(::grpc::ClientContext* context, const ::v1::agent::PostDataMultiRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(GetTeleopControlDataStreamRaw, ::grpc::ClientReaderInterface< ::v1::agent::GetTeleopControlDataStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopControlDataStreamRequest& request));
  MOCK_METHOD4(AsyncGetTeleopControlDataStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTeleopControlDataStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopControlDataStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncGetTeleopControlDataStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTeleopControlDataStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopControlDataStreamRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(GetTeleopHeartbeatStreamRaw, ::grpc::ClientReaderInterface< ::v1::agent::GetTeleopHeartbeatStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopHeartbeatStreamRequest& request));
  MOCK_METHOD4(AsyncGetTeleopHeartbeatStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTeleopHeartbeatStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopHeartbeatStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncGetTeleopHeartbeatStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTeleopHeartbeatStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopHeartbeatStreamRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(GetTelemetryListenerStreamRaw, ::grpc::ClientReaderInterface< ::v1::agent::GetTelemetryListenerStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTelemetryListenerStreamRequest& request));
  MOCK_METHOD4(AsyncGetTelemetryListenerStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTelemetryListenerStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTelemetryListenerStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncGetTelemetryListenerStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetTelemetryListenerStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTelemetryListenerStreamRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(GetCustomDataChannelMessageStreamRaw, ::grpc::ClientReaderInterface< ::v1::agent::GetCustomDataChannelMessageStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCustomDataChannelMessageStreamRequest& request));
  MOCK_METHOD4(AsyncGetCustomDataChannelMessageStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetCustomDataChannelMessageStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCustomDataChannelMessageStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncGetCustomDataChannelMessageStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetCustomDataChannelMessageStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCustomDataChannelMessageStreamRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(CreateEvent, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::CreateEventRequest& request, ::v1::agent::CreateEventResponse* response));
  MOCK_METHOD3(AsyncCreateEventRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::CreateEventResponse>*(::grpc::ClientContext* context, const ::v1::agent::CreateEventRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateEventRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::CreateEventResponse>*(::grpc::ClientContext* context, const ::v1::agent::CreateEventRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(CreateInterventionRequest, ::grpc::Status(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::v1::model::InterventionRequest* response));
  MOCK_METHOD3(AsyncCreateInterventionRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>*(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncCreateInterventionRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>*(::grpc::ClientContext* context, const ::v1::model::InterventionRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetInterventionRequest, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::v1::model::InterventionRequest* response));
  MOCK_METHOD3(AsyncGetInterventionRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>*(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetInterventionRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionRequest>*(::grpc::ClientContext* context, const ::v1::agent::GetInterventionRequestRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetInterventionResponse, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::v1::model::InterventionResponse* response));
  MOCK_METHOD3(AsyncGetInterventionResponseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetInterventionResponseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::model::InterventionResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetInterventionResponseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetStreamsConfiguration, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::v1::agent::GetStreamsConfigurationResponse* response));
  MOCK_METHOD3(AsyncGetStreamsConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetStreamsConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetStreamsConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetStreamsConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetStreamsConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetApplicationConfiguration, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::v1::agent::GetApplicationConfigurationResponse* response));
  MOCK_METHOD3(AsyncGetApplicationConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetApplicationConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetApplicationConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetApplicationConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetApplicationConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetConfigBlobData, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetConfigBlobDataRequest& request, ::v1::agent::GetConfigBlobDataResponse* response));
  MOCK_METHOD3(AsyncGetConfigBlobDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetConfigBlobDataResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetConfigBlobDataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetConfigBlobDataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetConfigBlobDataResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetConfigBlobDataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetAgentConfiguration, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::v1::agent::GetAgentConfigurationResponse* response));
  MOCK_METHOD3(AsyncGetAgentConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetAgentConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetAgentConfigurationRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetAgentConfigurationResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetAgentConfigurationRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetBufferMetadata, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetBufferMetadataRequest& request, ::v1::agent::GetBufferMetadataResponse* response));
  MOCK_METHOD3(AsyncGetBufferMetadataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetBufferMetadataResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetBufferMetadataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetBufferMetadataRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetBufferMetadataResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetBufferMetadataRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(QueryDatapoints, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::QueryDatapointsRequest& request, ::v1::agent::QueryDatapointsResponse* response));
  MOCK_METHOD3(AsyncQueryDatapointsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::QueryDatapointsResponse>*(::grpc::ClientContext* context, const ::v1::agent::QueryDatapointsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncQueryDatapointsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::QueryDatapointsResponse>*(::grpc::ClientContext* context, const ::v1::agent::QueryDatapointsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(QueryEvents, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::QueryEventsRequest& request, ::v1::agent::QueryEventsResponse* response));
  MOCK_METHOD3(AsyncQueryEventsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::QueryEventsResponse>*(::grpc::ClientContext* context, const ::v1::agent::QueryEventsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncQueryEventsRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::QueryEventsResponse>*(::grpc::ClientContext* context, const ::v1::agent::QueryEventsRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(Health, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::v1::agent::HealthResponse* response));
  MOCK_METHOD3(AsyncHealthRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::HealthResponse>*(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncHealthRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::HealthResponse>*(::grpc::ClientContext* context, const ::v1::agent::HealthRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetCommandRequest, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::v1::agent::GetCommandRequestResponse* response));
  MOCK_METHOD3(AsyncGetCommandRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetCommandRequestResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetCommandRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetCommandRequestResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD2(GetCommandRequestStreamRaw, ::grpc::ClientReaderInterface< ::v1::agent::GetCommandRequestStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request));
  MOCK_METHOD4(AsyncGetCommandRequestStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetCommandRequestStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request, ::grpc::CompletionQueue* cq, void* tag));
  MOCK_METHOD3(PrepareAsyncGetCommandRequestStreamRaw, ::grpc::ClientAsyncReaderInterface< ::v1::agent::GetCommandRequestStreamResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetCommandRequestStreamRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendCommandResponse, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::v1::agent::SendCommandResponseResponse* response));
  MOCK_METHOD3(AsyncSendCommandResponseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SendCommandResponseResponse>*(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendCommandResponseRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SendCommandResponseResponse>*(::grpc::ClientContext* context, const ::v1::agent::SendCommandResponseRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostTransformFrame, ::grpc::Status(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::v1::agent::PostTransformFrameResponse* response));
  MOCK_METHOD3(AsyncPostTransformFrameRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostTransformFrameResponse>*(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostTransformFrameRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostTransformFrameResponse>*(::grpc::ClientContext* context, const ::v1::model::TransformFrame& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SetBaseFrameID, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::v1::agent::SetBaseFrameIDResponse* response));
  MOCK_METHOD3(AsyncSetBaseFrameIDRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SetBaseFrameIDResponse>*(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSetBaseFrameIDRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SetBaseFrameIDResponse>*(::grpc::ClientContext* context, const ::v1::agent::SetBaseFrameIDRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(ClearTransformTree, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::ClearTransformTreeRequest& request, ::v1::agent::ClearTransformTreeResponse* response));
  MOCK_METHOD3(AsyncClearTransformTreeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::ClearTransformTreeResponse>*(::grpc::ClientContext* context, const ::v1::agent::ClearTransformTreeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncClearTransformTreeRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::ClearTransformTreeResponse>*(::grpc::ClientContext* context, const ::v1::agent::ClearTransformTreeRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(GetTeleopInfo, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::GetTeleopInfoRequest& request, ::v1::agent::GetTeleopInfoResponse* response));
  MOCK_METHOD3(AsyncGetTeleopInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetTeleopInfoResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopInfoRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncGetTeleopInfoRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::GetTeleopInfoResponse>*(::grpc::ClientContext* context, const ::v1::agent::GetTeleopInfoRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostLanRtcOffer, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::PostLanRtcOfferRequest& request, ::v1::agent::PostLanRtcOfferResponse* response));
  MOCK_METHOD3(AsyncPostLanRtcOfferRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostLanRtcOfferResponse>*(::grpc::ClientContext* context, const ::v1::agent::PostLanRtcOfferRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostLanRtcOfferRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostLanRtcOfferResponse>*(::grpc::ClientContext* context, const ::v1::agent::PostLanRtcOfferRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(SendOnCustomDataChannel, ::grpc::Status(::grpc::ClientContext* context, const ::v1::agent::SendOnCustomDataChannelRequest& request, ::v1::agent::SendOnCustomDataChannelResponse* response));
  MOCK_METHOD3(AsyncSendOnCustomDataChannelRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SendOnCustomDataChannelResponse>*(::grpc::ClientContext* context, const ::v1::agent::SendOnCustomDataChannelRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncSendOnCustomDataChannelRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::SendOnCustomDataChannelResponse>*(::grpc::ClientContext* context, const ::v1::agent::SendOnCustomDataChannelRequest& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostGenericAPIRequest, ::grpc::Status(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::v1::agent::PostGenericAPIRequestResponse* response));
  MOCK_METHOD3(AsyncPostGenericAPIRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostGenericAPIRequestResponse>*(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostGenericAPIRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostGenericAPIRequestResponse>*(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PostGenericAPIUnbufferedRequest, ::grpc::Status(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::v1::agent::PostGenericAPIUnbufferedRequestResponse* response));
  MOCK_METHOD3(AsyncPostGenericAPIUnbufferedRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostGenericAPIUnbufferedRequestResponse>*(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::grpc::CompletionQueue* cq));
  MOCK_METHOD3(PrepareAsyncPostGenericAPIUnbufferedRequestRaw, ::grpc::ClientAsyncResponseReaderInterface< ::v1::agent::PostGenericAPIUnbufferedRequestResponse>*(::grpc::ClientContext* context, const ::v1::model::GenericAPIDatapoint& request, ::grpc::CompletionQueue* cq));
};

} // namespace v1
} // namespace agent


// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.2
// source: protos/agent/v1/agent.proto

package agent

import (
	context "context"
	model "github.com/FormantIO/genproto/go/v1/model"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentClient is the client API for Agent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentClient interface {
	StreamData(ctx context.Context, opts ...grpc.CallOption) (Agent_StreamDataClient, error)
	PostData(ctx context.Context, in *model.Datapoint, opts ...grpc.CallOption) (*PostDataResponse, error)
	PostDataMulti(ctx context.Context, in *PostDataMultiRequest, opts ...grpc.CallOption) (*PostDataMultiResponse, error)
	GetTeleopControlDataStream(ctx context.Context, in *GetTeleopControlDataStreamRequest, opts ...grpc.CallOption) (Agent_GetTeleopControlDataStreamClient, error)
	GetTeleopHeartbeatStream(ctx context.Context, in *GetTeleopHeartbeatStreamRequest, opts ...grpc.CallOption) (Agent_GetTeleopHeartbeatStreamClient, error)
	GetTelemetryListenerStream(ctx context.Context, in *GetTelemetryListenerStreamRequest, opts ...grpc.CallOption) (Agent_GetTelemetryListenerStreamClient, error)
	GetCustomDataChannelMessageStream(ctx context.Context, in *GetCustomDataChannelMessageStreamRequest, opts ...grpc.CallOption) (Agent_GetCustomDataChannelMessageStreamClient, error)
	CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error)
	CreateInterventionRequest(ctx context.Context, in *model.InterventionRequest, opts ...grpc.CallOption) (*model.InterventionRequest, error)
	GetInterventionRequest(ctx context.Context, in *GetInterventionRequestRequest, opts ...grpc.CallOption) (*model.InterventionRequest, error)
	GetInterventionResponse(ctx context.Context, in *GetInterventionResponseRequest, opts ...grpc.CallOption) (*model.InterventionResponse, error)
	GetStreamsConfiguration(ctx context.Context, in *GetStreamsConfigurationRequest, opts ...grpc.CallOption) (*GetStreamsConfigurationResponse, error)
	GetApplicationConfiguration(ctx context.Context, in *GetApplicationConfigurationRequest, opts ...grpc.CallOption) (*GetApplicationConfigurationResponse, error)
	GetConfigBlobData(ctx context.Context, in *GetConfigBlobDataRequest, opts ...grpc.CallOption) (*GetConfigBlobDataResponse, error)
	GetAgentConfiguration(ctx context.Context, in *GetAgentConfigurationRequest, opts ...grpc.CallOption) (*GetAgentConfigurationResponse, error)
	Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
	GetCommandRequest(ctx context.Context, in *GetCommandRequestRequest, opts ...grpc.CallOption) (*GetCommandRequestResponse, error)
	GetCommandRequestStream(ctx context.Context, in *GetCommandRequestStreamRequest, opts ...grpc.CallOption) (Agent_GetCommandRequestStreamClient, error)
	SendCommandResponse(ctx context.Context, in *SendCommandResponseRequest, opts ...grpc.CallOption) (*SendCommandResponseResponse, error)
	PostTransformFrame(ctx context.Context, in *model.TransformFrame, opts ...grpc.CallOption) (*PostTransformFrameResponse, error)
	SetBaseFrameID(ctx context.Context, in *SetBaseFrameIDRequest, opts ...grpc.CallOption) (*SetBaseFrameIDResponse, error)
	ClearTransformTree(ctx context.Context, in *ClearTransformTreeRequest, opts ...grpc.CallOption) (*ClearTransformTreeResponse, error)
	GetTeleopInfo(ctx context.Context, in *GetTeleopInfoRequest, opts ...grpc.CallOption) (*GetTeleopInfoResponse, error)
	PostLanRtcOffer(ctx context.Context, in *PostLanRtcOfferRequest, opts ...grpc.CallOption) (*PostLanRtcOfferResponse, error)
	SendOnCustomDataChannel(ctx context.Context, in *SendOnCustomDataChannelRequest, opts ...grpc.CallOption) (*SendOnCustomDataChannelResponse, error)
	PostGenericAPIRequest(ctx context.Context, in *model.GenericAPIDatapoint, opts ...grpc.CallOption) (*PostGenericAPIRequestResponse, error)
	PostGenericAPIUnbufferedRequest(ctx context.Context, in *model.GenericAPIDatapoint, opts ...grpc.CallOption) (*PostGenericAPIUnbufferedRequestResponse, error)
}

type agentClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentClient(cc grpc.ClientConnInterface) AgentClient {
	return &agentClient{cc}
}

func (c *agentClient) StreamData(ctx context.Context, opts ...grpc.CallOption) (Agent_StreamDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[0], "/v1.agent.Agent/StreamData", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentStreamDataClient{stream}
	return x, nil
}

type Agent_StreamDataClient interface {
	Send(*model.Datapoint) error
	CloseAndRecv() (*StreamDataResponse, error)
	grpc.ClientStream
}

type agentStreamDataClient struct {
	grpc.ClientStream
}

func (x *agentStreamDataClient) Send(m *model.Datapoint) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentStreamDataClient) CloseAndRecv() (*StreamDataResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StreamDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) PostData(ctx context.Context, in *model.Datapoint, opts ...grpc.CallOption) (*PostDataResponse, error) {
	out := new(PostDataResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostDataMulti(ctx context.Context, in *PostDataMultiRequest, opts ...grpc.CallOption) (*PostDataMultiResponse, error) {
	out := new(PostDataMultiResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostDataMulti", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetTeleopControlDataStream(ctx context.Context, in *GetTeleopControlDataStreamRequest, opts ...grpc.CallOption) (Agent_GetTeleopControlDataStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[1], "/v1.agent.Agent/GetTeleopControlDataStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetTeleopControlDataStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetTeleopControlDataStreamClient interface {
	Recv() (*GetTeleopControlDataStreamResponse, error)
	grpc.ClientStream
}

type agentGetTeleopControlDataStreamClient struct {
	grpc.ClientStream
}

func (x *agentGetTeleopControlDataStreamClient) Recv() (*GetTeleopControlDataStreamResponse, error) {
	m := new(GetTeleopControlDataStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetTeleopHeartbeatStream(ctx context.Context, in *GetTeleopHeartbeatStreamRequest, opts ...grpc.CallOption) (Agent_GetTeleopHeartbeatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[2], "/v1.agent.Agent/GetTeleopHeartbeatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetTeleopHeartbeatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetTeleopHeartbeatStreamClient interface {
	Recv() (*GetTeleopHeartbeatStreamResponse, error)
	grpc.ClientStream
}

type agentGetTeleopHeartbeatStreamClient struct {
	grpc.ClientStream
}

func (x *agentGetTeleopHeartbeatStreamClient) Recv() (*GetTeleopHeartbeatStreamResponse, error) {
	m := new(GetTeleopHeartbeatStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetTelemetryListenerStream(ctx context.Context, in *GetTelemetryListenerStreamRequest, opts ...grpc.CallOption) (Agent_GetTelemetryListenerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[3], "/v1.agent.Agent/GetTelemetryListenerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetTelemetryListenerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetTelemetryListenerStreamClient interface {
	Recv() (*GetTelemetryListenerStreamResponse, error)
	grpc.ClientStream
}

type agentGetTelemetryListenerStreamClient struct {
	grpc.ClientStream
}

func (x *agentGetTelemetryListenerStreamClient) Recv() (*GetTelemetryListenerStreamResponse, error) {
	m := new(GetTelemetryListenerStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) GetCustomDataChannelMessageStream(ctx context.Context, in *GetCustomDataChannelMessageStreamRequest, opts ...grpc.CallOption) (Agent_GetCustomDataChannelMessageStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[4], "/v1.agent.Agent/GetCustomDataChannelMessageStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetCustomDataChannelMessageStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetCustomDataChannelMessageStreamClient interface {
	Recv() (*GetCustomDataChannelMessageStreamResponse, error)
	grpc.ClientStream
}

type agentGetCustomDataChannelMessageStreamClient struct {
	grpc.ClientStream
}

func (x *agentGetCustomDataChannelMessageStreamClient) Recv() (*GetCustomDataChannelMessageStreamResponse, error) {
	m := new(GetCustomDataChannelMessageStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) CreateEvent(ctx context.Context, in *CreateEventRequest, opts ...grpc.CallOption) (*CreateEventResponse, error) {
	out := new(CreateEventResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) CreateInterventionRequest(ctx context.Context, in *model.InterventionRequest, opts ...grpc.CallOption) (*model.InterventionRequest, error) {
	out := new(model.InterventionRequest)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/CreateInterventionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetInterventionRequest(ctx context.Context, in *GetInterventionRequestRequest, opts ...grpc.CallOption) (*model.InterventionRequest, error) {
	out := new(model.InterventionRequest)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetInterventionRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetInterventionResponse(ctx context.Context, in *GetInterventionResponseRequest, opts ...grpc.CallOption) (*model.InterventionResponse, error) {
	out := new(model.InterventionResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetInterventionResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetStreamsConfiguration(ctx context.Context, in *GetStreamsConfigurationRequest, opts ...grpc.CallOption) (*GetStreamsConfigurationResponse, error) {
	out := new(GetStreamsConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetStreamsConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetApplicationConfiguration(ctx context.Context, in *GetApplicationConfigurationRequest, opts ...grpc.CallOption) (*GetApplicationConfigurationResponse, error) {
	out := new(GetApplicationConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetApplicationConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetConfigBlobData(ctx context.Context, in *GetConfigBlobDataRequest, opts ...grpc.CallOption) (*GetConfigBlobDataResponse, error) {
	out := new(GetConfigBlobDataResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetConfigBlobData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetAgentConfiguration(ctx context.Context, in *GetAgentConfigurationRequest, opts ...grpc.CallOption) (*GetAgentConfigurationResponse, error) {
	out := new(GetAgentConfigurationResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetAgentConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) Health(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/Health", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetCommandRequest(ctx context.Context, in *GetCommandRequestRequest, opts ...grpc.CallOption) (*GetCommandRequestResponse, error) {
	out := new(GetCommandRequestResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetCommandRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetCommandRequestStream(ctx context.Context, in *GetCommandRequestStreamRequest, opts ...grpc.CallOption) (Agent_GetCommandRequestStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Agent_ServiceDesc.Streams[5], "/v1.agent.Agent/GetCommandRequestStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentGetCommandRequestStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Agent_GetCommandRequestStreamClient interface {
	Recv() (*GetCommandRequestStreamResponse, error)
	grpc.ClientStream
}

type agentGetCommandRequestStreamClient struct {
	grpc.ClientStream
}

func (x *agentGetCommandRequestStreamClient) Recv() (*GetCommandRequestStreamResponse, error) {
	m := new(GetCommandRequestStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *agentClient) SendCommandResponse(ctx context.Context, in *SendCommandResponseRequest, opts ...grpc.CallOption) (*SendCommandResponseResponse, error) {
	out := new(SendCommandResponseResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/SendCommandResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostTransformFrame(ctx context.Context, in *model.TransformFrame, opts ...grpc.CallOption) (*PostTransformFrameResponse, error) {
	out := new(PostTransformFrameResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostTransformFrame", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SetBaseFrameID(ctx context.Context, in *SetBaseFrameIDRequest, opts ...grpc.CallOption) (*SetBaseFrameIDResponse, error) {
	out := new(SetBaseFrameIDResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/SetBaseFrameID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) ClearTransformTree(ctx context.Context, in *ClearTransformTreeRequest, opts ...grpc.CallOption) (*ClearTransformTreeResponse, error) {
	out := new(ClearTransformTreeResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/ClearTransformTree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) GetTeleopInfo(ctx context.Context, in *GetTeleopInfoRequest, opts ...grpc.CallOption) (*GetTeleopInfoResponse, error) {
	out := new(GetTeleopInfoResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/GetTeleopInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostLanRtcOffer(ctx context.Context, in *PostLanRtcOfferRequest, opts ...grpc.CallOption) (*PostLanRtcOfferResponse, error) {
	out := new(PostLanRtcOfferResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostLanRtcOffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) SendOnCustomDataChannel(ctx context.Context, in *SendOnCustomDataChannelRequest, opts ...grpc.CallOption) (*SendOnCustomDataChannelResponse, error) {
	out := new(SendOnCustomDataChannelResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/SendOnCustomDataChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostGenericAPIRequest(ctx context.Context, in *model.GenericAPIDatapoint, opts ...grpc.CallOption) (*PostGenericAPIRequestResponse, error) {
	out := new(PostGenericAPIRequestResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostGenericAPIRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentClient) PostGenericAPIUnbufferedRequest(ctx context.Context, in *model.GenericAPIDatapoint, opts ...grpc.CallOption) (*PostGenericAPIUnbufferedRequestResponse, error) {
	out := new(PostGenericAPIUnbufferedRequestResponse)
	err := c.cc.Invoke(ctx, "/v1.agent.Agent/PostGenericAPIUnbufferedRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgentServer is the server API for Agent service.
// All implementations must embed UnimplementedAgentServer
// for forward compatibility
type AgentServer interface {
	StreamData(Agent_StreamDataServer) error
	PostData(context.Context, *model.Datapoint) (*PostDataResponse, error)
	PostDataMulti(context.Context, *PostDataMultiRequest) (*PostDataMultiResponse, error)
	GetTeleopControlDataStream(*GetTeleopControlDataStreamRequest, Agent_GetTeleopControlDataStreamServer) error
	GetTeleopHeartbeatStream(*GetTeleopHeartbeatStreamRequest, Agent_GetTeleopHeartbeatStreamServer) error
	GetTelemetryListenerStream(*GetTelemetryListenerStreamRequest, Agent_GetTelemetryListenerStreamServer) error
	GetCustomDataChannelMessageStream(*GetCustomDataChannelMessageStreamRequest, Agent_GetCustomDataChannelMessageStreamServer) error
	CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error)
	CreateInterventionRequest(context.Context, *model.InterventionRequest) (*model.InterventionRequest, error)
	GetInterventionRequest(context.Context, *GetInterventionRequestRequest) (*model.InterventionRequest, error)
	GetInterventionResponse(context.Context, *GetInterventionResponseRequest) (*model.InterventionResponse, error)
	GetStreamsConfiguration(context.Context, *GetStreamsConfigurationRequest) (*GetStreamsConfigurationResponse, error)
	GetApplicationConfiguration(context.Context, *GetApplicationConfigurationRequest) (*GetApplicationConfigurationResponse, error)
	GetConfigBlobData(context.Context, *GetConfigBlobDataRequest) (*GetConfigBlobDataResponse, error)
	GetAgentConfiguration(context.Context, *GetAgentConfigurationRequest) (*GetAgentConfigurationResponse, error)
	Health(context.Context, *HealthRequest) (*HealthResponse, error)
	GetCommandRequest(context.Context, *GetCommandRequestRequest) (*GetCommandRequestResponse, error)
	GetCommandRequestStream(*GetCommandRequestStreamRequest, Agent_GetCommandRequestStreamServer) error
	SendCommandResponse(context.Context, *SendCommandResponseRequest) (*SendCommandResponseResponse, error)
	PostTransformFrame(context.Context, *model.TransformFrame) (*PostTransformFrameResponse, error)
	SetBaseFrameID(context.Context, *SetBaseFrameIDRequest) (*SetBaseFrameIDResponse, error)
	ClearTransformTree(context.Context, *ClearTransformTreeRequest) (*ClearTransformTreeResponse, error)
	GetTeleopInfo(context.Context, *GetTeleopInfoRequest) (*GetTeleopInfoResponse, error)
	PostLanRtcOffer(context.Context, *PostLanRtcOfferRequest) (*PostLanRtcOfferResponse, error)
	SendOnCustomDataChannel(context.Context, *SendOnCustomDataChannelRequest) (*SendOnCustomDataChannelResponse, error)
	PostGenericAPIRequest(context.Context, *model.GenericAPIDatapoint) (*PostGenericAPIRequestResponse, error)
	PostGenericAPIUnbufferedRequest(context.Context, *model.GenericAPIDatapoint) (*PostGenericAPIUnbufferedRequestResponse, error)
	mustEmbedUnimplementedAgentServer()
}

// UnimplementedAgentServer must be embedded to have forward compatible implementations.
type UnimplementedAgentServer struct {
}

func (UnimplementedAgentServer) StreamData(Agent_StreamDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamData not implemented")
}
func (UnimplementedAgentServer) PostData(context.Context, *model.Datapoint) (*PostDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostData not implemented")
}
func (UnimplementedAgentServer) PostDataMulti(context.Context, *PostDataMultiRequest) (*PostDataMultiResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDataMulti not implemented")
}
func (UnimplementedAgentServer) GetTeleopControlDataStream(*GetTeleopControlDataStreamRequest, Agent_GetTeleopControlDataStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeleopControlDataStream not implemented")
}
func (UnimplementedAgentServer) GetTeleopHeartbeatStream(*GetTeleopHeartbeatStreamRequest, Agent_GetTeleopHeartbeatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTeleopHeartbeatStream not implemented")
}
func (UnimplementedAgentServer) GetTelemetryListenerStream(*GetTelemetryListenerStreamRequest, Agent_GetTelemetryListenerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTelemetryListenerStream not implemented")
}
func (UnimplementedAgentServer) GetCustomDataChannelMessageStream(*GetCustomDataChannelMessageStreamRequest, Agent_GetCustomDataChannelMessageStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCustomDataChannelMessageStream not implemented")
}
func (UnimplementedAgentServer) CreateEvent(context.Context, *CreateEventRequest) (*CreateEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (UnimplementedAgentServer) CreateInterventionRequest(context.Context, *model.InterventionRequest) (*model.InterventionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInterventionRequest not implemented")
}
func (UnimplementedAgentServer) GetInterventionRequest(context.Context, *GetInterventionRequestRequest) (*model.InterventionRequest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterventionRequest not implemented")
}
func (UnimplementedAgentServer) GetInterventionResponse(context.Context, *GetInterventionResponseRequest) (*model.InterventionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterventionResponse not implemented")
}
func (UnimplementedAgentServer) GetStreamsConfiguration(context.Context, *GetStreamsConfigurationRequest) (*GetStreamsConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreamsConfiguration not implemented")
}
func (UnimplementedAgentServer) GetApplicationConfiguration(context.Context, *GetApplicationConfigurationRequest) (*GetApplicationConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationConfiguration not implemented")
}
func (UnimplementedAgentServer) GetConfigBlobData(context.Context, *GetConfigBlobDataRequest) (*GetConfigBlobDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfigBlobData not implemented")
}
func (UnimplementedAgentServer) GetAgentConfiguration(context.Context, *GetAgentConfigurationRequest) (*GetAgentConfigurationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentConfiguration not implemented")
}
func (UnimplementedAgentServer) Health(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Health not implemented")
}
func (UnimplementedAgentServer) GetCommandRequest(context.Context, *GetCommandRequestRequest) (*GetCommandRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommandRequest not implemented")
}
func (UnimplementedAgentServer) GetCommandRequestStream(*GetCommandRequestStreamRequest, Agent_GetCommandRequestStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCommandRequestStream not implemented")
}
func (UnimplementedAgentServer) SendCommandResponse(context.Context, *SendCommandResponseRequest) (*SendCommandResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandResponse not implemented")
}
func (UnimplementedAgentServer) PostTransformFrame(context.Context, *model.TransformFrame) (*PostTransformFrameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTransformFrame not implemented")
}
func (UnimplementedAgentServer) SetBaseFrameID(context.Context, *SetBaseFrameIDRequest) (*SetBaseFrameIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseFrameID not implemented")
}
func (UnimplementedAgentServer) ClearTransformTree(context.Context, *ClearTransformTreeRequest) (*ClearTransformTreeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearTransformTree not implemented")
}
func (UnimplementedAgentServer) GetTeleopInfo(context.Context, *GetTeleopInfoRequest) (*GetTeleopInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTeleopInfo not implemented")
}
func (UnimplementedAgentServer) PostLanRtcOffer(context.Context, *PostLanRtcOfferRequest) (*PostLanRtcOfferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLanRtcOffer not implemented")
}
func (UnimplementedAgentServer) SendOnCustomDataChannel(context.Context, *SendOnCustomDataChannelRequest) (*SendOnCustomDataChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOnCustomDataChannel not implemented")
}
func (UnimplementedAgentServer) PostGenericAPIRequest(context.Context, *model.GenericAPIDatapoint) (*PostGenericAPIRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGenericAPIRequest not implemented")
}
func (UnimplementedAgentServer) PostGenericAPIUnbufferedRequest(context.Context, *model.GenericAPIDatapoint) (*PostGenericAPIUnbufferedRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostGenericAPIUnbufferedRequest not implemented")
}
func (UnimplementedAgentServer) mustEmbedUnimplementedAgentServer() {}

// UnsafeAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentServer will
// result in compilation errors.
type UnsafeAgentServer interface {
	mustEmbedUnimplementedAgentServer()
}

func RegisterAgentServer(s grpc.ServiceRegistrar, srv AgentServer) {
	s.RegisterService(&Agent_ServiceDesc, srv)
}

func _Agent_StreamData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentServer).StreamData(&agentStreamDataServer{stream})
}

type Agent_StreamDataServer interface {
	SendAndClose(*StreamDataResponse) error
	Recv() (*model.Datapoint, error)
	grpc.ServerStream
}

type agentStreamDataServer struct {
	grpc.ServerStream
}

func (x *agentStreamDataServer) SendAndClose(m *StreamDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentStreamDataServer) Recv() (*model.Datapoint, error) {
	m := new(model.Datapoint)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Agent_PostData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.Datapoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostData(ctx, req.(*model.Datapoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostDataMulti_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDataMultiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostDataMulti(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostDataMulti",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostDataMulti(ctx, req.(*PostDataMultiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetTeleopControlDataStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTeleopControlDataStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetTeleopControlDataStream(m, &agentGetTeleopControlDataStreamServer{stream})
}

type Agent_GetTeleopControlDataStreamServer interface {
	Send(*GetTeleopControlDataStreamResponse) error
	grpc.ServerStream
}

type agentGetTeleopControlDataStreamServer struct {
	grpc.ServerStream
}

func (x *agentGetTeleopControlDataStreamServer) Send(m *GetTeleopControlDataStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetTeleopHeartbeatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTeleopHeartbeatStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetTeleopHeartbeatStream(m, &agentGetTeleopHeartbeatStreamServer{stream})
}

type Agent_GetTeleopHeartbeatStreamServer interface {
	Send(*GetTeleopHeartbeatStreamResponse) error
	grpc.ServerStream
}

type agentGetTeleopHeartbeatStreamServer struct {
	grpc.ServerStream
}

func (x *agentGetTeleopHeartbeatStreamServer) Send(m *GetTeleopHeartbeatStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetTelemetryListenerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTelemetryListenerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetTelemetryListenerStream(m, &agentGetTelemetryListenerStreamServer{stream})
}

type Agent_GetTelemetryListenerStreamServer interface {
	Send(*GetTelemetryListenerStreamResponse) error
	grpc.ServerStream
}

type agentGetTelemetryListenerStreamServer struct {
	grpc.ServerStream
}

func (x *agentGetTelemetryListenerStreamServer) Send(m *GetTelemetryListenerStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_GetCustomDataChannelMessageStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCustomDataChannelMessageStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetCustomDataChannelMessageStream(m, &agentGetCustomDataChannelMessageStreamServer{stream})
}

type Agent_GetCustomDataChannelMessageStreamServer interface {
	Send(*GetCustomDataChannelMessageStreamResponse) error
	grpc.ServerStream
}

type agentGetCustomDataChannelMessageStreamServer struct {
	grpc.ServerStream
}

func (x *agentGetCustomDataChannelMessageStreamServer) Send(m *GetCustomDataChannelMessageStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateEvent(ctx, req.(*CreateEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_CreateInterventionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.InterventionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).CreateInterventionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/CreateInterventionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).CreateInterventionRequest(ctx, req.(*model.InterventionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetInterventionRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterventionRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetInterventionRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetInterventionRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetInterventionRequest(ctx, req.(*GetInterventionRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetInterventionResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInterventionResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetInterventionResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetInterventionResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetInterventionResponse(ctx, req.(*GetInterventionResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetStreamsConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamsConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetStreamsConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetStreamsConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetStreamsConfiguration(ctx, req.(*GetStreamsConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetApplicationConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetApplicationConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetApplicationConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetApplicationConfiguration(ctx, req.(*GetApplicationConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetConfigBlobData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfigBlobDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetConfigBlobData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetConfigBlobData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetConfigBlobData(ctx, req.(*GetConfigBlobDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetAgentConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentConfigurationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetAgentConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetAgentConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetAgentConfiguration(ctx, req.(*GetAgentConfigurationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_Health_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).Health(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/Health",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).Health(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetCommandRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommandRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetCommandRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetCommandRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetCommandRequest(ctx, req.(*GetCommandRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetCommandRequestStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetCommandRequestStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AgentServer).GetCommandRequestStream(m, &agentGetCommandRequestStreamServer{stream})
}

type Agent_GetCommandRequestStreamServer interface {
	Send(*GetCommandRequestStreamResponse) error
	grpc.ServerStream
}

type agentGetCommandRequestStreamServer struct {
	grpc.ServerStream
}

func (x *agentGetCommandRequestStreamServer) Send(m *GetCommandRequestStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Agent_SendCommandResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCommandResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SendCommandResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/SendCommandResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SendCommandResponse(ctx, req.(*SendCommandResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostTransformFrame_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.TransformFrame)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostTransformFrame(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostTransformFrame",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostTransformFrame(ctx, req.(*model.TransformFrame))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SetBaseFrameID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetBaseFrameIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SetBaseFrameID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/SetBaseFrameID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SetBaseFrameID(ctx, req.(*SetBaseFrameIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_ClearTransformTree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearTransformTreeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).ClearTransformTree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/ClearTransformTree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).ClearTransformTree(ctx, req.(*ClearTransformTreeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_GetTeleopInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTeleopInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).GetTeleopInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/GetTeleopInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).GetTeleopInfo(ctx, req.(*GetTeleopInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostLanRtcOffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLanRtcOfferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostLanRtcOffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostLanRtcOffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostLanRtcOffer(ctx, req.(*PostLanRtcOfferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_SendOnCustomDataChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendOnCustomDataChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).SendOnCustomDataChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/SendOnCustomDataChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).SendOnCustomDataChannel(ctx, req.(*SendOnCustomDataChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostGenericAPIRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GenericAPIDatapoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostGenericAPIRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostGenericAPIRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostGenericAPIRequest(ctx, req.(*model.GenericAPIDatapoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Agent_PostGenericAPIUnbufferedRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GenericAPIDatapoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServer).PostGenericAPIUnbufferedRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.agent.Agent/PostGenericAPIUnbufferedRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServer).PostGenericAPIUnbufferedRequest(ctx, req.(*model.GenericAPIDatapoint))
	}
	return interceptor(ctx, in, info, handler)
}

// Agent_ServiceDesc is the grpc.ServiceDesc for Agent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Agent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.agent.Agent",
	HandlerType: (*AgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostData",
			Handler:    _Agent_PostData_Handler,
		},
		{
			MethodName: "PostDataMulti",
			Handler:    _Agent_PostDataMulti_Handler,
		},
		{
			MethodName: "CreateEvent",
			Handler:    _Agent_CreateEvent_Handler,
		},
		{
			MethodName: "CreateInterventionRequest",
			Handler:    _Agent_CreateInterventionRequest_Handler,
		},
		{
			MethodName: "GetInterventionRequest",
			Handler:    _Agent_GetInterventionRequest_Handler,
		},
		{
			MethodName: "GetInterventionResponse",
			Handler:    _Agent_GetInterventionResponse_Handler,
		},
		{
			MethodName: "GetStreamsConfiguration",
			Handler:    _Agent_GetStreamsConfiguration_Handler,
		},
		{
			MethodName: "GetApplicationConfiguration",
			Handler:    _Agent_GetApplicationConfiguration_Handler,
		},
		{
			MethodName: "GetConfigBlobData",
			Handler:    _Agent_GetConfigBlobData_Handler,
		},
		{
			MethodName: "GetAgentConfiguration",
			Handler:    _Agent_GetAgentConfiguration_Handler,
		},
		{
			MethodName: "Health",
			Handler:    _Agent_Health_Handler,
		},
		{
			MethodName: "GetCommandRequest",
			Handler:    _Agent_GetCommandRequest_Handler,
		},
		{
			MethodName: "SendCommandResponse",
			Handler:    _Agent_SendCommandResponse_Handler,
		},
		{
			MethodName: "PostTransformFrame",
			Handler:    _Agent_PostTransformFrame_Handler,
		},
		{
			MethodName: "SetBaseFrameID",
			Handler:    _Agent_SetBaseFrameID_Handler,
		},
		{
			MethodName: "ClearTransformTree",
			Handler:    _Agent_ClearTransformTree_Handler,
		},
		{
			MethodName: "GetTeleopInfo",
			Handler:    _Agent_GetTeleopInfo_Handler,
		},
		{
			MethodName: "PostLanRtcOffer",
			Handler:    _Agent_PostLanRtcOffer_Handler,
		},
		{
			MethodName: "SendOnCustomDataChannel",
			Handler:    _Agent_SendOnCustomDataChannel_Handler,
		},
		{
			MethodName: "PostGenericAPIRequest",
			Handler:    _Agent_PostGenericAPIRequest_Handler,
		},
		{
			MethodName: "PostGenericAPIUnbufferedRequest",
			Handler:    _Agent_PostGenericAPIUnbufferedRequest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamData",
			Handler:       _Agent_StreamData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "GetTeleopControlDataStream",
			Handler:       _Agent_GetTeleopControlDataStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTeleopHeartbeatStream",
			Handler:       _Agent_GetTeleopHeartbeatStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTelemetryListenerStream",
			Handler:       _Agent_GetTelemetryListenerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCustomDataChannelMessageStream",
			Handler:       _Agent_GetCustomDataChannelMessageStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetCommandRequestStream",
			Handler:       _Agent_GetCommandRequestStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protos/agent/v1/agent.proto",
}
